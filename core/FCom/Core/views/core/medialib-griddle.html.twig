<style type="text/css" media="screen">
    .oembed_container {
        padding: 20px 0;
        text-align: center;
        display: none;
    }

    .mejs-container {
        margin: 0 auto;
    }
</style>
{% set config = THIS.get('config') %}
{% set mediaLib =  APP.instance('FCom_Admin_Controller_MediaLibrary') %}
{% set uploadConfig = mediaLib.uploadConfig(config.type) %}
{% set mediaLibAttachConfig = mediaLib.gridConfig({'id': config.id, 'folder': uploadConfig.folder, 'config': config.config, 'mode': config.mode}) %}
{% set defaultFileSizeConfig = CONFIG.get('modules/FCom_Admin/default_media_file_size') | default('1') %}

{# need to processe config by class FCom_Core_View_BackboneGrid #}
{% set mediaLibAttachConfigProcessed = THIS.view('core/griddle').set('grid', mediaLibAttachConfig).getGridConfig() %}

<div id="{{ config.id }}-media-modal-container"></div>
<div id="{{ config.id }}-media-container"></div>

<script type="text/javascript">
    /**
     * variable contains React component media library
     */
    var mediaLibComponent{{ config.id }};
    var mediaLibGrid{{ config.id }};

    /**
     * global media modal config, need to use as javascript instead php twig, because we need to pass onConfirm function
     * todo: need to find the better way
     */
    var mediaModalConfig = {};
    /**
     *
     * @param id
     * @param config
     */
    function setMediaModalConfig(id, config) {
        mediaModalConfig[id] = config;
    }
    /**
     *
     * @param id
     * @returns {*}
     */
    function getMediaModalConfig(id) {
        if (typeof mediaModalConfig[id] != 'undefined') {
            return mediaModalConfig[id];
        }
        return null;
    }

    require(['underscore', 'react', 'griddle.fcomMediaLib'], function(_, React, FComMediaLib) {
        var mediaGridId = '{{ config.id }}';
        var mediaConfig = {{ UTIL.toJSON(mediaLibAttachConfigProcessed) | raw }};
        var uploadConfig = {{ UTIL.toJSON(uploadConfig) | raw }};
        var modalConfig = getMediaModalConfig(mediaGridId);
        var mainConfig = {{ UTIL.toJSON(config) | raw }};

        if (typeof mainConfig.showModal !== 'undefined' && mainConfig.showModal === false) {
            var containerEle = document.getElementById(mediaGridId + '-media-container');
        } else {
            var containerEle = document.getElementById(mediaGridId + '-media-modal-container');
        }

        mediaLibComponent{{ config.id }} = React.render(React.createElement(FComMediaLib, {
            mediaConfig: mediaConfig,
            uploadConfig: uploadConfig,
            modalConfig: modalConfig,
            showModal: mainConfig.showModal
        }), containerEle);
        mediaLibGrid{{ config.id }} = mediaLibComponent{{ config.id }}.getMainGridComponent();

        //re-scan image button
        $(mediaLibComponent{{ config.id }}.getDOMNode()).find('.btn-rescan-media').on('click', function () {
            $.post('{{ APP.href("media/grid/rescan?folder=") | raw }}{{ config.folder | raw}}&&type={{ config.type }}',
                    {do: 'rescan'}, function (response) {
                        if (response.status == 'success') {
                            $.bootstrapGrowl("Rescan success", {type: 'success', align: 'center', width: 'auto'});
                            mediaLibGrid{{ config.id }}.refresh();
                        } else {
                            $.bootstrapGrowl("Error:<br>" + response.message, {
                                type: 'danger',
                                align: 'center',
                                width: 'auto',
                                delay: 5000
                            });
                        }
                    });
        });
    });

    require(['tmpl', 'load-image', 'canvas-to-blob', 'iframe-transport', 'jquery.fileupload', 'jquery.fileupload-fp', 'jquery.fileupload-ui', 'griddle.fcomMediaLib', 'jquery.media-element', 'jquery.vimeo'], function () {
        var uploadUrl   = '{{ APP.href("media/grid/upload?type=") | raw }}{{config.type ? config.type : "" }}';
        var maxFileSize = parseInt({{ defaultFileSizeConfig }}) * 1024000;
        var mediaGrid   = mediaLibGrid{{ config.id }};

        $('#{{config.id}}-media-upload').fileupload({
            url: uploadUrl,
            multiple: true,
            maxFileSize: maxFileSize
            {% if config.mode and config.mode == 'thumbnail' %}
            , acceptFileTypes: /(\.|\/)(jpe?g|tiff|gif|png|bmp)$/i
            {% elseif uploadConfig.filetype_regex %}
            , acceptFileTypes: {{ uploadConfig.filetype_regex }}
            {% endif %}
        }).bind('fileuploadalways', function (e, data) {
            // console.log('DEBUG: fileuploadalways.data', data);
            if (mediaGrid) {
                //push data to media grid after upload
                if ($.isArray(data.result.files)) {
                    var rows = [], selectedRows = [];
                    data.result.files.forEach(function (obj) {
                        {% if config.multiSelAllowed %}
                        selectedRows.push(obj);
                        {% endif %}

                        rows.push(obj);

                        $('td.name span').each(function (i) {
                            if ($(this).html() === obj.file_name) {
                                $(this).parents('tr:first').remove();
                            }
                        });
                    });

                    if (selectedRows.length) {
                        mediaGrid.addSelectedRows(selectedRows);
                    }
                    mediaGrid.addRows(rows);
                }
            }
        });

        $(document).on('click', '.btn-preview', function(event) {
            event.preventDefault();
            var $container       = $('.video-tab-container');
            var $oembedContainer = $('.oembed_container');
            var provider         = $('input[name="provider"]:checked').val();

            var url = $('#oembed_url').val();
            if (url === '') {
                $.bootstrapGrowl("{{ 'Error: Please enter video link.' | _ }}", { type: 'danger', align: 'center', width: 'auto', delay: 5000 });
                return;
            }

            switch (provider) {
                case 'youtube':
                    // Default: https://www.youtube.com/watch?v=xxxxxxxxxxx
                    // Short: https://youtu.be/xxxxxxxxxxx
                    // Very short: http://y2u.be/xxxxxxxxxxx
                    var match = url.match(new RegExp('^(https?://)?(www\.)?(youtube\.com|youtu\.be|y2u\.be)/?(watch\?v=[^&]+|[^&]+)', 'i'));
                    if (!match) {
                        $.bootstrapGrowl("{{ 'Error: Youtube link is invalid.' | _ }}", { type: 'danger', align: 'center', width: 'auto', delay: 5000 });
                        return;
                    }

                    if (match && match[3] === 'y2u.be') {
                        url = url.replace('y2u', 'youtu');
                    }

                    $oembedContainer.html('<video width="640" height="360" id="media-player" controls="controls" preload="true"><source src="'+url+'" type="video/youtube" /></video>').show();
                    var playerPreview = new MediaElementPlayer('video#media-player', {
                        success: function (mediaElement, domObject) {
                            playerPreview.play();
                        }
                    });
                    break;
                case 'vimeo': 
                    // Default: https://vimeo.com/.../.../xxxxxxxxx
                    // Shorten: https://vimeo.com/xxxxxxxxx
                    if (!url.match(new RegExp('^(https?://)?(www\.)?(vimeo\.com)/?([^&]+)', 'i'))) {
                        $.bootstrapGrowl("{{ 'Error: Vimeo link is invalid.' | _ }}", { type: 'danger', align: 'center', width: 'auto', delay: 5000 });
                        return;
                    }

                    if (!url.match(/https?:\/\/player\.vimeo\.com\/video\/\d{9}\?api=\d{1}&player_id=vimeo_player/)) {
                        var id = url.slice(url.lastIndexOf('/') + 1);
                        var url = 'https://player.vimeo.com/video/' + id + '?api=1&player_id=vimeo_player';
                    }

                    $oembedContainer.empty().html('<iframe src="' + url + '" height="360" width="640" frameBorder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>').show();
                    break;
                default:
                    $.post("{{ APP.href('/catalog/products/embed_video') }}", { url: url }, function(r) {
                        if (r.error) {
                            $.bootstrapGrowl("{{ 'Error: This video type has not been supported.' | _ }}", { type: 'danger', align: 'center', width: 'auto', delay: 5000 });
                            return;
                        }

                        $oembedContainer.empty().html(r).show();
                    });
                    break;
            }
        });

        $(document).on('click', '.btn-embed', function(event) {
            event.preventDefault();
            var $container       = $('.video-tab-container');
            var $oembedContainer = $('.oembed_container');
            var provider         = $('input[name="provider"]:checked').val();

            var url = $('.oembed_url').val();
            if (!url) {
                $.bootstrapGrowl("{{ 'Error: Please enter video link.' | _ }}", { type: 'danger', align: 'center', width: 'auto', delay: 5000 });
            }

            switch(provider) {
                case 'youtube':
                    var match = url.match(new RegExp('^(https?://)?(www\.)?(youtube\.com|youtu\.be|y2u\.be)/?(watch\?v=[^&]+|[^&]+)', 'i'));
            
                    if (!match) {
                        $.bootstrapGrowl("{{ 'Error: Youtube link is invalid.' | _ }}", { type: 'danger', align: 'center', width: 'auto', delay: 5000 });
                        return;
                    }

                    if (match && match[3] === 'y2u.be') {
                        url = url.replace('y2u', 'youtu');
                    }
                    break;
                case 'vimeo':
                    if (!url.match(new RegExp('^(https?://)?(www\.)?(vimeo\.com)/?([^&]+)', 'i'))) {
                        $.bootstrapGrowl("{{ 'Error: Vimeo link is invalid.' | _ }}", { type: 'danger', align: 'center', width: 'auto', delay: 5000 });
                        return;
                    }
                    break;
                default:
                    break;
            }

            var hash = {
                oper: 'add',
                url: url
            };

            $.post("{{ APP.href('/catalog/products/embed_video') }}", hash, function(r) {
                if (!r.error) {
                    $.bootstrapGrowl("{{ 'Success: Add library success.' | _ }}", { type: 'success', align: 'center', width: 'auto', delay: 5000 });
                    mediaGrid.addRows([r]);
                } else {
                    $.bootstrapGrowl("{{ 'Error: Add library failure, please check your link.' | _ }}", { type: 'danger', align: 'center', width: 'auto', delay: 5000 });
                }
            });
        });
        
        $('video,audio').mediaelementplayer({ pauseOtherPlayers: true });
    });
</script>

<script>
    var uploadTr = '{{ 'Upload'|_ }}';
    var errorTr = '{{ 'Error'|_ }}';
    var cancelTr = '{{ 'Cancel'|_ }}';
</script>

{% verbatim %}
<script id="template-upload" type="text/x-tmpl">
{% for (var i=0, file; file=o.files[i]; i++) { %}
    <tr class="template-upload fade">
        <td class="preview"><span class="fade"></span></td>
        <td class="name"><span>{%=file.name%}</span></td>
        <td class="size"><span>{%=o.formatFileSize(file.size)%}</span></td>
        {% if (file.error) { %}
            <td class="error" colspan="2"><span class="label label-important">{%=errorTr%}</span> {%=file.error%}</td>
        {% } else if (o.files.valid && !i) { %}
        <td>
            <div class="progress progress-success progress-striped active" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0">
                <div class="bar" style="width:0%;"></div>
            </div>
        </td>
        <td>
            {% if (!o.options.autoUpload) { %}
                <button class="btn btn-primary start">
                    <i class="icon-upload icon-white"></i>
                    <span>{%=uploadTr%}</span>
                </button>
            {% } %}
        </td>
        {% } else { %}
            <td colspan="2"></td>
        {% } %}
        <td>
           {% if (!i) { %}
            <button class="btn btn-warning cancel">
                <i class="icon-ban-circle icon-white"></i>
                <span>{%=cancelTr%}</span>
            </button>
            {% } %}
        </td>
    </tr>
{% } %}
</script>
<!-- The template to display files available for download -->

<script id="template-download" type="text/x-tmpl">
    {% for (var i=0, file; file=o.files[i]; i++) { %}
        <tr class="template-download fade">
           {% if (file.error) { %}
                <td></td>
                <td class="name"><span>{%=file.name%}</span></td>
                <td class="size"><span>{%=o.formatFileSize(file.size)%}</span></td>
                <td class="error" colspan="2"><span class="label label-important">{%=errorTr%}</span> {%=file.error%}</td>
            {% } else { %}
                <td class="preview">
                {% if (file.thumbnail_url) { %}
                    <a href="{%=file.url%}" title="{%=file.name%}" data-gallery="gallery" download="{%=file.name%}">
                        <img src="{%=file.thumbnail_url%}">
                    </a>
                {% } %}
                </td>
                <td class="name">
                    <a href="{%=file.url%}" title="{%=file.name%}" data-gallery="{%=file.thumbnail_url&&'gallery'%}" download="{%=file.name%}">
                        {%=file.name%}
                    </a>
                </td>
                <td class="size"><span>{%=o.formatFileSize(file.size)%}</span></td>
                <td colspan="2"></td>
            {% } %}
            <td>
                <input type="checkbox" name="delete" value="1" class="toggle">
            </td>
        </tr>
    {% } %}
</script>
{% endverbatim %}
