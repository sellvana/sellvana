{% set config = THIS.getGridConfig() %}

{#{{ dump(config) }}#}
<div class="f-grid-wrapper" id="{{ config.id }}" style="min-height:520px;"></div>

{# modal body template #}
<div id="{{ config.id }}-modal"></div>

<script type="text/javascript">
	var Griddle = {};
    require(['react', 'fcom.griddle'], function(React, FComGriddleComponent) {
        var gridCallback = "{{ config.callbacks.componentDidMount ? config.callbacks.componentDidMount : config.id }}";
        if (typeof window[gridCallback] === 'undefined') {
            window[gridCallback] = function (grid) {
                $(grid.getDOMNode()).on('removedRows.griddle', function (e, removedRows) {
                    _(removedRows).each(function (row) {
                        var hash = {};
                        switch (grid.getConfig('id')) {
                            case 'FCom_Admin_Controller_Templates':
                                hash = {
                                    do: 'DELETE',
                                    model: {
                                        'view_name': row.view_name
                                    }
                                };
                                break;
                            default:
                                break;
                        }

                        if (config.edit_url && !_.isEmpty(hash)) {
                            $.post(config.edit_url, hash);
                        }
                    });
                }).on('addedRows.griddle', function (e, addedRows) {
                    // console.log('addedRows.griddle', addedRows);
                });
            };
        }

        var GriddleGrid = React.createClass({
        	getInitialState: function() {
        		return _.extend({ pending_state: false }, this.props.config);
        	},
        	componentDidMount: function() {
                $(Griddle).on('on{{ config.id }}Mounted', function(e, config) {
                	this.setState(config);
                }.bind(this));
        	},
        	componentWillUnmount: function() {
        		$(Griddle).off('on{{ config.id }}Mounted');
        	},
        	render: function() {
        		if (!this.state.pending_state) {
        			return React.createElement(FComGriddleComponent, { config: this.state });
        		} else return false;
        	}
        });

        var config = {{ UTIL.toJson(config) | raw }};
        React.render(
            React.createElement(GriddleGrid, { config: config }), document.getElementById(config.id)
        );

    });
</script>
