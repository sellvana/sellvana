/:
    type: map
    key_pattern: [ "^\$.+$", "^/.*[^/]$", "^[\^]/.*[^/][\$]$" ]

/*:
    type: map
    key_enum: [ type, enum, pattern, key_enum, key_pattern, prefer_enum, prefer_pattern, prefer_key, prefer_key_pattern, require_key_enum, required, children_min, children_max, value_min, value_max, str_length, unique, if_sibling_key, if_sibling, require_sibling_key, include ]

/*/type:
    type: seq_cast
    enum: [ str, int, float, number, text, bool, seq, seq_cast, map, scalar, any ]

/*/(enum|pattern|key_enum|key_pattern|prefer_enum|prefer_pattern|prefer_key|prefer_key_pattern|require_key_enum|require_sibling_key|include):
    type: seq_cast

/*/(enum|pattern|key_enum|key_pattern|prefer_enum|prefer_pattern|prefer_key|prefer_key_pattern|require_key_enum|require_sibling_key|include)/*:
    type: str

/*/(children_min|children_max|value_min|value_max|str_length):
    type: int

/*/(cast|required|unique):
    type: bool

/*/(if_sibling_key|if_sibling):
    type: map
