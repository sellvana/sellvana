<script>
/*require(['backbone', 'underscore', 'jquery'], function(Backbone, _, $) {
    var shopperGrid;

    var inputName = 'input[data-col="name"]';
    var inputOption = 'input[data-col="options"]';
    var selectFieldType = 'select[data-col="input_type"]';

    function updateRowsRecord(rows) {
        var res = [];
        _.each(rows, function(row) {
            if (typeof row.position === 'undefined') {
                row.position = 0;
            }
            res.push(_.pick(row, 'id', 'name', 'label', 'input_type', 'required', 'options', 'position'));
        });

        $("#prod_frontend_data").val(JSON.stringify(res));
    }

    window.fieldsGridRegister = function(grid) {
        shopperGrid = grid;
        $(shopperGrid.getDOMNode()).find(inputOption).addClass('requiredOptions');
        $(shopperGrid.getDOMNode()).find(inputName).addClass('checkUnique');
    };

    window.addBlankRows = function() {
        var rows = shopperGrid.getRows();
        shopperGrid.addRows([{id:rows.length}]);
    };

    *//*
     *function to set attachment grid data into form fields to send them server
     *This function is callend when 'save' button of product form is clicked.
     *//*
    window.submitCallback.push(function () {
        var valid = true,
            rows = shopperGrid.getRows();
        _.each(rows, function(row) {
            if (typeof row.name === 'undefined' || 
                typeof row.label === 'undefined' || 
                typeof row.options === 'undefined')
                valid = false;
        });
        if (valid == false) return false;
        updateRowsRecord(rows);
    });

    function checkUnique(value, elem, params) {
        var error = true;
        if (typeof (elem) !== 'undefined') {
            var parent = $(elem).parents('tr');
            var val = parent.find(inputName).val();
            shopperGrid.getRows().each(function (data) {
                if (parent.attr('id') != data.id && val == data.get('name')) {
                    error = false;
                }
            });
        }

        return error;
    }

    $.validator.addMethod('checkUnique', checkUnique, 'Field Name are already taken place.');

    $.validator.addClassRules("requiredOptions", {
        required: function (value, elem, params) {
            var error = true;
            if (typeof (elem) !== 'undefined') {
                var parent = $(elem).parents('tr');
                if (parent.find(selectFieldType).val() == 'select' && value.trim().length == 0) {
                    error = false;
                }
            }
            return error;
        }
    });

    $.validator.addClassRules("unique", {
        required: true,
        checkUnique: true
    });
});*/
    require(['backbone', 'underscore', 'jquery'], function(Backbone, _, $) {
        var mainGrid;
        var inputName = 'input[data-col="name"]';
        var inputOption = 'input[data-col="options"]';
        var selectFieldType = 'select[data-col="input_type"]';
        window.frontendFieldGridRegister = function(grid) {
            mainGrid = grid;
            grid.getGridSkeleton().Views.RowView.prototype.afterRender = function() {
                var self = this;
                this.$el.find(inputName).addClass('unique');
                this.$el.find(inputOption).addClass('requiredOptions');
                if (this.model.get('input_type') != 'select') {
                    this.$el.find(inputOption).prop('disabled', true);
                }
                this.$el.find(selectFieldType).change(function() {
                    if ($(this).val() == 'select') {
                        self.$el.find(inputOption).prop('disabled', false);
                    } else {
                        self.$el.find(inputOption).prop('disabled', true);
                    }
                })
            }
            grid.build();
        }
        $('#catalog-products-form').submit(function (ev) {
            var rows = mainGrid.getRows().toJSON();

            var res = [];
            for (var i in rows) {
                if (rows[i].position.length == 0) {
                    rows[i].position = 0;
                }
                res.push(_.pick(rows[i], 'id', 'name', 'label', 'input_type', 'required', 'options', 'position'));
            }

            $("#prod_frontend_data").val(JSON.stringify(res));
        });
        function checkUnique(value, elem, params) {
            var error = true;
            if (typeof (elem) !== 'undefined') {
                var parent = $(elem).parents('tr');
                var val = parent.find(inputName).val();
                mainGrid.getRows().each(function (data) {
                    if (parent.attr('id') != data.get('id') && val == data.get('name')) {
                        error = false;
                    }
                });
            }

            return error;
        }

        $.validator.addMethod('checkUnique', checkUnique , 'Field Name are already taken place.');

        $.validator.addClassRules("requiredOptions", {
            required: function (value, elem, params) {
                var error = true;
                if (typeof (elem) !== 'undefined') {
                    var parent = $(elem).parents('tr');
                    if (parent.find(selectFieldType).val() == 'select' &&  value.trim().length == 0) {
                        error = false;
                    }
                }
                return error;
            }
        });

        $.validator.addClassRules("unique", {
            required: true,
            checkUnique: true
        });

    });
</script>

<input type='hidden' id='prod_frontend_data' name='prod_frontend_data' />
<div class="row">
    <div class="col-sm-10">
        {{ THIS.view('core/backbonegrid').set('grid', APP.instance('Sellvana_ShopperFields_Admin').frontendFieldGrid(model))| raw }}
    </div>
</div>