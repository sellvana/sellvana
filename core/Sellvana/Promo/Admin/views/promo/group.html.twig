{% set m = THIS.get('m') %}
{% set group = THIS.get('g') %}
{% set promoCtrl = THIS.get('p') %}
{% set groupType =  group.get('group_type') %}
{% set groupId =  group.get('id') %}
{% set groupSuffix = groupType ~ "_" ~ groupId %}
{% set gridConfig = promoCtrl.productGridConfig( m, groupType, groupId ) %}

{% if gridConfig.caption %}
    {{ gridConfig.caption | raw }}
{% endif %}

<div id="promo-group-type-{{ groupSuffix }}" class="form-group">
    <label for="group-name-{{ groupSuffix }}" class="control-label col-md-2">{{ "Group name" | _ }}</label>
    <div class="col-md-2"><input id="group-name-{{ groupSuffix }}" type='text'
           name='group[{{ groupId }}][group_name]' value='{{ gridConfig.group_name }}' class="form-control"></div>
    <input type='hidden' name='group[{{ groupId }}][group_type]' value='{{ groupType }}'>
    <input type='hidden' name='_group_id' value='{{ groupId }}'>
    <input type='hidden' name='group[{{ groupId }}][product_ids_add]' id='product_ids_add-{{ groupSuffix }}'/>
    <input type='hidden' name='group[{{ groupId }}][product_ids_remove]' id='product_ids_remove-{{ groupSuffix }}'/>
    {% if groupType == "buy" and m and m.buy_group != "one" %}
        <button type="button" class="sz2 st2 btn"
                onclick="return removeGroup('{{ gridConfig.config.id }}');">{{ "Remove" | _ }}</button>
    {% endif %}
</div>
<br/>
<script>
function removeGroup(el) {
    var grid = $(el);
    var gId = $('#promo-group-type-{{ groupSuffix }} input[name=_group_id]', grid).val();
    var deleteIds = $('input[name=_del_group_ids]');
    if (gId > 0) {
        deleteIds.val(deleteIds.val() + ',' + gId);
    }
    grid.remove();
}

require(['jquery','underscore','backbone'], function ($, _, Backbone) {
    var prodLibGrid, mainGrid, originIds;
    window.{{ gridConfig.config.id }}_register = function(grid) {
        mainGrid = grid;
        grid.build();
        originIds = mainGrid.getRows().pluck('id');
        $(mainGrid.getGridSkeleton().AddButton).click(function() {
            $('#btn-fieldset-grid-modal').trigger('click');
        });
    };
    window.prodLibGridRegister = function(grid) {
        prodLibGrid = grid;
        grid.build();
        $(prodLibGrid.getGridSkeleton().AddButton).click(function() {
            mainGrid.getRows().add(prodLibGrid.getSelectedRows().toJSON());
            prodLibGrid.getGridView().clearSelectedRows();
            $('.promo-prod-modal-close').trigger('click');
        });
    };

    $('#promo-form').submit(function() {
        var addedIds = _.difference(mainGrid.getRows().pluck('id'), originIds);
        var removedIds = _.difference(originIds, mainGrid.getRows().pluck('id'));
        console.log(removedIds);
        $('#product_ids_add-{{ groupSuffix }}').val(addedIds.join(','));
        $('#product_ids_remove-{{ groupSuffix }}').val(removedIds.join(','));
    });

});
</script>

{{ THIS.view('core/backbonegrid').set('grid', gridConfig) | raw }}


