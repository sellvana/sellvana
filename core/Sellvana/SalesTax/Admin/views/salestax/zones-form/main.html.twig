<!--{ label: {{ 'Zone Info'|_ }} }-->
<!--{ pos: 10 }-->

{% set m = THIS.get('model') %}
{% set validator = THIS.get('validator') %}
{% set fieldData = { validator:validator } %}
{% import THIS.view('core/form-elements').twigName() as forms %}
{% set zoneTypes = m.fieldOptions('zone_type') %}
{% set countries = APP.instance('FCom_Core_Main').getAllowedCountries() %}
{% set regions = APP.instance('FCom_Core_Main').getAllowedRegions() %}
<fieldset name="main-product">
    <div class="f-section" id="zone-field-inputs">
        {{ forms.input(fieldData, {field:'title', required:1, label:'Title'|_}) }}
        {{ forms.select(fieldData, {field: 'zone_type', required: 1, label:'Zone Type'|_, select2: 1, options: zoneTypes}) }}
        {{ forms.select(fieldData, {field: 'country', label:'Country'|_, select2: 1,
            options: countries, form_group_class: 'zone-field'}) }}
        {{ forms.select(fieldData, {id: 'region_select',field: 'region', label:'Region'|_, select2: 1, options: regions, form_group_class: 'zone-field'}) }}
        {{ forms.input(fieldData, {id: 'region_field', field: 'region', label:'Region'|_, form_group_class: 'zone-field', disabled: 1}) }}
        {{ forms.input(fieldData, {field: 'postcode_from', name: 'postcode', id: 'postcode', label:'Postcode'|_, form_group_class: 'zone-field'}) }}
        {{ forms.input(fieldData, {field: 'postcode_from', label:'Postcode from'|_, form_group_class: 'zone-field'}) }}
        {{ forms.input(fieldData, {field: 'postcode_to', label:'Postcode To'|_, form_group_class: 'zone-field'}) }}
        {{ forms.input(fieldData, {field: 'zone_rate_percent', label:'Zone Rate'|_}) }}
    </div>
</fieldset>

{% set elView = LAYOUT.view('core/form-elements') %}

<script type="text/javascript">
    require(['jquery'], function ($) {
        var $zoneTypes = $('#{{ elView.getInputId({field: 'zone_type'}) }}');
        var $zoneFields = $('#zone-field-inputs').find('.zone-field');
        var $country = $('#{{ elView.getInputId({field: 'country'}) }}');

        var regions = {{ UTIL.toJson(regions)|raw }};

        $country.on('change', function (e) {
            if($zoneTypes.val() !== 'region') {
                return;
            }
            // on country change, check if regions exist for country and if not, replace regions select
            var c = $(e.target).val();
            if(regions['@' + c]) {
                $('#region_select').attr('disabled', false).parents('.zone-field').show();
                $('#region_field').attr('disabled', true).parents('.zone-field').hide();
            } else {
                $('#region_select').attr('disabled', true).parents('.zone-field').hide();
                $('#region_field').attr('disabled', false).parents('.zone-field').show();
            }
        });

        function updateZoneFields(type) {
            $zoneFields.hide().find('input, select').attr('disabled', true);
            switch (type) {
                case 'country':
                    $country.attr('disabled', false).parents('.zone-field').show();
                    break;
                case 'region':
                    $country.attr('disabled', false).parents('.zone-field').show();
                        var c = $country.val();
                        console.log(c);
                        if(regions['@'+c]) {
                            $('#region_select').attr('disabled', false).parents('.zone-field').show();
                        } else {
                            $('#region_field').attr('disabled', false).parents('.zone-field').show();
                        }
                    break;
                case 'postcode':
                    $('#postcode').attr('disabled', false).parents('.zone-field').show();
                    break;
                case 'postrange':
                    $('#{{ elView.getInputId({field: 'postcode_from'}) }}').attr('disabled', false).parents('.zone-field').show();
                    $('#{{ elView.getInputId({field: 'postcode_to'}) }}').attr('disabled', false).parents('.zone-field').show();
                    break;
            }
        }
        updateZoneFields($zoneTypes.val());
        $zoneTypes.on('change', function (e) {
            var type = $(e.target).val();
            updateZoneFields(type);
        });
    });
</script>
