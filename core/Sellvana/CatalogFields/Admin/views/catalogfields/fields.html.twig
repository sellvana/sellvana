{% set fieldSetsCtrl = APP.instance('Sellvana_CatalogFields_Admin_Controller_FieldSets') %}
{% set fieldsConfig = fieldSetsCtrl.fieldsGridConfig() %}
{% set optionsGridConfig = fieldSetsCtrl.optionsGridConfig() %}
{% set langsGridConfig = fieldSetsCtrl.fieldLangsGridConfig() %}
{% set optionsConfigCompiled = THIS.view('core/griddle').set('grid', optionsGridConfig).getGridConfig() %}
{% set langsConfigCompiled = THIS.view('core/griddle').set('grid', langsGridConfig).getGridConfig() %}

<script>
require(['jquery', 'underscore', 'react', 'fcom.griddle', 'griddle.fcomModalForm', 'fcom.components', 'unique'], function ($, _, React, FComGriddleComponent, FComModalForm, Components) {
    var optionsGrid,
        optionsNode,
        langsGrid,
        langsNode,
        originOptionIds = [],
        removedOptionIds,
        isSelect = false;

    var OptionsComponent, LangsComponent;

    var fieldsGrid, fieldsNode, fieldsForm;
    window.fieldsGridRegister = function(grid) {
        fieldsGrid = grid;
        fieldsNode = $(fieldsGrid.getDOMNode());
    };

    window.optionsModalGridRegister = function(grid) {
        optionsGrid = grid;
        optionsNode = $(optionsGrid.getDOMNode());
    };

    window.langsModalGridRegister = function (grid) {
        langsGrid = grid;
        langsNode = $(grid.getDOMNode());
    };

    window.showModalToEditFields = function(row) {
        modalRender(row);
    };

    /**
     * callback function for top action to show modal to add fields
     * @param grid
     */
    window.showModalToAddField = function(grid) {
        modalRender();
    };

    window.saveFieldsModal = function(modal) {
        var fieldsForm = $(modal.getDOMNode()).find('form#fields-modal-form'),
            optionsForm = $(modal.getDOMNode()).find('form#fields_options_form'),
            id = fieldsForm.find('#id').val(),
            hash = { oper: id ? 'edit' : 'add', id: id },
            url = fieldsGrid.getConfig('edit_url'),
            grid = isSelect ? optionsGrid : langsGrid;

        fieldsForm.find('textarea, input, select').each(function() {
            var key = $(this).attr('id');
            var val = $(this).val();
            hash[key] = fieldsGrid.html2text(val);
        });


        if (isSelect) {
            var currentOptionIds = _.pluck(grid.getRows(), 'id');
            removedOptionIds = _.difference(originOptionIds, currentOptionIds);
            hash['rowsDelete'] = removedOptionIds;
            hash['rows'] = _(grid.getRows()).map(function (row, i) {
                if (row.langs && row.lang_vals) {
                    var langs = row.langs.split(',');
                    var lang_vals = row.lang_vals.split(',');

                    delete row.langs;
                    delete row.lang_vals;

                    row.languages = _(langs).map(function (lang, i) {
                        return {
                            value: lang_vals[i],
                            lang_code: lang
                        };
                    });
                }

                return row;
            });
        } else {
            var langs = [];
            _(grid.getRows()).each(function (row) {
                 langs.push({ lang_code: row.lang_code, value: row.value, input_type: hash['admin_input_type'] });
            });
            hash['data_serialized'] = JSON.stringify({ frontend_label_translation: langs });
        }

        if (fieldsForm.valid() && optionsForm.valid()) {
            $.post(url, hash, function(data) {
                $.bootstrapGrowl("{{ 'Saved succeeded.'|_ }}", { type: 'success', align: 'center', width: 'auto', delay: 3000 });
                fieldsGrid.refresh();
                modal.close();
            }, 'json');
        } else {
            return false;
        }
    };


    /**
     * callback function for render modal to add / edit fieldset
     * @param row|null
     */
    function modalRender(row) {console.log('row', row);
        isSelect = false;
        if (row && $.inArray(row.admin_input_type, ['select', 'multiselect']) != -1) {
            isSelect = true;
        }

        var modalContainerEle = document.getElementById('{{ fieldsConfig.config.id }}-modal');
        React.unmountComponentAtNode(modalContainerEle);
        React.render(
            React.createElement(Components.Modal, {
                    id: "addFieldModal",
                    show: true,
                    title: row ? "{{ 'Edit Field: '|_ }}" + row.field_code + ' - ' + row.field_name: "{{ 'Add Field'|_ }}",
                    confirm: "{{ 'Save Changes'|_ }}",
                    cancel: "{{ 'Cancel'|_ }}",
                    onLoad: function(modal) {
                        var node = $(modal.getDOMNode());
                        node.find('.modal-dialog').css('width', '960px');
                    },
                    onConfirm: window.saveFieldsModal
                },
                React.DOM.div({ className: "row f-grid-wrapper" },
                    React.DOM.div({ className: "tabbable" },
                        React.DOM.ul({ className: "nav nav-tabs prod-type f-horiz-nav-tabs" },
                            React.DOM.li({ className: "active" },
                                React.DOM.a({ "data-toggle": "tab", href: "#{{ fieldsConfig.config.id }}_form_tab" }, "{{ 'Field' | _ }}")
                            ),
                            row ? React.DOM.li(null,
                                React.DOM.a({
                                    "data-toggle": "tab",
                                    href: "#{{ fieldsConfig.config.id }}_options_tab"
                                }, isSelect ? "{{ 'Options' | _ }}" : "{{ 'Language Values' }}")
                            ) : null
                        ),
                        React.DOM.div({ className: "tab-content" },
                            React.DOM.div({ className: "tab-pane active", id: '{{ fieldsConfig.config.id }}_form_tab' },
                                React.createElement(FComModalForm, {columnMetadata: fieldsGrid.props.columnMetadata, id: fieldsGrid.getConfig('id'), row: row})
                            ),
                            row ? React.DOM.div({ className: "tab-pane", id: '{{ fieldsConfig.config.id }}_options_tab' },
                                React.DOM.form({id:'{{ fieldsConfig.config.id }}_options_form'})
                            ) : null
                        )
                    )
                )
            ), modalContainerEle);

        var attachGridContainerEle = document.getElementById('{{ fieldsConfig.config.id }}_options_form');
        if (row) {
            if (isSelect) {
                var optionsConfigCompiled = {{ UTIL.toJson(optionsConfigCompiled) | raw }};
                if (row.multilanguage == '0') {
                    optionsConfigCompiled.columns = _(optionsConfigCompiled.columns).filter(function (col, i) {
                        if (col.name == 0) return true;
                        return !(col.name == 'langs' || col.name == 'lang_vals');
                    });
                }

                var getUrl = optionsConfigCompiled.dataUrl + row.id;
                $.get(getUrl, function(data) {
                    if (typeof data[1] !== 'undefined') {
                        originOptionIds = _.pluck(data[1], 'id');

                        var rows = _(data[1]).map(function(row, i) {
                            if (row.data_serialized) {
                                var serialized = JSON.parse(row.data_serialized)['frontend_label_translation'];
                                var langs = [], lang_vals = [];
                                _(serialized).each(function(lang, code) {
                                    langs.push(code);
                                    lang_vals.push(lang);
                                });

                                row['langs'] = langs.join(',');
                                row['lang_vals'] = lang_vals.join(',');
                            }

                            return row;
                        });

                        optionsGrid.addRows(rows);
                    }
                }, 'json');

                OptionsComponent = React.render(
                        React.createElement(FComGriddleComponent, { config: optionsConfigCompiled}), attachGridContainerEle
                );

                if (row && _.contains(['select', 'multiselect'], row.admin_input_type)) {
                    optionsNode.find('button#add_new_field').prop('disabled', false);
                } else {
                    optionsNode.find('button#add_new_field').prop('disabled', true);
                }
            } else {
                var langsConfigCompiled = {{ UTIL.toJson(langsConfigCompiled) | raw }};
                LangsComponent = React.render(
                        React.createElement(FComGriddleComponent, { config: langsConfigCompiled }), attachGridContainerEle
                );

                var data = row.data_serialized && typeof row.data_serialized === 'string' ? JSON.parse(row.data_serialized) : row.data_serialized;
                var rows = data['frontend_label_translation'];
                if (rows) {
                    _(rows).each(function (row, i) {
                        rows[i].id = i;
                        originOptionIds.push(i);
                    });

                    langsGrid.addRows(rows);
                }
            }
        }
    }

    $(document).on('change', '#admin_input_type', function (e) {
        e.preventDefault();
        if (_.contains(['select', 'multiselect'], $(this).val())) {
            optionsNode.find('button#add_new_field').prop('disabled', false);
        } else {
            optionsNode.find('button#add_new_field').prop('disabled', true);
        }
    });

    window.insertNewOption = function(grid) {
        optionsGrid.addRows([{id: guid()}]);
    };

    window.insertNewLang = function (grid) {
        langsGrid.addRows([{id: guid()}]);
    };
});
</script>
<div class="f-admin-main-view">
    <div class="page-header f-admin-page-header">
        <h1 class="f-page-title">
            {#<i class="icon-file"></i>#}
            <span>{{ "Fields" |_ }}</span>
        </h1>
        {#<div class="btn-group">
            <button id="add_new_field" class="btn grid-new btn-primary _modal" type="button"><span>{{ "Add a field" |_ }}</span></button>
        </div>#}

    </div>

    <div class="f-admin-main">
        {{ THIS.view('core/griddle').set('grid', fieldsConfig)| raw }}
    </div>
</div>

<script>
/* Backbone Grid Section */
// require(['jquery', 'underscore', 'backbone', 'jquery.validate'], function($, _, Backbone) {
//     var fieldsGrid, optionsGrid, selectedRow, originOptionIds, removedOptionIds;
//     var optionForm = $('#options-form');
//     var fieldForm = $('#field-modal-form');

//     window.optionsGridRegister = function(grid) {
//      optionsGrid = grid;
//      optionsGrid.build();
//     };

//     window.fieldsGridRegister = function(grid) {
//         fieldsGrid = grid;
//         fieldsGrid.getGridSkeleton().Views.RowView.prototype._callbackCustom = function (ev) {
//             selectedRow = this.model;

//             if (selectedRow.get('admin_input_type') == 'select') {
//                 $(optionsGrid.getGridSkeleton().NewButton).removeClass('disabled');
//             } else {
//                 $(optionsGrid.getGridSkeleton().NewButton).addClass('disabled');
//             }

//          fieldsGrid.getModalForm().modalType = 'editable';
//          fieldsGrid.getGridSkeleton().currentRow = this.model;
//          fieldsGrid.getModalForm().render();

//             optionsGrid.getRows().url = '{{ APP.href('catalogfields/fieldsets/field_option_grid_data?field_id=') | raw }}' + selectedRow.get('id');
//             optionsGrid.getRows().fetch({
//                 reset: true,
//                 success: function () {
//                     originOptionIds = optionsGrid.getRows().pluck('id');
//                     optionsGrid.getGridView().render();
//                     if (optionsGrid.getRows().length > 0) {
//                         $('#options-form').validate();
//                     }
//                 }
//             });

//             $('#field-modal-header').html(selectedRow.get('field_name'));
//          $('#btn-field-grid-modal').trigger('click');
//         };

//         fieldsGrid.getGridSkeleton().Views.ModalForm.prototype.el = '#field-modal-form';
//         fieldsGrid.build();

//         //force show form when display modal
//         $('#field-grid-modal').on('show.bs.modal', function(e) {
//             $('#fieldset_tab').tab('show');
//         });
//     };

//     $('#add_new_field').click(function () {
//      optionsGrid.getRows().reset();
//      optionsGrid.getGridView().clearSelectedRows();

//         fieldsGrid.getModalForm().modalType = 'addable';
//         fieldsGrid.getModalForm().render();
//         $(optionsGrid.getGridSkeleton().NewButton).addClass('disabled');
//         //$('.tabbable #options_tab').hide();

//         $('#field-modal-header').html('Add Field');
//         $('#btn-field-grid-modal').trigger('click');
//     });

//     $('button.field-modal-save').click(function() {
//         if (optionForm.valid() && fieldForm.valid()) {
//             var dataForm = optionForm.serializeArray();
//             var rows = optionsGrid.getRows().toJSON();
//             /*rows.forEach(function (data, index) {
//                 data.label =  dataForm[index]['value'];
//             });*/

//             //delete option
//             removedOptionIds = _.difference(originOptionIds, optionsGrid.getRows().pluck('id'));
//             console.log(removedOptionIds);

//             fieldsGrid.getGridSkeleton().modalElementVals = {'rows': rows, 'rowsDelete': removedOptionIds};
//             if (fieldsGrid.getModalForm().saveChanges()) {
//                 selectedRow.set('num_options', optionsGrid.getRows().length);
//              selectedRow.trigger('render');
//              $('button.field-modal-close').trigger('click');
//             }
//         }
//     });
// });

</script>

{# Backbone Grid Section #}
{# <div class="f-admin-main-view">
  <div class="page-header f-admin-page-header">
      <h1 class="f-page-title">
          <i class="icon-file"></i>
          <span>{{ "Fields" |_ }}</span>
      </h1>
      <div class="page-header">
      </div>
      <div class="btn-group">
          <button id="add_new_field" class="btn grid-new btn-primary _modal" type="button"><span>{{ "Add a field" |_ }}</span></button>
      </div>
  </div>

  <div class="f-admin-main">
      {{ THIS.view('core/backbonegrid').set('grid', fieldSetsCtrl.fieldsGridConfig())| raw }}
  </div>
</div>

<div class='modal fade' id='field-grid-modal' tabindex='-1'>
    <div class='modal-dialog' style='width:600px;'>
        <div class='modal-content'>
            <div class='modal-header'>
                <button aria-hidden='true' class='close' data-dismiss='modal' type='button'>×</button>
                <h4 class='modal-title' id='field-modal-header'> {{ "Options" |_ }}</h4>
            </div>
            <div class='modal-body'>
                <div class='tabbable'>
                    <ul class='nav nav-tabs prod-type f-horiz-nav-tabs'>
                        <li class='active'>
                            <a data-toggle='tab' href='#edit_field_set' id='fieldset_tab'>
                                {{ "Field Sets"|_ }}
                            </a>
                        </li>
                        <li>
                            <a data-toggle='tab' href='#options' id='options_tab'>
                                {{ "Options"|_ }}
                            </a>
                        </li>
                    </ul>
                    <div class='tab-content'>
                        <div class='tab-pane active' id='edit_field_set'>
                            <form class="form form-horizontal validate-form" id="field-modal-form" novalidate="novalidate">
                            </form>
                        </div>
                        <div class='tab-pane' id='options'>
                            <form action="#" id="options-form">
                                {{ THIS.view('core/backbonegrid').set('grid', fieldSetsCtrl.optionsGridConfig()) | raw }}
                            </form>
                        </div>
                    </div>
                </div>
            </div>
             <div class='modal-footer'>
                <button class='btn btn-primary field-modal-save' type='button'>{{ "Save"|_ }}</button>
                <button class='btn btn-default btn-close field-modal-close' data-dismiss='modal' type='button'>{{ "Close"|_ }}</button>
            </div>
        </div>
    </div>
</div>
<a role="button" href="#field-grid-modal" data-toggle="modal" style='display:none;' id='btn-field-grid-modal'>hidden</a> #}
