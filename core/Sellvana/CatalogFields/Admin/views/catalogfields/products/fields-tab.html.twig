<style>
    #tab-fields #fields-container .select2-container .select2-choice,
    #tab-fields div.modal .select2-container .select2-choice {
        height: 28px;
        width: 150px;
        font-size: 0.8em;
    }

    #tab-fields .select2-container .select2-choice {
        width: 200px;
    }
</style>
{% set fieldSetModel = APP.instance('Sellvana_CatalogFields_Model_Set') %}
{% set ctrl = APP.instance('Sellvana_CatalogFields_Admin_Controller_Products') %}
{% set setCtrl = APP.instance('Sellvana_CatalogFields_Admin_Controller_FieldSets') %}
{% set fieldsConfig = setCtrl.fieldsGridConfig() %}
{% set sites = APP.instance('Sellvana_MultiSite_Model_Site').siteOptions() %}
{% set fieldsConfigCompiled = THIS.view('core/griddle').set('grid', fieldsConfig).getGridConfig() %}
{% set initialData = APP.instance('Sellvana_CatalogFields_Admin_Controller_Products').getInitialData(model) %}

<div id="fields-container">
    <div class="well">
        <div class="row">
            <input type="hidden" name="custom_fields" id="custom_fields" />
            <div id="multisite" class="{{ sites ? 'col-sm-3' : '' }}"></div>
            <div id="fieldsets" class="col-sm-5"></div>
            <div id="fields" class="col-sm-4"></div>
        </div>
    </div>
</div>
<div id='fields_list'></div>

<script type="text/javascript">
    require(['react', 'underscore', 'jquery', 'fcom.components', 'griddle.fcomModalForm', 'griddle.fcomSelect2', 'griddle.fcomLanguage', 'sortable', 'ckeditor', 'jquery.validate', 'unique'], function (React, _, $, Components, FComModalForm, FComSelect2, FComMultiLanguage, Sortable) {
        var APP = {},
            collection = {},
            $mainForm = $('#catalog-products-form'),
            initData = {{ UTIL.toJson(initialData) | raw }},
            sites = {{ UTIL.toJson(sites) | raw }},
            fieldsModalNode,
            fieldsForm,
            fields = [],
            fieldsOptions = {{ UTIL.toJson(APP.instance('Sellvana_CatalogFields_Model_Field').as_values('field_name')) | raw }},
            fieldSets = {},
            fieldSetOptions = {{ UTIL.toJson(fieldSetModel.as_values('set_name')) | raw }};

        function populateTreeIds(sets) {

            var startId = 1;

            walk(sets, function(node, parent) {
                node.node_id = startId;
                if(parent) {
                    node.parent_id = parent.id;
                } else {
                    node.parent_id = 0
                }
                collection[startId] = node;
                startId++;
                return node;
            });

            return sets;

        }

        function walk(sets, fn, parent) {
            _(sets).each(function(set, si) {

                collection[si] = set;

                var node = fn(set, parent);

                if(node.fields) {
                    walk(node.fields, fn, node);
                } else {
                    node.fields = [];
                }
            });
        }

        // Removes a node from collection
        // returns the node itself
        function _remove(id) {
            // Get the node we're moving
            var node = collection[id];

            var index = collection[node.parent_id].children.indexOf(node);
            // Remove node from it's current position
            collection[node.parent_id].children.splice(index, 1);
            return node;
        }

        // Inserts a node before another
        // node and updates it's parent
        // references
        function _insertBefore(node, dest) {
            // Get parent of the node we're inserting before
            var to = collection[dest].parent_id;
            // Find index of node we're inserting before
            var index = collection[to].children.indexOf(collection[dest]);
            _insert(node, to, index);

        }

        // Inserts a node after another
        // node and updates it's parent
        // references
        function _insertAfter(node, dest) {
            // Get parent of the node we're inserting before
            var to = collection[dest].parent_id;
            // Find index of node we're inserting before
            var index = collection[to].children.indexOf(collection[dest]);
            _insert(node, to, index + 1);
        }

        // Inserts node at new location
        // called internally by _insertBefore
        // and _insertAfter
        function _insert(node, to, index) {
            // Update parent reference
            node.parent_id = to;
            // Insert at new location
            collection[to].children.splice(index,0,node);
        }

        // Prepend node as first child
        function _prepend(node, dest) {
            _insert(node, dest, 0);
        }

        window.saveFieldsModal = function (modal) {
            if (!fieldsForm.valid())
                return;

            var hash = {
                oper: 'add'
            };

            fieldsForm.find('input, select').each(function (index) {
                hash[$(this).attr('id')] = $(this).val();
            });

            $.post('{{ APP.href('/catalogfields/fieldsets/field_grid_data') | raw }}', hash, function (r) {
                FieldComponent.setProps({ field_added: r });
                modal.close();
            });
        };

        var fieldItem = React.createClass({
            getDefaultProps: function () {
                return {
                    default_lang_fields: ['text', 'textarea', 'wysiwyg'],
                    editors: {}
                };
            },
            getInitialState: function () {
                return {
                    field: this.props.field
                };
            },
            componentDidMount: function () {
                this.renderField();
                this.initializeSpecialInput();
            },
            componentWillUpdate: function (nextProps, nextState) {
                this.clearCKEDITORIntances();
            },
            componentDidUpdate: function () {
                this.renderField();
                this.initializeSpecialInput();
            },
            componentWillUnmount: function () {
                React.unmountComponentAtNode(this.refs['field_' + this.state.field.id].getDOMNode());
                if (this.refs['lang_' + this.state.field.id])
                    React.unmountComponentAtNode(this.refs['lang_' + this.state.field.id].getDOMNode());
                if (this.refs['site_value_' + this.state.field.id])
                    React.unmountComponentAtNode(this.refs['site_value_' + this.state.field.id].getDOMNode());
            },
            clearCKEDITORIntances: function () {
                var that = this;
                if (CKEDITOR.instances.length) {
                    _(CKEDITOR.instances).each(function (editor, id) {
                        if (that.props.editors[id]) {
                            editor.destroy(true);
                            delete that.props.editors[id];
                        }
                    });
                }
            },
            getOptions: function (id) {
                var options = this.state.field.options || [];
                return _(options).map(function (option, id) {
                    return {
                        id: id,
                        text: option
                    };
                });
            },
            parseLangs: function (data) {
                var langs = data ? JSON.parse(data) : data;
                if (!langs || !langs.frontend_label_translation) {
                    return [];
                }

                return langs.frontend_label_translation;
            },
            handleSelect2Change: function (e, callback, selection) {
                this.props.refreshChanges(selection.id, selection.text, 'select');
            },
            handleInputChange: function (e) {
                var $input = $(e.target);
                this.props.refreshChanges($input.data('code'), $input.val());
            },
            createTextarea: function (field) {
                return React.createElement(Components.ControlInput, {
                    input_type: 'textarea',
                    value: field.default_value,
                    callback: this.handleInputChange,
                    attrs: {
                        id: guid(),
                        type: 'text',
                        name: guid(),
                        disabled: field.disable || false,
                        className: 'form-control',
                        'data-rule-required': (field.required || 'false'),
                        'data-code': field.field_code,
                        'data-field-id': field.id
                    }
                });
            },
            createWysiwyg: function (field) {
                return React.DOM.textarea({
                    id: guid(),
                    name: guid(),
                    disabled: field.disable || false,
                    className: 'form-control field-ckeditor',
                    'data-rule-required': field.required || 'false',
                    'data-code': field.field_code,
                    'data-field-id': field.id,
                    defaultValue: field.default_value || '0'
                });
            },
            createSelect2: function (field) {
                return React.createElement(FComSelect2, {
                    id: guid(),
                    name: guid(),
                    className: '',
                    placeholder: "{{ 'Select field options' |_ }}",
                    multiple: false,
                    options: this.getOptions(field.id),
                    enabled: field.disable || true,
                    'data-field-id': field.id,
                    onChange: this.handleSelect2Change,
                    defaultValue: [field.default_value]
                });
            },
            createSwitchBox: function (field) {
                return React.DOM.div(null,
                    React.DOM.input({
                        type: 'hidden',
                        name: guid(),
                        defaultValue: '0'
                    }),
                    React.DOM.div({
                            className: 'make-switch switch has-switch',
                            'data-off-label': '<i class="icon-remove"></i>',
                            'data-on-label': '<i class="icon-ok"></i>',
                            'data-on': 'primary'
                        },
                        React.DOM.input({
                            type: 'checkbox',
                            className: 'switch-cbx',
                            id: guid(),
                            name: guid(),
                            disabled: false,
                            defaultChecked: !!(field.value === undefined || field.value === '1'),
                            'data-code': field.field_code,
                            'data-field-id': field.id,
                            defaultValue: field.default_value
                        })
                    )
                );
            },
            createInput: function (field) {
                return React.createElement(Components.ControlInput, {
                    input_type: 'input',
                    value: field.default_value,
                    callback: this.handleInputChange,
                    attrs: {
                        type: 'text',
                        name: guid(),
                        disabled: field.disable || false,
                        className: 'form-control',
                        'data-rule-required': (field.required || 'false'),
                        'data-code': field.field_code,
                        'data-field-id': field.id
                    }
                });
            },
            createLanguageComponent: function (field) {
                return React.createElement(FComMultiLanguage, {
                    id: field.field_code + '_lang_field_' + field.id,
                    availLangs: this.parseLangs(field.languages),
                    inputType: field.admin_input_type,
                    defaultLangs: {{ UTIL.toJson(UTIL.localesToSelect2Options()) | raw }},
                    cClass: 'col-sm-3',
                    modalConfig: {
                        fieldCode: field.field_code,
                        onSaved: field.field_code + 'ModalSaveChange'
                    },
                    select2Config: {}
                });
            },
            createMultiSiteComponent: function (field) {
                return React.createElement(FComSelect2, {
                    id: guid(),
                    className: 'site-value',
                    multiple: false,
                    options: [
                        { id: '0', text: "{{ 'Use Default Value'|_ }}" },
                        { id: '1', text: "{{ 'Use Site Specific Value'|_ }}" }
                    ],
                    defaultValue: [1],
                    attrs: {
                        'data-field-id': field.id
                    },
                    onChange: this.props.handleSiteValueChange
                });
            },
            initializeSpecialInput: function () {
                var that = this,
                    field = this.state.field;

                switch (field.admin_input_type) {
                    case 'boolean':
                        var $switchCbx = $('.switch-cbx');
                        $switchCbx.bootstrapSwitch({
                            onText: '<i class="icon-ok" />',
                            offText: '<i class="icon-remove" />',
                            onSwitchChange: function (e, state) {
                                var s = state ? '1' : '0';
                                that.props.refreshChanges(field.field_code, s);
                            },
                            setState: field.default_value
                        });
                        break;
                    case 'wysiwyg':
                        var $wysiwyg = $('textarea.field-ckeditor[data-code="' + field.field_code + '"]');
                        var id = $wysiwyg.prop('id');
                        var fieldId = $wysiwyg.data('id');

                        if (id && CKEDITOR !== undefined && !CKEDITOR.instances[id]) {
                            that.props.editors[id] = true;

                            CKEDITOR.replace(id, {
                                startupMode: 'wysiwyg'
                            });

                            if (that.props.multisite) {
                                CKEDITOR.instances[id].setData(field.default_value);
                            }

                            CKEDITOR.instances[id].on('blur', function (e) {
                                e.editor.updateElement();
                                var data = e.editor.getData();
                                that.props.refreshChanges(field.field_code, data);
                            });
                        }
                        break;
                    default:
                        break;
                }
            },
            renderField: function () {
                var that = this;
                var field = this.props.field;
                React.render(this.createField(field), this.refs['field_' + field.id].getDOMNode());

                // If admin_input_type in ['text', 'textarea', 'wysiwyg'] then render multi-langs component
                if (_.contains(this.props.default_lang_fields, field.admin_input_type)) {
                    React.render(this.createLanguageComponent(field), this.refs['lang_' + field.id].getDOMNode());
                    window[field.field_code + 'ModalSaveChange'] = function (modal, langs) {
                        var modalNode = $(modal.getDOMNode());
                        if (field.admin_input_type != 'wysiwyg') {
                            var container = modalNode.find('div[id$="-container"]');
                            if (!$.fn.modalValidate(container))
                                return;
                        }

                        var code = modal.props.fieldCode;
                        that.props.refreshLangs(code, langs);
                        modal.close();
                    };
                }

                // If multisite is enabled && not default then render multisite field
                if (this.props.multisite && !this.props.is_default_site) {
                    React.render(this.createMultiSiteComponent(field), this.refs['site_value_' + field.id].getDOMNode());
                }
            },
            createField: function (field) {
                var sites = this.props.sites;
                var siteId = this.props.site_id || 'default';
                field.default_value = sites[siteId] ? sites[siteId][field.id] ? sites[siteId][field.id] : '' : field.value;
                switch (field.admin_input_type) {
                    case 'textarea':
                        return this.createTextarea(field);
                        break;
                    case 'wysiwyg':
                        return this.createWysiwyg(field);
                        break;
                    case 'select':
                    case 'multiselect':
                        return this.createSelect2(field);
                        break;
                    case 'boolean':
                        return this.createSwitchBox(field);
                        break;
                    default:
                        return this.createInput(field);
                        break;
                }
            },
            render: function () {
                var field = this.props.field;
                return React.DOM.div({
                        key: field.id,
                        id: field.field_code + '_field',
                        'data-field-id': field.id,
                        className: 'form-group'
                    },
                    React.DOM.div({className: 'col-md-9 col-lg-push-3'},
                        React.DOM.label({
                                className: 'col-md-2 control-label dd-handle control-handle',
                                htmlFor: 'prod-review-text',
                                'data-field-id': field.id
                            },
                            React.DOM.div({className: 'icon-ellipsis-vertical dd-handle dd3-handle'}),
                            React.DOM.span(null, field.field_name)
                        ),
                        React.DOM.div({className: 'col-md-3', key: 'field_' + field.id, ref: 'field_' + field.id}),
                        React.DOM.div({className: 'col-md-6'},
                            React.DOM.button({
                                    className: 'btn btn-danger btn-xs field-remove',
                                    style: {
                                        float: 'left',
                                        marginRight: '5px'
                                    },
                                    type: 'button',
                                    onClick: this.props.removeField,
                                    'data-field-id': field.id,
                                    'data-field-value': field.field_name
                                },
                                React.DOM.i({className: 'icon-remove'})
                            ),
                            React.DOM.div({ key: 'lang_' + field.id, ref: 'lang_' + field.id, className: 'col-md-4' }),
                            React.DOM.div({ key: 'site_value_' + field.id, ref: 'site_value_' + field.id, className: 'col-md-4' })
                        )
                    )
                )
            }
        });

        var fieldGrid = React.createClass({
//            mixins: [Components.SortableMixin],
            sortableOptions: {
                ref: "list",
                group: "sorting",
                model: "fields",
                revert: true,
                axis: 'y',
                handle: '.control-handle'
            },
            removeField: function (e) {
                var $target = $(e.currentTarget),
                    fieldId = $target.data('field-id'),
                    sites = this.props.sites;

                var index = _.findIndex(this.props.fields, { id: fieldId.toString() });
                if (index != -1) this.props.fields.splice(index, 1);

                // If has many sites then clear fields when remove field
                _(sites).each(function (site, si) {
                    delete sites[si][fieldId];
                });

                FieldComponent.setProps({ state: 'remove', id: fieldId });

                this.forceUpdate();
                this.props.refreshData();
            },
            render: function () {
                var that = this;
                var fields = _.uniq(_.clone(this.props.fields, true), 'id');
                var fieldItems = _(fields).map(function (field) {
                    return React.createElement(fieldItem, React.__spread({}, that.props, {
                        field: field,
                        key: field.id,
                        multisite: !_.isEmpty(that.props.sites),
                        removeField: that.removeField
                    }));
                });

                return React.DOM.div({
                        id: 'sort-list-' + this.props.set_id,
                        className: 'sort-item',
                        ref: 'list'
                    }, fieldItems
                );
            }
        });

        var setGrid = React.createClass({
            displayName: "fieldsListGrid",
            getInitialState: function () {
                return {
                    sets: this.props.sets,
                    sites: this.props.sites
                };
            },
            componentDidMount: function() {
                this.renderSets();
            },
            componentDidUpdate: function() {
                this.renderSets();
                this.props.refreshData();
            },
            componentWillUnmount: function() {
                _(this.state.sets).map(function(set, id) {
                    React.unmountComponentAtNode(this.refs['set_' + set.id].getDOMNode());
                }.bind(this));
            },
            renderSets: function () {
                _(this.state.sets).each(function(set, id) {
                    if (set.deleted) return null;
                    React.render(
                        React.createElement(fieldGrid, React.__spread({}, this.props, {
                            set_id: set.id,
                            fields: set.fields
                        })), this.refs['set_' + set.id].getDOMNode()
                    );
                }.bind(this));
            },
            removeSet: function (e) {
                var $target = $(e.currentTarget);
                var setId = $target.data('set-id').toString();
                var sets = this.state.sets;
                var sites = this.state.sites;

                sets[setId].deleted = true;
                var fieldIds = _.pluck(sets[setId].fields, 'id');

                // If has many sites then clear fields when remove set
                _(fieldIds).each(function (id, fi) {
                    _(sites).each(function (site, si) {
                        delete sites[si][id];
                    })
                });

                FieldsetComponent.setProps({ id: setId });
                FieldComponent.setProps({ id: fieldIds, state: 'remove' });

                this.setState({sets: sets, sites: sites});
            },
            render: function () {
                var that = this;
                return (
                    React.DOM.div({ className: 'sets-container', key: 'sets-container' },
                        _(this.state.sets).map(function (set, id) {
                            if (set.deleted) return null;
                            return React.DOM.div({
                                key: set.id,
                                'data-set-id': set.id,
                                className: 'box box-borderd green-border box-nomargin prod-fieldset'
                            },
                                React.DOM.div({className: 'box-header box-header-small'},
                                    React.DOM.div({className: 'title'}, set.set_name),
                                    React.DOM.div({className: 'actions'},
                                        React.DOM.button({
                                                type: 'button',
                                                className: 'btn box-remove btn-xs btn-link btn-remove',
                                                onClick: that.removeSet,
                                                'data-set-id': set.id
                                            },
                                            React.DOM.i({className: 'icon-remove'})
                                        ),
                                        React.DOM.button({
                                                className: 'btn box-collapse btn-xs btn-link btn-edit',
                                                type: 'button'
                                            },
                                            React.DOM.i({className: 'icon-chevron-down'})
                                        )
                                    )
                                ),
                                React.DOM.div({
                                    id: 'set_' + id,
                                    ref: 'set_' + id,
                                    className: 'box-content ui-sortable'
                                })
                            )
                        })
                    )
                )
            }
        });

        var FieldsListGrid = React.createClass({
            displayName: "FieldsListGrid",
            getDefaultProps: function () {
                return {
                    sets: {}
                };
            },
            getInitialState: function () {
                return {
                    sets: this.props.sets,
                    inputTypes: {},
                    editors: {},
                    sites: this.props.site_values || { default: {} },
                    is_default_site: true,
                    site_values: {},
                    site_id: ''
                };
            },
            componentWillMount: function () {},
            componentDidMount: function () {
//                this.loadSortable();
            },
            componentWillReceiveProps: function (nextProps) {
                var sites = this.state.sites;
                var siteId = '';

                // if current site is not `default` and does not exist then initialize it
                if (nextProps.site
                        && nextProps.site.id !== ''
                        && !sites[nextProps.site.id]
                ) {
                    sites[nextProps.site.id] = {};
                    siteId = nextProps.site.id;
                }

                this.setState({
                    sets: nextProps.sets,
                    sites: sites,
                    is_default_site: siteId === '',
                    is_multisite_changed: true,
                    site_id: siteId
                });
            },
            componentDidUpdate: function () {
                this.refreshData();
            },
            componentWillUnmount: function () {},
            refreshData: function () {console.log('refresh data');
                var that = this,
                    sets = this.state.sets,
                    sites = this.state.sites,
                    data = [];

                var site_values = sites[this.state.site_id || 'default'];
                _(sets).each(function (set, i) {
                    _(set.fields).each(function (f, fi) {
                        var $inputField = $('[data-code="'+ f.field_code+'"]');
                    });

                    if (!set.deleted) data.push(set);
                });

                if (this.props.multisite) {
                    $siteHiddenInput.val(JSON.stringify(sites));
                }

                if (_.isEmpty(data)) {
                    data.push(sites);
                }

                $customHiddenInput.val(JSON.stringify(data));
            },
            refreshChanges: function (code, value, type) {
                var that = this,
                    sets = this.state.sets,
                    sites = this.state.sites,
                    site_id = this.state.site_id || 'default';

                _(sets).each(function (set, i) {
                    _(set.fields).each(function (f, j) {
                        switch (type) {
                            case 'select':
                            case 'multiselect':
                                _(f.options).each(function (opt, key) {
                                    if (key == code) {
                                        sets[i].fields[j].value = value;
                                        if (sites[site_id]) sites[site_id][f.id] = value;
                                    }
                                });
                                break;
                            default:
                                if (f.field_code == code) {
                                    sets[i].fields[j].value = value;
                                    if (sites[site_id]) sites[site_id][f.id] = value;
                                }
                                break;
                        }
                    });
                });
                console.log('sets', sets);
                this.refreshData();
            },
            refreshLangs: function (code, langs) {
                var sets = this.state.sets;
                _(sets).each(function (set, i) {
                    var fieldCodes = _.pluck(set.fields, 'field_code');
                    if (_.contains(fieldCodes, code)) {
                        if (!langs.length) {
                            sets[i].fields[_.indexOf(fieldCodes, code)].lang_fields = [];
                        } else {
                            sets[i].fields[_.indexOf(fieldCodes, code)].lang_fields = langs;
                        }
                    }
                });
                this.refreshData();
            },
            handleSiteValueChange: function (e, callback, selection) {
                var that = this,
                    $target = $(e.currentTarget),
                    fieldId = $target.data('field-id'),
                    sets = this.state.fieldSets,
                    sites = this.state.sites,
                    siteId = this.state.site_id;

                var siteValues = this.state.site_values;
                siteValues[fieldId] = selection;

                // Use default value
                if (selection.id == '0') {
                    sites[siteId][fieldId] = sites['default'][fieldId];
                    _(sets).each(function (set, si) {
                        var fi = _.findIndex(set.fields, { id: fieldId });
                        if (fi != -1) sets[si].fields[fi].value = sites['default'][fieldId];
                    });
                }

                this.setState({ site_values: siteValues, fieldSets: sets });
                this.refreshData();
            },
            update: function(to) {
                var data = this.props.data;
                data.dragging = dragging;
                this.setState({data: data})
            },
            sort: function(to, from, placement) {

                dragging = from;

                if(from != to) {
                    var node = _remove(from);
                    if(placement == "before") {
                        _insertBefore(node,to);
                    } else if(placement == "after") {
                        _insertAfter(node, to);
                    } else if(placement == "append") {
                        _prepend(node,to);
                    }
                }

                this.update();
            },
            render: function () {
                return React.createElement(setGrid, React.__spread({}, this.state, {
                    refreshLangs: this.refreshLangs,
                    refreshChanges: this.refreshChanges,
                    refreshData: this.refreshData,
                    handleSiteValueChange: this.handleSiteValueChange
                }));
            }
        });

        if (initData !== -1) {
            _(initData).each(function (fieldSet, i) {
                if (!isNaN(i)) {
                    fieldSets[i] = fieldSet;
                    fields.push(fieldSet.fields);
                }
            });
        }

        var fieldsListContainer = document.getElementById('fields_list');
        React.unmountComponentAtNode(fieldsListContainer);
        var FieldsListComponent = React.render(
            React.createElement(FieldsListGrid, {
                sets: fieldSets || {},
                site_values: initData['site_values'],
                multisite: !_.isEmpty(sites)
            }), fieldsListContainer
        );

        var FieldSetsGrid = React.createClass({
            displayName: "FieldSetsGrid",
            getDefaultProps: function () {
                return {
                    sets: {},
                    options: {}
                };
            },
            getInitialState: function () {
                return {
                    sets: {},
                    removedOptions: [],
                    selection: null
                };
            },
            componentDidMount: function () {},
            componentWillMount: function () {
                var sets = this.props.fieldSets;
                var removedOptions = [];
                _(sets).each(function (set) {
                    removedOptions.push(set.id);
                });

                this.setState({
                    sets: sets,
                    removedOptions: removedOptions
                });
            },
            componentWillReceiveProps: function (nextProps) {
                this.reloadSets(nextProps.id);
            },
            componentWillUnmount: function () {},
            reloadSets: function (id) {
                var removedOptions = _.without(this.state.removedOptions, id.toString());
                this.setState({removedOptions: removedOptions});
            },
            handleSelect2Change: function (event, callback, selection) {
                this.state.selection = selection.id;
            },
            initSelect2: function () {
                return $.extend({}, {
                    id: 'sel_sets',
                    className: '',
                    placeholder: "{{ 'Select fieldset' |_ }}",
                    multiple: false,
                    callback: 'chooseFieldsSet'
                }, this.props.select2Config);
            },
            getOptions: function () {
                if (this.props.options) {
                    var os = [];
                    _(this.props.options).each(function (option, id) {
                        if (!_.contains(this.state.removedOptions, id)) {
                            os.push({id: id, text: option});
                        }
                    }.bind(this));
                    return os;
                }
                return [];
            },
            addSet: function (e) {
                var that = this;
                var setId = this.state.selection;

                if (!setId) {
                    $.bootstrapGrowl("{{ 'Please choose field set.' |_ }}", {
                        type: 'danger',
                        align: 'center',
                        width: 'auto',
                        delay: 3000
                    });
                    return;
                }

                var fieldIds = [];
                $.get('{{ APP.href('/catalogfields/products/get_fieldset?id=') | raw }}' + setId, function (r) {
                    var sets = that.props.fieldSets;
                    sets[r.id] = r;
                    fieldIds = _.pluck(sets[r.id].fields, 'id');
                    FieldsListComponent.setProps({ sets: sets });
                    FieldComponent.setProps({ id: fieldIds, state: 'add' });
                });

                var removedOptions = this.state.removedOptions;
                if (!_.contains(removedOptions, setId)) {
                    removedOptions.push(setId);
                }

                this.setState({removedOptions: removedOptions});

            },
            render: function () {
                return React.DOM.div({className: ""},
                    React.createElement(FComSelect2, React.__spread({}, this.initSelect2(), {
                        options: this.getOptions(),
                        onChange: this.handleSelect2Change
                    })),
                    React.DOM.button({
                        type: "button",
                        className: "btn btn-primary btn-sm",
                        id: "btn_add_set",
                        onClick: this.addSet
                    }, "{{ 'Add a Field Set'|_ }}")
                );
            }
        });

        var fieldsetsContainer = document.getElementById('fieldsets');
        React.unmountComponentAtNode(fieldsetsContainer);
        var FieldsetComponent = React.render(
            React.createElement(FieldSetsGrid, {
                fieldSets: fieldSets,
                options: fieldSetOptions
            }), fieldsetsContainer
        );

        var FieldsGrid = React.createClass({
            displayName: "FieldsGrid",
            getDefaultProps: function () {
                return {
                    fields: [],
                    options: {}
                };
            },
            getInitialState: function () {
                return {
                    fields: [],
                    selection: null,
                    removedOptions: []
                };
            },
            componentWillMount: function () {
                var fields = this.props.fields;

                var removedOptions = [];
                _(fields).each(function (f) {
                    if (f.length) {
                        _(f).each(function (item) {
                            removedOptions.push(item.id);
                        });
                    } else removedOptions.push(f.id);
                });

                this.setState({
                    fields: fields,
                    removedOptions: removedOptions
                });
            },
            componentDidMount: function () {},
            componentWillReceiveProps: function (nextProps) {
                this.reloadFields(nextProps);
            },
            componentDidUpdate: function (prevProps, prevState) {
                // Reset selection
                this.state.selection = null;
                if (this.props.id) delete this.props.id;
                if (this.props.state) delete this.props.state;
                if (this.props.field_added) delete this.props.field_added;
            },
            componentWillUnmount: function () {},
            reloadFields: function (props) {
                var options = this.state.options;
                var removedOptions = [];

                if (props.field_added) {
                    if (!_.contains(options, field_added.id)) {
                        options[field_added.id] = field_added.field_name;
                    }
                }

                if ($.isArray(props.id)) {
                    if (props.state && props.state == 'add') {
                        removedOptions = this.state.removedOptions.concat(props.id);
                    } else {
                        removedOptions = _.difference(this.state.removedOptions, props.id);
                    }
                } else {
                    if (props.state && props.state == 'add') {
                        removedOptions = this.state.removedOptions.concat(props.id);
                    } else {
                        removedOptions = _.without(this.state.removedOptions, props.id);
                    }
                }

                this.setState({removedOptions: removedOptions});
            },
            handleSelect2Change: function (event, callback, selection) {
                this.state.selection = selection.id;
            },
            initSelect2: function () {
                return $.extend({}, {
                    id: 'sel_fields',
                    className: '',
                    placeholder: "{{ 'Select field' |_ }}",
                    multiple: false
                }, this.props.select2Config);
            },
            getOptions: function () {
                if (this.props.options) {
                    var os = [];
                    _(this.props.options).each(function (option, id) {
                        if (!_.contains(this.state.removedOptions, id)) {
                            os.push({id: id, text: option});
                        }
                    }.bind(this));
                    return os;
                }
                return [];
            },
            setValidateForm: function (selector) {
                if (selector == null) {
                    selector = $(".validate-form");
                }
                if (jQuery().validate) {
                    return selector.each(function (i, elem) {
                        return $(elem).validate({
                            errorElement: "span",
                            errorClass: "help-block has-error",
                            errorPlacement: function (e, t) {
                                return t.parents(".controls").first().append(e);
                            },
                            highlight: function (e) {
                                $(e).closest('.form-group').removeClass("has-error has-success").addClass('has-error');
                                return $(e).closest('.help-block').css('display', 'block');
                            },
                            success: function (e) {
                                e.closest(".form-group").removeClass("has-error");
                                return e.closest(".help-block").css('display', 'none');
                            }
                        });
                    });
                }
            },
            showAddFieldsModal: function (grid) {
                var that = this;
                var modalContainer = document.getElementById('fcom_append_form');
                React.unmountComponentAtNode(modalContainer);
                var config = {{ UTIL.toJson(fieldsConfigCompiled) | raw }};
                React.render(
                    React.createElement(Components.Modal, {
                        id: "editFieldsModal",
                        show: true,
                        title: "{{ 'Add Fields' |_ }}",
                        confirm: "{{ 'Save changes' |_ }}",
                        cancel: "{{ 'Close' |_ }}",
                        onLoad: function (modal) {
                            fieldsModalNode = $(modal.getDOMNode());
                            fieldsForm = fieldsModalNode.find('#fields-modal-form');
                            fieldsModalNode.find('.modal-dialog').css('width', '600px');
                            that.setValidateForm(fieldsForm);
                            fieldsForm.find('#field_code').rules("add", {
                                onfocusout: false,
                                onkeyup: false,
                                remote: {
                                    url: '{{ APP.href('/catalogfields/fields/unique_field') | raw }}',
                                    type: 'post',
                                    data: {
                                        _name: 'field_code'
                                    },
                                    dataFilter: function (responseString) {
                                        var response = jQuery.parseJSON(responseString);
                                        currentMessage = response.Message;
                                        return response.unique;
                                    }
                                },
                                messages: {
                                    remote: "{{ 'This field code is already taken place.' |_ }}"
                                }
                            });
                        },
                        onConfirm: window.saveFieldsModal
                    },
                    React.DOM.div({className: "row f-grid-wrapper"},
                        React.createElement(FComModalForm, {
                            columnMetadata: config.columns,
                            id: config.id
                        })
                    )
                ), modalContainer);
            },
            addField: function () {
                var that = this;
                var id = this.state.selection;
                var sets = that.props.sets;

                if (!id) {
                    $.bootstrapGrowl("{{ 'Please choose field.' |_ }}", {
                        type: 'danger',
                        align: 'center',
                        width: 'auto',
                        delay: 3000
                    });
                    return;
                }

                var firstId = _.pluck(sets, 'id')[0];
                if (!firstId) {
                    $.bootstrapGrowl("{{ 'Please add field set before insert field.' |_ }}", {
                        type: 'danger',
                        align: 'center',
                        width: 'auto',
                        delay: 3000
                    });
                    return;
                }

                var inputType = {};
                $.get('{{ APP.href('/catalogfields/products/get_field?id=') | raw }}' + id, function (r) {
                    var index = _.findIndex(sets[firstId].fields, { id: r.id.toString() });
                    if (index == -1) sets[firstId].fields[sets[firstId].fields.length++] = r;
                    that.reloadFields(r.id, 'add');
                    FieldsListComponent.setProps({ sets: sets });
                });
            },
            render: function () {
                return React.DOM.div({className: ""},
                    React.createElement(FComSelect2, React.__spread({}, this.initSelect2(), {
                        options: this.getOptions(),
                        onChange: this.handleSelect2Change
                    })),
                    React.DOM.button({
                        type: 'button',
                        className: 'btn btn-primary btn-sm',
                        id: 'btn_add_field',
                        onClick: this.addField
                    }, "{{ 'Add a Field'|_ }}"),
                    React.DOM.button({
                        type: 'button',
                        className: 'btn btn-sm btn-warning',
                        id: 'btn_new_field',
                        onClick: this.showAddFieldsModal
                    }, "{{ 'New Field'|_ }}")
                );
            }
        });

        var fieldsContainer = document.getElementById('fields');
        React.unmountComponentAtNode(fieldsContainer);
        var FieldComponent = React.render(
            React.createElement(FieldsGrid, {
                fields: fields,
                sets: fieldSets,
                options: fieldsOptions
            }), fieldsContainer
        );

        if (sites) {
            var multisiteContainer = document.getElementById('multisite');
            React.unmountComponentAtNode(multisiteContainer);
            var MultisiteComponent = React.render(
                React.createElement(Components.MultiSite, {
                    sites: sites,
                    onChange: function (event, callback, selection) {
                        FieldsListComponent.setProps({ site: selection });
                    }
                }), multisiteContainer
            );
        }

        var $customHiddenInput = $('#custom_fields');
        var $siteHiddenInput = $('#site_values');
        var data = [];
        if (initData !== -1) {
            for (var i in initData) {
                var set = initData[i];
                if (!isNaN(set.id)) {
                    data.push(set);
                }
            }
            $customHiddenInput.val(JSON.stringify(data));
        }

        if (sites) $siteHiddenInput.val(JSON.stringify(initData['site_values']));
    });
</script>