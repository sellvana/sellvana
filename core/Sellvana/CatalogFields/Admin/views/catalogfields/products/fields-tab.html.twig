<style>
    #tab-fields #fields-container .select2-container .select2-choice,
    #tab-fields div.modal .select2-container .select2-choice {
        height: 28px;
        width: 150px;
        font-size: 0.8em;
    }

    #tab-fields .select2-container .select2-choice {
        width: 200px;
    }
</style>
{% set fieldSetModel = APP.instance('Sellvana_CatalogFields_Model_Set') %}
{% set ctrl = APP.instance('Sellvana_CatalogFields_Admin_Controller_Products') %}
{% set setCtrl = APP.instance('Sellvana_CatalogFields_Admin_Controller_FieldSets') %}
{% set fieldsConfig = setCtrl.fieldsGridConfig() %}
{% set sites = APP.instance('Sellvana_MultiSite_Model_Site').siteOptions() %}
{% set fieldsConfigCompiled = THIS.view('core/griddle').set('grid', fieldsConfig).getGridConfig() %}
{% set initialData = APP.instance('Sellvana_CatalogFields_Admin_Controller_Products').getInitialData(model) %}

<script type="text/javascript">
    require(['react', 'underscore', 'jquery', 'fcom.components', 'griddle.fcomModalForm', 'griddle.fcomSelect2', 'griddle.fcomLanguage', 'sortable', 'ckeditor', 'jquery.validate', 'unique'], function (React, _, $, Components, FComModalForm, FComSelect2, FComMultiLanguage, Sortable) {
        var APP = {},
            $mainForm = $('#catalog-products-form'),
            initData = {{ UTIL.toJson(initialData) | raw }},
            sites = {{ UTIL.toJson(sites) | raw }},
            fieldsModalNode,
            fieldsForm,
            fields = [],
            fieldsOptions = {{ UTIL.toJson(APP.instance('Sellvana_CatalogFields_Model_Field').as_values('field_name')) | raw }},
            fieldSets = {},
            fieldSetOptions = {{ UTIL.toJson(fieldSetModel.as_values('set_name')) | raw }};

        window.saveFieldsModal = function (modal) {
            if (!fieldsForm.valid())
                return;

            var hash = {
                oper: 'add'
            };

            fieldsForm.find('input, select').each(function (index) {
                hash[$(this).attr('id')] = $(this).val();
            });

            $.post('{{ APP.href('/catalogfields/fieldsets/field_grid_data') | raw }}', hash, function (r) {
                $(APP).trigger('reloadFields', [r]);
                modal.close();
            });
        };

        var fieldsListGrid = React.createClass({
            displayName: "fieldsListGrid",
            getDefaultProps: function () {
                return {
                    fieldSets: {},
                    avail_fields: [],
                    input_with_langs: ['text', 'textarea', 'wysiwyg']
                };
            },
            getInitialState: function () {
                return {
                    fieldSets: {},
                    inputTypes: {},
                    editors: {},
                    sites: {},
                    is_default_site: true,
                    site_values: {},
                    site_id: ''
                };
            },
            componentWillMount: function () {
                this.setState({
                    fieldSets: this.props.fieldSets,
                    sites: this.props.site_values || { default: {} }
                });
            },
            componentDidMount: function () {
                var that = this;

                $(APP).on('addField', function (e, sets, types) {
                    that.setState({fieldSets: sets, inputTypes: types});
                });

                $(APP).on('addSet', function (e, sets) {
                    that.setState({fieldSets: sets});
                });

                $(APP).on('refreshLangs', function (e, code, langs) {
                    var sets = that.state.fieldSets;
                    _(sets).each(function (set, i) {
                        var fieldCodes = _.pluck(set.fields, 'field_code');
                        if (_.contains(fieldCodes, code)) {
                            if (!langs.length) {
                                sets[i].fields[_.indexOf(fieldCodes, code)].lang_fields = [];
                            } else {
                                sets[i].fields[_.indexOf(fieldCodes, code)].lang_fields = langs;
                            }
                        }
                    });
                    that.refreshData();
                });

                this.refreshSortable();
                this.initSpecialInput(this.state.inputTypes);
                // Reset input type
                this.props.avail_fields = [];
            },
            componentWillReceiveProps: function (nextProps) {
                var sites = this.state.sites;
                // if current site is not `default` and does not exist then initialize it
                if (nextProps.site.id !== '' && !sites[nextProps.site.id]) {
                    sites[nextProps.site.id] = {};
                }
                this.setState({
                    sites: sites,
                    is_default_site: nextProps.site.id === '',
                    is_multisite_changed: true,
                    site_id: nextProps.site.id
                });
            },
            componentWillUpdate: function (nextProps, nextState) {
                this.clearCKEDITORIntances();
            },
            componentDidUpdate: function () {
                this.refreshSortable();
                this.props.avail_fields = [];
                this.initSpecialInput(this.state.inputTypes);
                this.refreshData();
            },
            componentWillUnmount: function () {
                $(APP).off('addField');
                $(APP).off('addSet');
                $(APP).off('refreshLangs');
            },
            clearCKEDITORIntances: function () {
                var that = this;
                if (CKEDITOR.instances.length) {
                    _(CKEDITOR.instances).each(function (editor, id) {
                        if (that.state.editors[id]) {
                            editor.destroy(true);
                            delete that.state.editors[id];
                        }
                    });
                }
            },
            initSpecialInput: function (types) {
                var that = this;
                var sites = this.state.sites;
                var siteId = this.state.site_id;

                _(types).each(function (type, code) {
                    switch (type) {
                        case 'boolean':
                            var $switchCbx = $('.switch-cbx');
                            $switchCbx.each(function () {
                                $(this).bootstrapSwitch({
                                    onText: '<i class="icon-ok" />',
                                    offText: '<i class="icon-remove" />',
                                    onSwitchChange: function (e, state) {
                                        var s = state ? '1' : '0';
                                        that.refreshChanged(code, s);
                                    }
                                });
                            });
                            break;
                        case 'wysiwyg':
                            if (!code) return;
                            var $textarea = $('textarea.field-ckeditor[data-code="' + code + '"]');
                            var id = $textarea.prop('id');
                            var fieldId = $textarea.data('field-id');

                            if (id && CKEDITOR !== undefined && !CKEDITOR.instances[id]) {
                                that.state.editors[id] = true;

                                CKEDITOR.replace(id, {
                                    startupMode: 'wysiwyg'
                                });

                                if (that.props.multisite) {
                                    var data = sites[siteId || 'default'][fieldId] || '';
                                    CKEDITOR.instances[id].setData(data);
                                }

                                CKEDITOR.instances[id].on('blur', function (e) {
                                    e.editor.updateElement();
                                    var data = e.editor.getData();
                                    that.refreshChanged(code, data);
                                });
                            }
                            break;
                        default:
                            break;
                    }
                });
            },
            refreshData: function () {
                var that = this,
                    sets = this.state.fieldSets,
                    sites = this.state.sites,
                    data = [];

                var site_values = sites[this.state.site_id || 'default'];
                _(sets).each(function (set, i) {
                    _(set.fields).each(function (f, fi) {
                        var $inputField = $('[data-code="'+ f.field_code+'"]');
                        // if multi-site is enabled then we need to update field after site change
                        if (that.props.multisite) {
                            switch (f.admin_input_type) {
                                case 'boolean':
                                    $inputField.bootstrapSwitch('state', (site_values[f.id] == '1'));
                                    break;
                                default:
                                    $inputField.val(site_values[f.id] || '');
                                    break;
                            }
                        }
                    });

                    if (!set.deleted) data.push(set);
                });

                if (this.props.multisite) {
                    $siteHiddenInput.val(JSON.stringify(sites));
                }

                if (_.isEmpty(data)) {
                    data.push(sites);
                }

                $customHiddenInput.val(JSON.stringify(data));
            },
            refreshSortable: function () {
                var that = this;
                var sets = that.state.fieldSets;
                var multisite = that.props.multisite
                $('.prod-fieldset').find('.box-content').each(function () {
                    Sortable.create(this, {
                        revert: true,
                        axis: 'y',
                        connectWith: ".prod-fieldset .box-content",
                        group: "additional-field-sorting",
                        handle: '.control-handle',
                        // Element is dropped into the list from another list
                        onStart: function(e) {
                            console.log('onStart', e);
                        },
                        onEnd: function(e) {
                            console.log('onEnd', e);
                        },
                        onAdd: function (e) {
                            console.log('onAdd', e);
                            var $ele = $(e.item),
                                $parent = $(e.item.offsetParent),
                                fieldId = $ele.prop('id'),
                                setId = $parent.prop('id'),
                                tmpField = null,
                                setIndex = null,
                                tmpFields = [];

                            _(sets).each(function (set, i) {
                                var fIndex = _.findIndex(sets[i].fields, {id: fieldId});
                                if (fIndex !== -1) {
                                    tmpField = sets[i].fields[fIndex];
                                    sets[i].fields.splice(fIndex, 1);

                                    // if multisite is enabled then search same fields and move all to new drop place
                                    if (multisite) {
                                        set.fields = _(set.fields).filter(function (f, fi) {
                                            if (f.id != tmpField.id) {
                                                return true;
                                            } else {
                                                tmpFields.push(f);
                                                return false;
                                            }
                                        });

                                    }
                                }

                                if (set.id == setId) setIndex = i;
                            });


                            if (tmpField && setIndex) {
                                sets[setIndex].fields.push(tmpField);
                            }

                            if (multisite && tmpFields.length) {
                                _(tmpFields).each(function (f) {
                                    sets[setIndex].fields.push(f)
                                });
                            }

                            that.refreshData();
                        }
                    });
                });
            },
            initSelect2: function () {
                return $.extend({}, {
                    id: guid(),
                    name: guid(),
                    className: '',
                    placeholder: "{{ 'Select field options' |_ }}",
                    multiple: false,
                    callback: 'chooseFieldOptions'
                }, this.props.select2Config);
            },
            initMultiSite: function () {
                return {
                    className: 'site-value',
                    multiple: false
                };
            },
            getOptions: function (id, i) {
                var options = this.state.fieldSets[id].fields[i].options;
                if (options) {
                    return _(options).map(function (option, id) {
                        return {
                            id: id,
                            text: option
                        };
                    });
                }
                return [];
            },
            removeSet: function (e) {
                var $target = $(e.currentTarget);
                var setId = $target.data('set-id').toString();
                var sites = this.state.sites;

                var sets = this.state.fieldSets;
                sets[setId].deleted = true;
                var fieldIds = _.pluck(sets[setId].fields, 'id');

                // If has many sites then clear fields when remove set
                _(fieldIds).each(function (id, fi) {
                    _(sites).each(function (site, si) {
                        delete sites[si][id];
                    })
                });

                this.setState({fieldSets: sets, sites: sites});

                $(APP).trigger('removeSet', [setId]);
                $(APP).trigger('reloadFields', [null, fieldIds]);
            },
            removeField: function (e) {
                var $target = $(e.currentTarget),
                    fieldId = $target.data('field-id'),
                    fieldName = $target.data('field-value'),
                    sets = this.state.fieldSets,
                    sites = this.state.sites;

                _(sets).each(function (set, i) {
                    set.fields = _(set.fields).filter(function (f, j) {
                        return !(f && f.id == fieldId);
                    });
                });

                // If has many sites then clear fields when remove field
                _(sites).each(function (site, si) {
                    delete sites[si][fieldId];
                });

                this.setState({fieldSets: sets, sites: sites});

                $(APP).trigger('removeField', [fieldId.toString(), fieldName.toString()]);
                this.refreshData();
            },
            refreshChanged: function (code, value, type) {
                var that = this,
                    sets = this.state.fieldSets,
                    sites = this.state.sites,
                    site_id = this.state.site_id || 'default';

                _(sets).each(function (set, i) {
                    _(set.fields).each(function (f, j) {
                        switch (type) {
                            case 'select':
                            case 'multiselect':
                                _(f.options).each(function (opt, key) {
                                    if (key == code) {
                                        sets[i].fields[j].value = value;
                                        if (sites[site_id]) sites[site_id][f.id] = value;
                                    }
                                });
                                break;
                            default:
                                if (f.field_code == code) {
                                    sets[i].fields[j].value = value;
                                    if (sites[site_id]) sites[site_id][f.id] = value;
                                }
                                break;
                        }
                    });
                });

                this.refreshData();
            },
            handleSelect2Change: function (e, callback, selection) {
                this.refreshChanged(selection.id, selection.text, 'select');
            },
            handleInputChange: function (e) {
                var $input = $(e.target);
                this.refreshChanged($input.data('code'), $input.val());
            },
            handleMultiSitesChange: function (e, callback, selection) {
                var that = this,
                    $target = $(e.currentTarget),
                    fieldId = $target.data('field-id'),
                    sets = this.state.fieldSets,
                    sites = this.state.sites,
                    siteId = this.state.site_id;

                var siteValues = this.state.site_values;
                siteValues[fieldId] = selection;

                // Use default value
                if (selection.id == '0') {
                    sites[siteId][fieldId] = sites['default'][fieldId];
                    _(sets).each(function (set, si) {
                        var fi = _.findIndex(set.fields, { id: fieldId });
                        if (fi != -1) sets[si].fields[fi].value = sites['default'][fieldId];
                    });
                }

                this.setState({ site_values: siteValues, fieldSets: sets });
                this.refreshData();
            },
            parseLangs: function (data) {
                var langs = data ? JSON.parse(data) : data;
                if (!langs || !langs.frontend_label_translation) {
                    return [];
                }

                return langs.frontend_label_translation;
            },
            render: function () {
                return (
                    React.DOM.div({ key: 'additional-fields' },
                        _(this.state.fieldSets).map(function (fieldSet, id) {
                            if (fieldSet && !fieldSet.deleted) {
                                var fields = fieldSet.fields || {};
                                return React.DOM.div({
                                        key: id,
                                        id: id,
                                        className: 'box box-borderd green-border box-nomargin prod-fieldset'
                                    },
                                    React.DOM.div({className: 'box-header box-header-small'},
                                        React.DOM.div({className: 'title'}, fieldSet.set_name),
                                        React.DOM.div({className: 'actions'},
                                            React.DOM.button({
                                                    type: 'button',
                                                    className: 'btn box-remove btn-xs btn-link btn-remove',
                                                    onClick: this.removeSet,
                                                    'data-set-id': fieldSet.id
                                                },
                                                React.DOM.i({className: 'icon-remove'})
                                            ),
                                            React.DOM.button({
                                                    className: 'btn box-collapse btn-xs btn-link btn-edit',
                                                    type: 'button'
                                                },
                                                React.DOM.i({className: 'icon-chevron-down'})
                                            )
                                        )
                                    ),
                                    React.DOM.div({className: 'box-content ui-sortable'},
                                        fields ?
                                        _(fields).map(function (field, i) {
                                            var that = this,
                                                inlineProps = null,
                                                options = this.getOptions(id, i),
                                                inputField = null,
                                                langField = null,
                                                multiSite = null,
                                                sites = this.state.sites,
                                                siteValues = this.state.site_values,
                                                siteId = this.state.site_id || 'default',
                                                defaultValues = sites[siteId] || {},
                                                disabled = false;

                                            if (siteId !== 'default') {

                                            }

                                            if (!_.contains(this.props.avail_fields, field.id)) {
                                                this.props.avail_fields.push(field.id);
                                            } else {
                                                return null;
                                            }

                                            if (!this.state.is_default_site) {
                                                inlineProps = this.initMultiSite();
                                                multiSite = React.createElement(FComSelect2, React.__spread({}, inlineProps, {
                                                    id: guid(),
                                                    options: [
                                                        { id: '0', text: "{{ 'Use Default Value'|_ }}" },
                                                        { id: '1', text: "{{ 'Use Site Specific Value'|_ }}" }
                                                    ],
                                                    defaultValue: [(defaultValues && defaultValues[field.id] == sites['default'][field.id]) ? 0 : 1],
                                                    attrs: {
                                                        'data-field-id': field.id
                                                    },
                                                    onChange: this.handleMultiSitesChange
                                                }));
                                            }

                                            if (_.contains(this.props.input_with_langs, field.admin_input_type)) {
                                                langField = React.createElement(FComMultiLanguage, {
                                                    id: field.field_code + '_lang_field_' + field.id,
                                                    availLangs: this.parseLangs(field.languages),
                                                    inputType: field.admin_input_type,
                                                    defaultLangs: {{ UTIL.toJson(UTIL.localesToSelect2Options()) | raw }},
                                                    cClass: 'col-sm-3',
                                                    modalConfig: {
                                                        fieldCode: field.field_code,
                                                        onSaved: field.field_code + 'ModalSaveChange'
                                                    },
                                                    select2Config: this.getSelect2Config || {}
                                                });

                                                window[field.field_code + 'ModalSaveChange'] = function (modal, langs) {
                                                    var modalNode = $(modal.getDOMNode());
                                                    var container = modalNode.find('div[id$="-container"]');
                                                    if (!$.fn.modalValidate(container))
                                                        return;

                                                    var code = modal.props.fieldCode;
                                                    $(APP).trigger('refreshLangs', [code, langs]);
                                                    modal.close();
                                                };
                                            }

                                            switch (field.admin_input_type) {
                                                case 'textarea':
                                                    inputField = React.DOM.textarea({
                                                        id: guid(),
                                                        name: guid(),
                                                        disabled: disabled,
                                                        className: 'form-control',
                                                        'data-rule-required': field.required || 'false',
                                                        'data-code': field.field_code,
                                                        'data-field-id': field.id,
                                                        onBlur: this.handleInputChange,
                                                        defaultValue: defaultValues[field.id] || ''
                                                    });
                                                    break;
                                                case 'wysiwyg':
                                                    inputField = React.DOM.textarea({
                                                        id: guid(),
                                                        name: guid(),
                                                        disabled: disabled,
                                                        className: 'form-control field-ckeditor',
                                                        'data-rule-required': field.required || 'false',
                                                        'data-code': field.field_code,
                                                        'data-field-id': field.id,
                                                        defaultValue: defaultValues[field.id] || ''
                                                    });
                                                    this.state.inputTypes[field.field_code] = 'wysiwyg';
                                                    break;
                                                case 'select':
                                                case 'multiselect':
                                                    inlineProps = this.initSelect2();
                                                    inputField = React.createElement(FComSelect2, React.__spread({}, inlineProps, {
                                                        options: options,
                                                        enabled: !disabled,
                                                        'data-field-id': field.id,
                                                        onChange: this.handleSelect2Change,
                                                        defaultValue: [defaultValues[field.id] || '']
                                                    }));
                                                    break;
                                                case 'boolean':
                                                    inputField = React.DOM.div(null,
                                                        React.DOM.input({
                                                            type: 'hidden',
                                                            name: guid(),
                                                            defaultValue: defaultValues[field.id] || '0'
                                                        }),
                                                        React.DOM.div({
                                                                className: 'make-switch switch has-switch',
                                                                'data-off-label': '<i class="icon-remove"></i>',
                                                                'data-on-label': '<i class="icon-ok"></i>',
                                                                'data-on': 'primary'
                                                            },
                                                            React.DOM.input({
                                                                type: 'checkbox',
                                                                className: 'switch-cbx',
                                                                id: guid(),
                                                                name: guid(),
                                                                disabled: disabled,
                                                                defaultChecked: !!(field.value === undefined || field.value === '1'),
                                                                'data-code': field.field_code,
                                                                'data-field-id': field.id,
                                                                defaultValue: defaultValues[field.id] || '0'
                                                            })
                                                        )
                                                    );
                                                    this.state.inputTypes[field.field_code] = 'boolean';
                                                    break;
                                                default:
                                                    inputField = React.DOM.input({
                                                        type: 'text',
                                                        name: guid(),
                                                        disabled: disabled,
                                                        className: 'form-control',
                                                        'data-rule-required': (field.required || 'false'),
                                                        'data-code': field.field_code,
                                                        'data-field-id': field.id,
                                                        onBlur: this.handleInputChange,
                                                        defaultValue: defaultValues[field.id] || ''
                                                    });
                                                    break;
                                            }

                                            return (
                                                React.DOM.div({
                                                        key: field.field_code,
                                                        id: field.id,
                                                        className: 'form-group'
                                                    },
                                                    React.DOM.div({className: 'col-md-9 col-lg-push-3'},
                                                        React.DOM.label({
                                                                className: 'col-md-2 control-label dd-handle control-handle',
                                                                htmlFor: 'prod-review-text',
                                                                'data-field-id': field.id
                                                            },
                                                            React.DOM.div({className: 'icon-ellipsis-vertical dd-handle dd3-handle'}),
                                                            React.DOM.span(null, field.field_name)
                                                        ),
                                                        React.DOM.div({className: 'col-md-3'},
                                                            inputField
                                                        ),
                                                        React.DOM.div({className: 'col-md-6'},
                                                            React.DOM.button({
                                                                    className: 'btn btn-danger btn-xs field-remove',
                                                                    style: {
                                                                        float: 'left',
                                                                        marginRight: '5px'
                                                                    },
                                                                    type: 'button',
                                                                    onClick: this.removeField,
                                                                    'data-field-id': field.id,
                                                                    'data-field-value': field.field_name
                                                                },
                                                                React.DOM.i({className: 'icon-remove'})
                                                            ), langField, multiSite
                                                        )
                                                    )
                                                )
                                            )
                                        }.bind(this))
                                        : null
                                    )
                                )
                            } else return null;
                        }.bind(this))
                    )
                )
            }
        });

        if (initData !== -1) {
            _(initData).each(function (fieldSet, i) {
                if (!isNaN(i)) {
                    fieldSets[i] = fieldSet;
                    fields.push(fieldSet.fields);
                }
            });
        }

        var fieldsListContainer = document.getElementById('fields_list');
        React.unmountComponentAtNode(fieldsListContainer);
        var FieldsListComponent = React.render(
            React.createElement(fieldsListGrid, {
                fieldSets: fieldSets || {},
                site_values: initData['site_values'],
                multisite: !_.isEmpty(sites)
            }), fieldsListContainer
        );

        var FieldsSetGrid = React.createClass({
            displayName: "FieldsSetGrid",
            getInitialState: function () {
                return {
                    options: {},
                    removedOptions: [],
                    selection: null
                };
            },
            getDefaultProps: function () {
                return {
                    options: {},
                    fieldSets: {},
                    select2Config: {}
                };
            },
            componentDidMount: function () {
                var that = this;

                $(APP).on('removeSet', function (e, id) {
                    var removeIds = that.state.removedOptions;
                    if (_.contains(removeIds, id)) {
                        removeIds.splice(_.indexOf(removeIds, id), 1);
                    }

                    that.setState({removedOptions: removeIds});
                });
            },
            componentWillMount: function () {
                var sets = this.props.fieldSets;
                var rOptions = [];
                _(sets).each(function (set) {
                    rOptions.push(set.id);
                });

                this.setState({
                    removedOptions: rOptions,
                    options: this.props.options
                });
            },
            componentWillUnmount: function () {
                $(APP).off('removeSet');
                $(APP).off('reloadSet');
            },
            handleSelect2Change: function (event, callback, selection) {
                this.state.selection = selection.id;
            },
            initSelect2: function () {
                return $.extend({}, {
                    id: 'sel_sets',
                    className: '',
                    placeholder: "{{ 'Select fieldset' |_ }}",
                    multiple: false,
                    callback: 'chooseFieldsSet'
                }, this.props.select2Config);
            },
            getOptions: function () {
                if (this.state.options) {
                    var os = [];
                    _(this.state.options).each(function (option, id) {
                        if (!_.contains(this.state.removedOptions, id)) {
                            os.push({id: id, text: option});
                        }
                    }.bind(this));
                    return os;
                }
                return [];
            },
            addSet: function (e) {
                var that = this;
                var setId = this.state.selection;

                if (!setId) {
                    $.bootstrapGrowl("{{ 'Please choose field set.' |_ }}", {
                        type: 'danger',
                        align: 'center',
                        width: 'auto',
                        delay: 3000
                    });
                    return;
                }

                var fieldIds = [];
                $.get('{{ APP.href('/catalogfields/products/get_fieldset?id=') | raw }}' + setId, function (r) {
                    var sets = that.props.fieldSets;
                    sets[r.id] = r;
                    fieldIds = _.pluck(sets[r.id].fields, 'id');
                    $(APP).trigger('addSet', [sets, r.id]);
                    $(APP).trigger('reloadFields', [null, fieldIds, 'add']);
                });

                var rIds = this.state.removedOptions;
                if (!_.contains(rIds, setId)) {
                    rIds.push(setId);
                }

                this.setState({removedOptions: rIds});

            },
            render: function () {
                return React.DOM.div({className: ""},
                        React.createElement(FComSelect2, React.__spread({}, this.initSelect2(), {
                            options: this.getOptions(),
                            onChange: this.handleSelect2Change
                        })),
                        React.DOM.button({
                            type: "button",
                            className: "btn btn-primary btn-sm",
                            id: "btn_add_set",
                            onClick: this.addSet
                        }, "{{ 'Add a Field Set'|_ }}")
                );
            }
        });

        var FieldsGrid = React.createClass({
            displayName: "FieldsGrid",
            getInitialState: function () {
                return {
                    options: {},
                    removedOptions: [],
                    selection: null
                };
            },
            getDefaultProps: function () {
                return {
                    fields: [],
                    select2Config: {}
                };
            },
            componentWillMount: function () {
                var fields = this.props.fields;

                var rOptions = [];
                _(fields).each(function (f) {
                    if (f.length) {
                        _(f).each(function (item) {
                            rOptions.push(item.id);
                        });
                    } else rOptions.push(f.id);
                });

                this.setState({
                    removedOptions: rOptions,
                    options: this.props.options
                });
            },
            componentDidMount: function () {
                var that = this;

                $(APP).on('reloadFields', function (e, field, removedIds, type) {
                    var options = that.state.options;
                    if (field) {
                        if (!_.contains(options, field.id)) {
                            options[field.id] = field.field_name;
                        }
                    } else if (removedIds) {
                        var rIds = that.state.removedOptions;
                        switch (type) {
                            case 'add':
                                _(options).each(function (opt, i) {
                                    if (_.contains(removedIds, i)) {
                                        rIds.push(i);
                                    }
                                });
                                break;
                            default:
                                _(removedIds).each(function (id) {
                                    if (_.contains(rIds, id)) {
                                        rIds.splice(id, 1);
                                    }
                                });
                                break;
                        }
                    } else {
                        rIds = [];
                    }

                    that.setState({options: options, removedOptions: rIds});
                });

                $(APP).on('removeField', function (e, id, text) {
                    var removeIds = that.state.removedOptions;
                    _(removeIds).each(function (num, i) {
                        if (id == num) removeIds.splice(i, 1);
                    });

                    var options = that.state.options;
                    if (!_.contains(options, id)) {
                        options[id] = text;
                    }

                    that.setState({
                        options: options,
                        removedOptions: removeIds
                    });
                });
            },
            componentDidUpdate: function (prevProps, prevState) {
                // Reset selection
                this.state.selection = null;
            },
            componentWillUnmount: function () {
                $(APP).off('removeField');
                $(APP).off('reloadFields');
            },
            handleSelect2Change: function (event, callback, selection) {
                this.state.selection = selection.id;
            },
            initSelect2: function () {
                return $.extend({}, {
                    id: 'sel_fields',
                    className: '',
                    placeholder: "{{ 'Select fields' |_ }}",
                    multiple: false,
                    callback: 'chooseFieldsCallback'
                }, this.props.select2Config);
            },
            getOptions: function () {
                if (this.state.options) {
                    var os = [];
                    _(this.state.options).each(function (option, id) {
                        if (!_.contains(this.state.removedOptions, id)) {
                            os.push({id: id, text: option});
                        }
                    }.bind(this));
                    return os;
                }
                return [];
            },
            setValidateForm: function (selector) {
                if (selector == null) {
                    selector = $(".validate-form");
                }
                if (jQuery().validate) {
                    return selector.each(function (i, elem) {
                        return $(elem).validate({
                            errorElement: "span",
                            errorClass: "help-block has-error",
                            errorPlacement: function (e, t) {
                                return t.parents(".controls").first().append(e);
                            },
                            highlight: function (e) {
                                $(e).closest('.form-group').removeClass("has-error has-success").addClass('has-error');
                                return $(e).closest('.help-block').css('display', 'block');
                            },
                            success: function (e) {
                                e.closest(".form-group").removeClass("has-error");
                                return e.closest(".help-block").css('display', 'none');
                            }
                        });
                    });
                }
            },
            showAddFieldsModal: function (grid) {
                var that = this;
                var modalContainer = document.getElementById('fcom_append_form');
                React.unmountComponentAtNode(modalContainer);
                var config = {{ UTIL.toJson(fieldsConfigCompiled) | raw }};
                React.render(
                        React.createElement(Components.Modal, {
                                    id: "editFieldsModal",
                                    show: true,
                                    title: "{{ 'Add Fields' |_ }}",
                                    confirm: "{{ 'Save changes' |_ }}",
                                    cancel: "{{ 'Close' |_ }}",
                                    onLoad: function (modal) {
                                        fieldsModalNode = $(modal.getDOMNode());
                                        fieldsForm = fieldsModalNode.find('#fields-modal-form');
                                        fieldsModalNode.find('.modal-dialog').css('width', '600px');
                                        that.setValidateForm(fieldsForm);
                                        fieldsForm.find('#field_code').rules("add", {
                                            onfocusout: false,
                                            onkeyup: false,
                                            remote: {
                                                url: '{{ APP.href('/catalogfields/fields/unique_field') | raw }}',
                                                type: 'post',
                                                data: {
                                                    _name: 'field_code'
                                                },
                                                dataFilter: function (responseString) {
                                                    var response = jQuery.parseJSON(responseString);
                                                    currentMessage = response.Message;
                                                    return response.unique;
                                                }
                                            },
                                            messages: {
                                                remote: "{{ 'This field code is already taken place.' |_ }}"
                                            }
                                        });
                                    },
                                    onConfirm: window.saveFieldsModal
                                },
                                React.DOM.div({className: "row f-grid-wrapper"},
                                        React.createElement(FComModalForm, {
                                            columnMetadata: config.columns,
                                            id: config.id
                                        })
                                )
                        ), modalContainer);
            },
            addField: function () {
                var that = this;
                var id = this.state.selection;

                if (!id) {
                    $.bootstrapGrowl("{{ 'Please choose field.' |_ }}", {
                        type: 'danger',
                        align: 'center',
                        width: 'auto',
                        delay: 3000
                    });
                    return;
                }

                var sets = that.props.fieldSets;
                var firstId = _.pluck(sets, 'id')[0];
                if (!firstId) {
                    $.bootstrapGrowl("{{ 'Please add field set before insert field.' |_ }}", {
                        type: 'danger',
                        align: 'center',
                        width: 'auto',
                        delay: 3000
                    });
                    return;
                }

                var inputType = {};
                $.get('{{ APP.href('/catalogfields/products/get_field?id=') | raw }}' + id, function (r) {
                    switch (r.admin_input_type) {
                        case 'boolean':
                            r.value = (r.value || '1');
                            inputType[r.field_code] = r.admin_input_type;
                            break;
                        case 'wysiwyg':
                            inputType[r.field_code] = r.admin_input_type;
                            break;
                    }
                    sets[firstId].fields[sets[firstId].fields.length++] = r;
                    $(APP).trigger('addField', [sets, inputType]);
                });

                var options = this.state.options;
                if (options[this.state.selection]) {
                    delete options[this.state.selection];
                }

                this.setState({options: options});
            },
            render: function () {
                var inlineProps = this.initSelect2();
                var options = this.getOptions();

                return React.DOM.div({className: ""},
                        React.createElement(FComSelect2, React.__spread({}, inlineProps, {
                            options: options,
                            onChange: this.handleSelect2Change
                        })),
                        React.DOM.button({
                            type: 'button',
                            className: 'btn btn-primary btn-sm',
                            id: 'btn_add_field',
                            onClick: this.addField
                        }, "{{ 'Add a Field'|_ }}"),
                        React.DOM.button({
                            type: 'button',
                            className: 'btn btn-sm btn-warning',
                            id: 'btn_new_field',
                            onClick: this.showAddFieldsModal
                        }, "{{ 'New Field'|_ }}")
                );
            }
        });

        var fieldsContainer = document.getElementById('fields-container');
        React.unmountComponentAtNode(fieldsContainer);
        React.render(
            React.DOM.div({className: 'well'},
                React.DOM.div({className: 'row'},
                    React.DOM.input({
                        type: 'hidden',
                        id: 'custom_fields',
                        name: 'custom_fields',
                        defaultValue: ''
                    }),
                    sites ? React.DOM.div({className: 'col-sm-3', id: 'multisite'},
                        React.createElement(Components.MultiSite, {
                            sites: sites,
                            onChange: function (event, callback, selection) {
                                FieldsListComponent.setProps({ site: selection });
                            }
                        })
                    ) : null,
                    React.DOM.div({className: 'col-sm-4', id: 'fieldSet'},
                        React.createElement(FieldsSetGrid, {
                            fieldSets: fieldSets,
                            options: fieldSetOptions
                        })
                    ),
                    React.DOM.div({className: 'col-sm-5', id: 'field'},
                        React.createElement(FieldsGrid, {
                            fields: fields,
                            fieldSets: fieldSets,
                            options: fieldsOptions
                        })
                    )
                )
            ), fieldsContainer
        );

        var $customHiddenInput = $('#custom_fields');
        var $siteHiddenInput = $('#site_values');
        var data = [];
        if (initData !== -1) {
            for (var i in initData) {
                var set = initData[i];
                if (!isNaN(set.id)) {
                    data.push(set);
                }
            }
            $customHiddenInput.val(JSON.stringify(data));
        }
        console.log('initData', initData);

        if (sites) $siteHiddenInput.val(JSON.stringify(initData['site_values']));
    });
</script>

<div id="fields-container"></div>
<div id='fields_list'></div>