{% set prod = THIS.get('prod') %}
{% set pr = THIS.get('pr') %}
{% set needApprove = CONFIG.get('modules/Sellvana_ProductReviews/need_approve') %}
{% set config = APP.instance('Sellvana_ProductReviews_Model_Review').config() %}
{% set max = config.max %}
{% set min = config.min %}
{% set step = config.step %}
{% set action = THIS.get('action') ? THIS.get('action') : 'add' %}
{% if (THIS.get('isModalBox') != 1) %}
    {% set validator = THIS.validator(THIS.get('formId')) %}
{% endif %}

{% if action == 'add' or (action == 'edit' and pr is not empty) %}
    <form action="{{ APP.href('prodreviews/' ~ action) }}" method="post" class="f-prod-reviews" id="f-prod-reviews-main-form">
        <input type="hidden" name="X-CSRF-TOKEN" value="{{ SESSION.csrfToken() }}"/>
        <input type="hidden" name="pid" value="{{ prod.id() }}">
        <input type="hidden" name="rid" value="{{ pr.id() }}" id="id-preview">

        <h1 class="f-prod-name">{{ prod.get('product_name') }}</h1>
        <!--
        <div class="f-prod-avg-rating">
          <div class="glyphicon f-rating-stars f-lg-stars">
            <span class="f-filled-stars" style="width:0%;"></span>
            <span class="f-empty-stars"></span>
          </div>
        </div>
        -->
        <input class="validate[required]" type="range" id="prodreview-rating" name="review[rating]" min="{{ min }}" max="{{ max }}"
            {% if pr %}
                value="{{ pr.get('rating')}}"
            {% else %}
                value="{{ validator is defined and validator.fieldValue('rating') ? validator.fieldValue('rating') : min }}"
            {% endif %}
           step="{{ step }}" />

        <div class="rateit" data-rateit-backingfld="#prodreview-rating"></div>
        <div class="form-group">
            <label for="review-title">{{ 'Review Title'|_ }}</label>
            <div class="controls">
                <input type="text" id="prodreview-title" name="review[title]" placeholder="{{"Title" | _ }}" class="form-control required"
                        {% if pr %}
                            value="{{ pr.get('title')}}"
                        {% else %}
                            value="{{ validator is defined ? validator.fieldValue('title') : '' }}"
                        {% endif %} />
            </div>
        </div>
        <div class="form-group">
            <label for="review-text">{{ 'Review Text'|_ }}</label>
            <div class="controls">
                <textarea name="review[text]" id="prodreview-text" rows="8" placeholder="{{"Your review here" | _ }}" class="form-control" style="resize:vertical">{% if pr %}{{ pr.get('text')}}{% else %}{{ validator is defined ? validator.fieldValue('text') : '' }}{% endif %}</textarea>
            </div>
        </div>
        <input type="submit" class="btn btn-primary" id="review_save">
        {% if (THIS.get('isModalBox')) %}
            <input type="button" class="btn btn-link-cancel" data-dismiss="modal" value="{{ 'Cancel'|_ }}" />
        {% endif %}
        {% if (THIS.get('isModalBox') != 1) %}
            <a href="{{ prod.url() }}" class="btn">{{ "Return to product"|_ }}</a>
        {% endif %}
    </form>
{% endif %}
<script>
    require(['jquery', 'jquery.rateit', 'jquery.bootstrap-growl', 'jquery.validate'], function($) {
        var mainForm = $('#f-prod-reviews-main-form');
        mainForm.validate({ ignore: [] });
        function validateRating () { //todo: use this function because have bug with jquery.validate, need fix this and remove this function
            var tmp = mainForm.valid();
            var prodreviewRating = $('#prodreview-rating');
            prodreviewRating.parent().children('label.error').remove();
            if (prodreviewRating.val() == 0) {
                prodreviewRating.parent().append('<label class="error">This field is required.</label>');
                tmp = false;
            }
            return tmp;
        }

        $('input#review_save').click(function (ev)
        {
            var tmp = validateRating();
            if (tmp) {
                {% if (THIS.get('isModalBox') == 1) %}
                $.ajax({
                    type: "POST",
                    url: mainForm.attr('action'),
                    data: mainForm.serialize(),
                    success: function (data)
                    {
                        if (data.status == 'error') {
                            $.bootstrapGrowl("Error:<br>" + data.message, { type: 'danger', align: 'center', width: 'auto', delay: 5000});
                        } else if (data.status == 'success') {
                            var message = data.message || "Saved";
                            $.bootstrapGrowl(message, { type: 'success', align: 'center', width: 'auto' });
                            mainForm.parents('.fade').modal('hide');
                            $("#f-prod-review-open").hide();
                            mainForm[0].reset();
                            mainForm.find('.rateit-reset').trigger('click');
                            {% if THIS.get('isAlreadyReviewed') or needApprove == 0 %}
                                //update list previews
                                $('#f-prod-reviews-container').load('{{ APP.href('prodreviews/reviews_list') }}?pid={{ prod.id() }}');
                            {% endif %}
                        } else {
                            alert("Invalid data, please check again");
                        }
                    },
                    error: function (xhr, textStatus, errorThrown)
                    {
                        alert("[ERROR]<br>" + textStatus);
                    }
                });
                {% else  %}
                return true;
                {% endif %}

            }
            ev.preventDefault();
            ev.stopPropagation();

            return false;

        });

    });
</script>
