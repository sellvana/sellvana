<!--{ label: Form Fields }-->
<!--{ pos: 30 }-->
<style>
    #frontend-field-grid-modal-form .select2-container .select2-choice,
    #frontend-field-grid-modal-form .select2-container .select2-choice {
        height: 28px;
        width: 348px;
        font-size: 1em;
    }
</style>
{% set blockCtrl = APP.instance('Sellvana_Cms_Admin_Controller_Blocks') %}
{% import THIS.view('core/form-elements').twigName() as forms %}
{% set fieldData = { validator: validator } %}
{% set grid = blockCtrl.formFieldGrid(model) %}
{% set adminUsers = blockCtrl.getAdminUsers() %}
{% set templates = blockCtrl.getEmailTemplates() %}
<fieldset class="form-horizontal">
    <div class="f-section">
        <div class="form-group">
            {% set emailOptions = blockCtrl.getEmailOptions() %}

            {{ forms.boolean(fieldData, {field:'form_enable', label:'Form Enabled'|_, select2:true}) }}
            {{ forms.select(fieldData, {field:'form_email', label:'Send form data to'|_, select2: true, options:emailOptions}) }}
            {{ forms.input(fieldData, {field:'form_custom_email', label:'Custom email'|_, attr:'disabled', input_class:"email"}) }}

            {% if adminUsers %}
                {{ forms.boolean(fieldData, {field: 'form_notify_admin', label: 'Send notification to admin'|_, select2: true}) }}
                {{ forms.select(fieldData, {field: 'form_notify_admin_user', label: 'Admin users to notify'|_, multiple: false, options: adminUsers, select2: true}) }}
            {% endif %}

            {{ forms.boolean(fieldData, {field: 'form_notify_customer', label: 'Send confirmation to customer'|_, select2: true}) }}
            {% if templates %}
                {{ forms.select(fieldData, {field: 'form_notify_customer_tpl', label: 'Email template'|_, options: templates, select2: true}) }}
            {% endif %}
            {{ forms.input(fieldData, {field: 'form_user_email_field', label: 'Form Email Field'|_}) }}

            <script type="text/javascript">
                require(['jquery', 'select2'], function ($) {
                    $(function () {
                        var $formCustomEmail = $('#model-form_custom_email');
                        var $formEmail = $("#model-form_email");
                        if($formEmail.val() == 'other') {
                            $formCustomEmail.prop('disabled', false);
                        }
                        $formEmail.on("change", function (e) {
                            var val = $(this).val();
                            if (val == 'other') {
                                $formCustomEmail.prop('disabled', false);
                            } else {
                                $formCustomEmail.prop('disabled', true);
                            }
                        });
                    })
                });
            </script>
            <input type='hidden' id='block_form_fields_data' name='model[form_fields]'/>
        </div>
        <div class="row">
            <div class="col-sm-10">
                {{ THIS.view('core/griddle').set('grid', grid) | raw }}
            </div>
        </div>
    </div>
</fieldset>

<script>
    require(['react', 'underscore', 'jquery', 'fcom.components', 'griddle.fcomSelect2'], function (React, _, $, Components, FComSelect2) {
        var formFieldsGrid, formFieldsNode, formFieldsModalNode;
        var FieldsComponent;

        window.formFieldGridRegister = function(grid) {
            formFieldsGrid = grid;
            formFieldsNode = $(formFieldsGrid.getDOMNode());
        };

        $('#default-form').submit(function (ev) {
            var rows = formFieldsGrid.getRows();

            var res = [];
            for (var i in rows) {
                if (rows[i].position == 0) {
                    rows[i].position = 0;
                }
                res.push(_.pick(rows[i], 'id', 'name', 'label', 'input_type', 'required', 'options', 'position'));
            }

            $("#block_form_fields_data").val(JSON.stringify(res));
        });

        function collectFields() {
            var fields = formFieldsModalNode.find('select,input,textarea'),
                form = formFieldsModalNode.find('form'),
                options = {},
                addRows = {};

            var mainFields = {
                id: 1,
                name: 1,
                label: 1,
                input_type: 1,
                required: 1,
                position: 1
            };

            var rows = formFieldsGrid.getRows();
            if ($.isEmptyObject(addRows) == true) {
                addRows['id'] = 0;
            }

            if (form.valid()) {
                fields.each(function (i, field) {
                    var fieldName = $(field).prop('name');
                    var fieldType = $(field).prop('type');
                    var fieldValue = $(field).val();
                    if ((fieldType == 'checkbox' || fieldType == 'radio') && !$(field).prop('checked')) {
                        return;
                    }
                    if (mainFields[fieldName]) {
                        addRows[fieldName] = fieldValue;
                    } else if (fieldName != '') {
                        options[fieldName] = fieldValue;
                    }
                });

                if ($.isEmptyObject(options) == false) {
                    addRows['options'] = JSON.stringify(options);
                }

                if (addRows['id'] == 0) {
                    var rowsSize = rows.length;
                    var id = 1;
                    if (rowsSize != 0) {
                        // some rows in collection
                        var last = rows[rowsSize - 1];
                        id = last['id'] - 0; // make sure it is number
                    }
                    addRows['_new'] = true;
                    addRows['id'] = id + 1;
                }
            }
            return addRows;
        }
        /**
         * Add form fields
         */
        window.addFormField = function(modal) {
            var addRows = collectFields();

            if (addRows.id && addRows.id !== 0) {
                formFieldsGrid.addRows([addRows]);
                modal.close();
            }
        };

        window.updateFormField = function(modal) {
            var updateRows = collectFields();

            if (updateRows.id && updateRows.id !== 0) {
                formFieldsGrid.updateRows([updateRows]);
                modal.close();
            }
        };

        var setValidateForm = function (selector) {
            if (selector == null) {
                selector = $(".validate-form");
            }
            if ($().validate) {
                return selector.each(function (i, elem) {
                    return $(elem).validate({
                        errorElement: "span",
                        errorClass: "help-block has-error",
                        errorPlacement: function (e, t) {
                            return t.parents(".controls").first().append(e);
                        },
                        highlight: function (e) {
                            $(e).closest('.form-group').removeClass("has-error has-success").addClass('has-error');
                            return $(e).closest('span.help-block').css('display', 'block');
                        },
                        success: function (e) {
                            e.closest(".form-group").removeClass("has-error");
                            return e.closest("span.help-block").css('display', 'none');
                        }
                    });
                });
            }
        };

        var ActionSelect = React.createClass({
            getDefaultProps: function () {
                return {
                    options: [
                        {id: 'text', text: "{{ 'Single Line Text'|_ }}"},
                        {id: 'textarea', text: "{{ 'Paragraph Text'|_ }}"},
                        {id: 'wysiwyg', text: "{{ 'Rich Text'|_ }}"},
                        {id: 'number', text: "{{ 'Number'|_ }}"},
                        {id: 'email', text: "{{ 'Email Address'|_ }}"},
                        {id: 'url', text: "{{ 'Website/URL'|_ }}"},
                        {id: 'image', text: "{{ 'Image URL'|_ }}"},
                        {id: 'file', text: "{{ 'File Upload'|_ }}"},
                        {id: 'date', text: "{{ 'Date'|_ }}"},
                        {id: 'tel', text: "{{ 'Phone Number'|_ }}"},
                        {id: 'hidden', text: "{{ 'Hidden Field'|_ }}"},
                        {id: 'time', text: "{{ 'Time'|_ }}"},
                        {id: 'password', text: "{{ 'Password'|_ }}"},
                        {id: 'checkbox', text: "{{ 'Checkbox'|_ }}"},
                        {id: 'radio', text: "{{ 'Radio'|_ }}"},
                        {id: 'select', text: "{{ 'Dropdown'|_ }}"},
                        {id: 'select-multi', text: "{{ 'Select Multi'|_ }}"}
                    ]
                };
            },
            getInitialState: function () {
                return {
                    value: this.props.value
                }
            },
            handleChange: function (e, callback, selection) {
                FieldsComponent.setProps({ inputType: selection.id });
            },
            getConfig: function () {
                return {
                    id: guid(),
                    name: this.props.name,
                    className: '',
                    placeholder: "{{ '-- Select field type --' |_ }}",
                    multiple: false,
                    options: this.props.options,
                    onChange: this.handleChange,
                    defaultValue: [this.state.value]
                };
            },
            render: function () {
                return React.createElement(FComSelect2, this.getConfig());
            }
        });
        
        var FieldsForm = React.createClass({
            getDefaultProps: function () {
                return {
                    row: {},
                    managable: {
                        text: ['field_placeholder', 'maxlength', 'size'],
                        textarea: ['field_placeholder', 'maxlength', 'size', 'rows', 'cols'],
                        number: ['maxlength', 'size', 'min', 'max', 'step'],
                        email: ['field_placeholder', 'maxlength', 'size', 'multiple'],
                        url: ['field_placeholder', 'maxlength', 'size'],
                        image: ['formaction', 'src', 'height', 'width', 'pattern', 'autocomplete'],
                        file: ['multiple'],
                        date: ['maxlength', 'size', 'min', 'max', 'step'],
                        tel: ['field_placeholder', 'maxlength', 'size'],
                        time: ['maxlength', 'size', 'min', 'max', 'step'],
                        password: ['field_placeholder', 'maxlength', 'size', 'validation'],
                        checkbox: ['options', 'checked', 'validation'],
                        radio: ['maxlength', 'options', 'checked', 'validation'],
                        select: ['maxlength', 'size', 'options', 'validation'],
                        'select-multi': ['maxlength', 'size', 'options', 'validation']
                    }
                };
            },
            getInitialState: function () {
                return {
                    inputType: ''
                };
            },
            componentWillReceiveProps: function (nextProps) {
                this.setState({ inputType: nextProps.inputType });
            },
            componentDidMount: function () {
                if (this.props.row['input_type'] !== '')
                    this.setState({ inputType: this.props.row['input_type'] });
            },
            getValue: function (input) {
                var row = this.props.row;

                if (_.isEmpty(row)) return '';

                if (row[input]) return row[input];
                else {
                    options = typeof row.options == 'string' ? JSON.parse(row.options) : row.options;
                    return options[input];
                }
            },
            isRendered: function (input) {
                if (!this.state.inputType) return false;

                if (_.isArray(input))
                    return _.contains(this.props.managable[this.state.inputType], input[0]);
                return _.contains(this.props.managable[this.state.inputType], input);
            },
            render: function () {
                return React.DOM.div(null,
                    React.DOM.input({ type: 'hidden', id: 'id', name: 'id', defaultValue: this.getValue('id') }),
                    React.DOM.div({ className: 'row' },
                        React.DOM.div({ className: 'form-group col-sm-8' },
                            React.createElement(Components.ControlLabel, {
                                label_class: 'col-sm-3',
                                required: true,
                                input_id: 'input_type' }, "{{ 'Field Type'|_ }}"
                            ),
                            React.DOM.div({ className: 'controls col-sm-8' },
                                    React.createElement(ActionSelect, {
                                        id: 'input_type',
                                        name: 'input_type',
                                        value: this.getValue('input_type')
                                    })
                            )
                        ),
                        React.DOM.div({ className: 'form-group col-sm-4' },
                            React.createElement(Components.ControlLabel, {
                                label_class: 'col-sm-5',
                                required: true,
                                input_id: 'position' }, "{{ 'Position'|_ }}"
                            ),
                            React.DOM.div({ className: 'controls col-sm-7' },
                                React.createElement(Components.ControlInput, { value: this.getValue('position'), id: 'position', name: 'position', validation: { required: true } })
                            )
                        )
                    ),
                    React.DOM.div({ className: 'row' },
                        React.DOM.div({ className: 'form-group col-sm-8' },
                            React.createElement(Components.ControlLabel, {
                                label_class: 'col-sm-3',
                                required: true, input_id: 'name' }, "{{ 'Field Name'|_ }}"
                            ),
                            React.DOM.div({ className: 'controls col-sm-8' },
                                React.createElement(Components.ControlInput, { value: this.getValue('name'), id: 'name', name: 'name', validation: { required: true } })
                            )
                        ),
                        React.DOM.div({ className: 'form-group col-sm-4' },
                            React.createElement(Components.ControlLabel, {
                                label_class: 'col-sm-5',
                                input_id: 'required' }, "{{ 'Required'|_ }}"
                            ),
                            React.DOM.div({ className: 'controls col-sm-7' },
                                React.createElement(Components.ControlInput, {
                                    type: 'select',
                                    value: this.getValue('required'),
                                    id: 'required',
                                    name: 'required',
                                    validation: { required: true },
                                    options: {
                                        0: 'No',
                                        1: 'Yes'
                                    }
                                })
                            )
                        )
                    ),
                    React.DOM.div({ className: 'row' },
                        React.DOM.div({ className: 'form-group col-sm-8' },
                            React.createElement(Components.ControlLabel, {
                                label_class: 'col-sm-3',
                                required: true, input_id: 'field_id' }, "{{ 'Field Id'|_ }}"
                            ),
                            React.DOM.div({ className: 'controls col-sm-8' },
                                React.createElement(Components.ControlInput, {
                                    value: this.getValue('field_id'),
                                    id: 'field_id',
                                    name: 'field_id',
                                    validation: { required: true } })
                            )
                        ),
                        React.DOM.div({ className: 'form-group col-sm-4' },
                            React.createElement(Components.ControlLabel, {
                                label_class: 'col-sm-5',
                                input_id: 'readonly' }, "{{ 'Read Only'|_ }}"
                            ),
                            React.DOM.div({ className: 'controls col-sm-7' },
                                React.createElement(Components.ControlInput, {
                                    type: 'select',
                                    value: this.getValue('readonly'),
                                    id: 'readonly',
                                    name: 'readonly',
                                    validation: { required: true },
                                    options: {
                                        0: 'No',
                                        1: 'Yes'
                                    }
                                })
                            )
                        )
                    ),
                    React.DOM.div({ className: 'row' },
                        React.DOM.div({ className: 'form-group' },
                            React.createElement(Components.ControlLabel, { required: true, input_id: 'label' }, "{{ 'Field Label'|_ }}"),
                            React.DOM.div({ className: 'controls col-sm-9' },
                                React.createElement(Components.ControlInput, {
                                    value: this.getValue('label'),
                                    id: 'label',
                                    name: 'label',
                                    validation: { required: true }
                                })
                            )
                        )
                    ),
                    React.DOM.div({ className: 'row' },
                        React.DOM.div({ className: 'form-group' },
                            React.createElement(Components.ControlLabel, { input_id: 'css_class' }, "{{ 'CSS Classes'|_ }}"),
                            React.DOM.div({ className: 'controls col-sm-9' },
                                React.createElement(Components.ControlInput, {
                                    value: this.getValue('css_class'),
                                    id: 'css_class',
                                    name: 'css_class'
                                })
                            )
                        )
                    ),
                    React.DOM.div({ className: 'row' },
                        React.DOM.div({ className: 'form-group' },
                            React.createElement(Components.ControlLabel, { input_id: 'field_default_value' }, "{{ 'Default Value'|_ }}"),
                            React.DOM.div({ className: 'controls col-sm-9' },
                                React.createElement(Components.ControlInput, {
                                    type: 'textarea',
                                    value: this.getValue('field_default_value'),
                                    id: 'field_default_value',
                                    name: 'field_default_value'
                                })
                            )
                        )
                    ),
                    this.isRendered('field_placeholder') ? React.DOM.div({ className: 'row' },
                        React.DOM.div({ className: 'form-group' },
                            React.createElement(Components.ControlLabel, { input_id: 'field_placeholder' }, "{{ 'Placeholder'|_ }}"),
                            React.DOM.div({ className: 'controls col-sm-9' },
                                React.createElement(Components.ControlInput, {
                                    value: this.getValue('field_placeholder'),
                                    id: 'field_placeholder',
                                    name: 'field_placeholder'
                                })
                            )
                        )
                    ): null,
                    this.isRendered('maxlength') ? React.DOM.div({ className: 'row' },
                        React.DOM.div({ className: 'form-group' },
                            React.createElement(Components.ControlLabel, { input_id: 'maxlength' }, "{{ 'Max Length'|_ }}"),
                            React.DOM.div({ className: 'controls digits nonegative col-sm-3' },
                                React.createElement(Components.ControlInput, {
                                    value: this.getValue('maxlength'),
                                    id: 'maxlength',
                                    name: 'maxlength'
                                })
                            )
                        )
                    ) : null,
                    this.isRendered('size') ? React.DOM.div({ className: 'row' },
                        React.DOM.div({ className: 'form-group' },
                            React.createElement(Components.ControlLabel, { input_id: 'size' }, "{{ 'Size'|_ }}"),
                            React.DOM.div({ className: 'controls digits nonegative col-sm-3' },
                                React.createElement(Components.ControlInput, {
                                    value: this.getValue('size'),
                                    id: 'size',
                                    name: 'size'
                                })
                            )
                        )
                    ) : null,
                    this.isRendered(['rows', 'cols']) ? React.DOM.div({ className: 'row' },
                        React.DOM.div({ className: 'form-group' },
                            React.DOM.div(null,
                                React.createElement(Components.ControlLabel, { input_id: 'rows' }, "{{ 'Rows'|_ }}"),
                                React.DOM.div({ className: 'controls digits nonegative col-sm-3' },
                                    React.createElement(Components.ControlInput, {
                                        value: this.getValue('rows'),
                                        id: 'rows',
                                        name: 'rows'
                                    })
                                )
                            ),
                            React.DOM.div(null,
                                React.createElement(Components.ControlLabel, { input_id: 'cols' }, "{{ 'Cols'|_ }}"),
                                React.DOM.div({ className: 'controls digits nonegative col-sm-3' },
                                    React.createElement(Components.ControlInput, {
                                        value: this.getValue('cols'),
                                        id: 'cols',
                                        name: 'cols'
                                    })
                                )
                            )
                        )
                    ) : null,
                    this.isRendered('options') ? React.DOM.div({ className: 'row' },
                        React.DOM.div({ className: 'form-group' },
                            React.createElement(Components.ControlLabel, { input_id: 'options' }, "{{ 'Add/Remove options'|_ }}"),
                            React.DOM.div({ className: 'controls col-sm-9' },
                                React.createElement(Components.ControlInput, {
                                    value: this.getValue('options'),
                                    id: 'options',
                                    name: 'options'
                                })
                            )
                        )
                    ) : null,
                    this.isRendered('checked') ? React.DOM.div({ className: 'row' },
                        React.DOM.div({ className: 'form-group' },
                            React.createElement(Components.ControlLabel, { input_id: 'checked' }, "{{ 'Default checked'|_ }}"),
                            React.DOM.div({ className: 'controls col-sm-2' },
                                React.createElement(Components.ControlInput, {
                                    type: 'select',
                                    value: this.getValue('checked'),
                                    id: 'checked',
                                    name: 'checked',
                                    options: {
                                        0: 'No',
                                        1: 'Yes'
                                    }
                                })
                            )
                        )
                    ) : null,
                    this.isRendered('formaction') ? React.DOM.div({ className: 'row' },
                        React.DOM.div({ className: 'form-group' },
                            React.createElement(Components.ControlLabel, { input_id: 'formaction' }, "{{ 'Form action'|_ }}"),
                            React.DOM.div({ className: 'controls col-sm-9' },
                                React.createElement(Components.ControlInput, {
                                    value: this.getValue('formaction'),
                                    id: 'formaction',
                                    name: 'formaction'
                                })
                            )
                        )
                    ): null,
                    this.isRendered('formnovalidate') ? React.DOM.div({ className: 'row' },
                        React.DOM.div({ className: 'form-group' },
                            React.createElement(Components.ControlLabel, { input_id: 'formnovalidate' }, "{{ 'No form validate'|_ }}"),
                            React.DOM.div({ className: 'controls col-sm-2' },
                                React.createElement(Components.ControlInput, {
                                    type: 'select',
                                    value: this.getValue('formnovalidate'),
                                    id: 'formnovalidate',
                                    name: 'formnovalidate',
                                    options: {
                                        0: 'No',
                                        1: 'Yes'
                                    }
                                })
                            )
                        )
                    ) : null,
                    this.isRendered('src') ? React.DOM.div({ className: 'row' },
                        React.DOM.div({ className: 'form-group' },
                            React.createElement(Components.ControlLabel, { input_id: 'src' }, "{{ 'Src'|_ }}"),
                            React.DOM.div({ className: 'controls col-sm-9' },
                                React.createElement(Components.ControlInput, {
                                    value: this.getValue('src'),
                                    id: 'src',
                                    name: 'src'
                                })
                            )
                        )
                    ) : null,
                    this.isRendered(['height', 'width']) ? React.DOM.div({ className: 'row' },
                        React.DOM.div({ className: 'form-group' },
                            React.DOM.div(null,
                                React.createElement(Components.ControlLabel, { input_id: 'height' }, "{{ 'Height'|_ }}"),
                                React.DOM.div({ className: 'controls digits nonegative col-sm-3' },
                                    React.createElement(Components.ControlInput, {
                                        value: this.getValue('height'),
                                        id: 'height',
                                        name: 'height'
                                    })
                                )
                            ),
                            React.DOM.div(null,
                                React.createElement(Components.ControlLabel, { input_id: 'width' }, "{{ 'Width'|_ }}"),
                                React.DOM.div({ className: 'controls digits nonegative col-sm-3' },
                                    React.createElement(Components.ControlInput, {
                                        value: this.getValue('width'),
                                        id: 'width',
                                        name: 'width'
                                    })
                                )
                            )
                        )
                    ) : null,
                    this.isRendered(['min', 'max', 'step']) ? React.DOM.div({ className: 'row' },
                        React.DOM.div({ className: 'form-group' },
                            React.DOM.div({ className: 'col-sm-4' },
                                React.createElement(Components.ControlLabel, { label_class: 'col-sm-6', input_id: 'min' }, "{{ 'Min value'|_ }}"),
                                React.DOM.div({ className: 'controls digits nonegative col-sm-6' },
                                    React.createElement(Components.ControlInput, {
                                        value: this.getValue('min'),
                                        id: 'min',
                                        name: 'min'
                                    })
                                )
                            ),
                            React.DOM.div({ className: 'col-sm-4' },
                                React.createElement(Components.ControlLabel, { label_class: 'col-sm-6', input_id: 'max' }, "{{ 'Max value'|_ }}"),
                                React.DOM.div({ className: 'controls digits nonegative col-sm-6' },
                                    React.createElement(Components.ControlInput, {
                                        value: this.getValue('max'),
                                        id: 'max',
                                        name: 'max'
                                    })
                                )
                            ),
                            React.DOM.div({ className: 'col-sm-4' },
                                React.createElement(Components.ControlLabel, { label_class: 'col-sm-3', input_id: 'step' }, "{{ 'Step'|_ }}"),
                                React.DOM.div({ className: 'controls digits nonegative col-sm-6' },
                                    React.createElement(Components.ControlInput, {
                                        value: this.getValue('step'),
                                        id: 'step',
                                        name: 'step'
                                    })
                                )
                            )
                        )
                    ) : null,
                    this.isRendered('multiple') ? React.DOM.div({ className: 'row' },
                        React.DOM.div({ className: 'form-group' },
                            React.createElement(Components.ControlLabel, { input_id: 'multiple' }, "{{ 'Multiple'|_ }}"),
                            React.DOM.div({ className: 'controls col-sm-2' },
                                React.createElement(Components.ControlInput, {
                                    type: 'select',
                                    value: this.getValue('multiple'),
                                    id: 'multiple',
                                    name: 'multiple',
                                    options: {
                                        0: 'No',
                                        1: 'Yes'
                                    }
                                })
                            )
                        )
                    ) : null,
                    this.isRendered(['pattern', 'autocomplete']) ? React.DOM.div({ className: 'row' },
                        React.DOM.div({ className: 'form-group' },
                            React.DOM.div(null,
                                React.createElement(Components.ControlLabel, { input_id: 'pattern' }, "{{ 'Pattern'|_ }}"),
                                React.DOM.div({ className: 'controls digits nonegative col-sm-4' },
                                    React.createElement(Components.ControlInput, {
                                        value: this.getValue('pattern'),
                                        id: 'pattern',
                                        name: 'pattern'
                                    })
                                )
                            ),
                            React.DOM.div(null,
                                React.createElement(Components.ControlLabel, { input_id: 'autocomplete', className: 'col-sm-3' }, "{{ 'Autocomplete'|_ }}"),
                                React.DOM.div({ className: 'controls digits nonegative col-sm-2' },
                                    React.createElement(Components.ControlInput, {
                                        value: this.getValue('autocomplete'),
                                        id: 'autocomplete',
                                        name: 'autocomplete'
                                    })
                                )
                            )
                        )
                    ) : null,
                    this.isRendered('validation') ? React.DOM.div({ className: 'row' },
                        React.DOM.div({ className: 'form-group' },
                            React.createElement(Components.ControlLabel, { input_id: 'validation' }, "{{ 'Validation'|_ }}"),
                            React.DOM.div({ className: 'controls col-sm-2' },
                                React.createElement(Components.ControlInput, {
                                    value: this.getValue('validation'),
                                    id: 'validation',
                                    name: 'validation'
                                })
                            )
                        )
                    ): null
                );
            }
        });

        window.showModalToAddFormField = function(grid) {
            formFieldsGrid = grid;
            renderModal();
        };

        window.showModalToEditFormField = function(row) {
            renderModal(row);
        };

        function renderModal(row) {
            var modalContainerEle = document.getElementById('fcom_append_form');
            React.unmountComponentAtNode(modalContainerEle);
            React.render(
                React.createElement(Components.Modal, {
                        className: "formFieldsModal",
                        show: true,
                        title: "{{ 'Fields Form'|_ }}",
                        confirm: row ? "{{ 'Update Field'|_ }}" : "{{ 'Add Field'|_ }}",
                        cancel: "{{ 'Cancel'|_ }}",
                        onLoad: function(modal) {
                            formFieldsModalNode = $(modal.getDOMNode());
                            formFieldsModalNode.find('.modal-dialog').css('width', '900px');
                        },
                        onConfirm: row ? window.updateFormField : window.addFormField
                    },
                    React.createElement('div', {className: 'f-grid-wrapper', id: formFieldsGrid.getConfig('id')+'-wrap'},
                        React.DOM.form({ id: "{{ grid.config.id }}-modal-form", className: 'form form-horizontal validate-form' },
                            React.DOM.div({ id: 'field-element-wrapper' })
                        )
                    )
                ), modalContainerEle
            );

            var formContainer = document.getElementById('field-element-wrapper');
            React.unmountComponentAtNode(formContainer);
            FieldsComponent = React.render(
                React.createElement(FieldsForm, { row: row }), formContainer
            );

            var modalFormEle = document.getElementById('{{ grid.config.id }}-modal-form');
            setValidateForm($(modalFormEle));
        }
    });
</script>