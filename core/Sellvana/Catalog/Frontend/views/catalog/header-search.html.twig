<style type="text/css">
    .short-desc {
        color: #595959;
        font-size: 0.6em;
    }
    .product-search-img {
        width: 20%;
        display: inline-block;
    }

    .product-search-info {
        width: 70%;
        height: 100%;
        display: inline-block;
    }

    .tt-menu {
        width: 422px;
        margin: 40px 0;
        padding: 8px 0;
        background-color: #fff;
        border: 1px solid #ccc;
        border: 1px solid rgba(0, 0, 0, 0.2);
        -webkit-border-radius: 8px;
        -moz-border-radius: 8px;
        border-radius: 8px;
        -webkit-box-shadow: 0 5px 10px rgba(0,0,0,.2);
        -moz-box-shadow: 0 5px 10px rgba(0,0,0,.2);
        box-shadow: 0 5px 10px rgba(0,0,0,.2);
    }
    .tt-suggestion {
        padding: 3px 20px;
        font-size: 18px;
        line-height: 24px;
    }

    .tt-suggestion a {
        color: #000;
    }

    .tt-cursor {
        background: #4B65B1;
    }

    .tt-suggestion.tt-cursor {
        background: #4B65B1;
    }

    .tt-suggestion.tt-cursor a, 
    .tt-suggestion.tt-cursor .tt-highlight,
    .tt-suggestion.tt-cursor .short-desc em {
        color: #fff;
    }

    .tt-suggestion a {
        margin: 0;
        font-size: 0.8em;
    }

    .tt-highlight {
        color: #4B65B1;
    }
    
    .empty-message {
        padding-left: 12px;
    }
</style>
<form class="navbar-form f-header-search-form {{ THIS.get('for_mobile') ? 'visible-xs' : 'hidden-xs' }}" role="search" action="{{ APP.href('catalog/search') }}">
    <input type="text" class="form-control typeahead" autocomplete="off" placeholder="{{ 'Search the store'|_ }}" name="q" value="{{ THIS.get('query') }}">
    <button type="submit" class="btn btn-default {{ THIS.get('for_mobile') ? 'btn-sm' }}"><span class="glyphicon glyphicon-search"></span></button>
</form>
{% if not THIS.get('for_mobile') %}
  <script type="text/javascript">
    require(['jquery', 'underscore', 'bloodhound', 'typeahead'], function($, _, Bloodhound) {
        var $input = $('.f-header-search-form input[name=q]');
        var url = '{{ APP.href('catalog/search/autocomplete') }}';
        var products = {{ UTIL.toJson(THIS.get('products')) | raw }};
        if (_.isEmpty(products)) {
            products = [];
        }

        var engine = new Bloodhound({
            name: 'products',
            limit: 10,
            queryTokenizer: Bloodhound.tokenizers.whitespace,
            datumTokenizer: function(d) {
                return Bloodhound.tokenizers.whitespace(d.val);
            },
            /*local: $.map(products, function(item) {
                return { val: item.product_name };
            }),*/
            prefetch: {
                url: url,
                filter: function(products) {
                    return products;
                }
            },
            remote: {
                url: url + "?q=%QUERY",
                filter: function(products) {
                    console.log(products);
                    return products;
                },
                wildcard: "%QUERY"
            }
        });

        engine.initialize();

        var substringMatcher = function(strs) {
            return function findMatches(q, cb) {
                var matches, substringRegex;

                // an array that will be populated with substring matches
                matches = [];

                // regex used to determine if a string contains the substring `q`
                substrRegex = new RegExp(q, 'i');

                // iterate through the pool of strings and for any string that
                // contains the substring `q`, add it to the `matches` array
                $.each(strs, function(i, str) {
                    var n = str.product_name;
                    if (substrRegex.test(n)) {
                        matches.push(str);
                    }
                });

                cb(matches);
            };
        };

        $input.typeahead({ hint: true, highlight: true }, {
            name: 'products',
            displayKey: 'val',
            limit: 5,
            // source: substringMatcher(products),
            source: engine.ttAdapter(),
            templates: {
                suggestion: function (data) {
                    return '<div class="tt-suggestion tt-selectable"><div class="product-search-img"><img src="'+data.thumb_url+'" title="'+data.product_name+'" /></div><div class="product-search-info"><a href="{{ APP.frontendHref() }}'+data.url_key+'">' + data.product_name + '</a><p class="small short-desc"><em>'+data.short_description+'</em></p></div></div>';
                },
                empty: '<div class="empty-message">No matches.</div>'
            }
        });

        
    });
  </script>
{% endif %}
