<style type="text/css" media="screen">
    #other_oembed_container, 
    #youtube_oembed_container, 
    #vimeo_oembed_container {
        padding: 20px 0;
        text-align: center;
        display: none;
    }
    .mejs-container {
        margin: 0 auto;
    }
</style>
{% set m = THIS.get('model') %}
{% set prodVideosConfig = APP.instance('Sellvana_Catalog_Admin_Controller_Products').productVideosGridConfig(m) %}

{% set type = 'videos' %}
{% set targetType = 'product' %}
{% set medialibConfig = {
    id: 'all_' ~ type,
    mode: 'videos',
    type: 'product-videos',
    title: 'Videos',
    folder: 'media/product/videos',
    config: {actions: {delete: {caption : 'Remove'}}}
} %}

{% set attachmentsConfig = {
    type: type,
    targetType: targetType,
    elementContainer: '#tab-videos',
    medialibConfig: medialibConfig,
    gridConfig: prodVideosConfig
} %}
{% set combineType = targetType ~ type %}
{{ THIS.view('core/attachmentgrid-griddle').set('config', attachmentsConfig) | raw }}

<script>
    require(['jquery', 'underscore', 'react', 'fcom.griddle', 'fcom.components', 'griddle.fcomModalForm', 'jquery.validate', 'jquery.media-element', 'jquery.froogaloop2'], function ($, _, React, FComGriddleComponent, Components, FComModalForm) {
        var productVideosGrid = {{ combineType }}Grid, productVideosNode, productExternalModalGrid, productExternalModalNode, videoExt, videoName, editedRow;
        var linkInfo = {}, isExternalLink = false;

        /*gapi.client.load('plus', 'v3', function() {
            console.log('plus loaded!');
        });*/

        if (productVideosGrid) {
            $(productVideosGrid.getDOMNode())
                .on('removedRows.griddle', function (e, rows) {
                    // Removed videos on main video tab grid
                }).on('addedRows.griddle', function (e, rows) {
                    // Added videos on main video tab grid
                });
        }

        /**
         * Get file extension
         * @param  {String} str
         * @return {String}
         */
        function _getFileExtension(str) {
            if (str.match(/mp[34]|webm|ogg/)) {
                return str.slice(str.lastIndexOf('.') + 1);
            }
            return '';
        }

        /**
         * Check if file name has no supported suffix
         * 
         * @param  {String} value 
         * @param  {Object} elem
         * @return {Boolean}
         */
        function validateVideoName (value, elem) {
            if (isExternalLink === false && !value.match(/\w+\.(mp[34]|ogg|webm)$/)) {
                $(elem).focus();
                return false;
            }
            return true;
        }

        /**
         * Check if file extension is changed
         * 
         * @param  {String} value 
         * @param  {Object} elem
         * @return {Boolean}
         */
        function validateVideoExtension(value, elem) {
            if (isExternalLink === false && _getFileExtension(value) !== videoExt) {
                $(elem).focus();
                return false;
            }
            return true;
        }

        /**
         * Capitalize first letter
         * 
         * @param  {string} string 
         * @return {string}
         */
        function _capitalizeFirstLetter(string) {
            return string.toLowerCase().charAt(0).toUpperCase() + string.slice(1);
        }

        function _refreshGrid(data) {
            _(data).each(function(val, i) {
                editedRow[i] = val;
            });
            productVideosGrid.updateRows([editedRow]);
        }

        window.savePreviewModal = function(modal) {
            var $form = productVideosNode.find('form#' + productVideosGrid.getConfig('id') + '-modal-form'),
                $alert = productVideosNode.find('.alert'),
                id = $form.find('#id').val(),
                url = "{{ APP.href('media/grid/data?folder=') }}" + encodeURIComponent('media/product/videos'),
                hash = { oper: id ? 'edit' : 'add' }
                isNameChanged = false;

            $form.find('textarea, input, select').each(function() {
                var key = $(this).attr('id');
                var val = $(this).val();
                if (key == 'file_name' && val !== videoName) isNameChanged = true;
                hash[key] = productVideosGrid.html2text(val);
            });

            if ($form.valid()) {
                if (isNameChanged) {
                    $.ajax({
                        url: url,
                        type: 'POST',
                        dataType: 'json',
                        data: hash,
                        beforeSend: function() {
                            $alert.hide();
                        }
                    }).done(function(r) {
                        if (r.error) {
                            var msg = r.message ? r.message : "{{ 'Save file error due to system error, please try again.' | _ }}";
                            $alert.find('.alert-message').html(msg).show();
                            return;
                        }
                        _refreshGrid(hash);
                        modal.close();
                    });
                } else {
                    _refreshGrid(hash);
                    modal.close();
                }
            }
        }

        /**
         * Preview vimeo link
         */
        $(document).on('click', '.btn-vimeo-preview', function(event) {
            event.preventDefault();
            var url = $('#vimeo_oembed_url').val();
            if (!url.match(/https?:\/\/player\.vimeo\.com\/video\/\d{9}\?api=\d{1}&player_id=vimeo_player/)) {
                var id = url.slice(url.lastIndexOf('/') + 1);
                var url = 'https://player.vimeo.com/video/' + id + '?api=1&player_id=vimeo_player';
            }

            $('#vimeo-player-src').prop('src', url);
            $('#vimeo_oembed_container').show();

        });

        /**
         * Preview youtube link
         */
        $(document).on('click', '.btn-youtube-preview', function(event) {
            event.preventDefault();
            var url    =  $('#youtube_oembed_url').val();
            var $alert = $(this).parents('.tab-pane').find('.alert');
            if (url !== '' && url.match(/https?:\/\/\w+\.youtube\.com\/watch\?v=[0-9A-z]{11}/)) {
                $alert.hide();
                $('#youtube-player-src').prop('src', url);
                var playerPreview = new MediaElementPlayer('video#youtube-player', {
                    success: function (mediaElement, domObject) { 
                        playerPreview.play();
                    }
                });
                $('#youtube_oembed_container').show();
            } else {
                $alert.find('.alert-message').html('Please insert valid youtube link.');
                $alert.show();
            }
        });

        /**
         * Preview other providers link
         */
        $(document).on('click', '.btn-other-preview', function(event) {
            event.preventDefault();
            var $this = $(this);
            var url        = $('#other_oembed_url').val();
            var $container = $('#other_oembed_container');
            $.post("{{ APP.href('/catalog/products/embed_video') }}", 
                { url: url }, 
                function(r, textStatus, xhr) {
                    $container.html(r).show();
                }
            );
        });

        $(document).on('click', '.btn-embed', function(event) {
            event.preventDefault();
            if (_.isEmpty(linkInfo)) {
                var url = $(this).parents('.tab-pane').find('.oembed_url').val();
                $.post("{{ APP.href('/catalog/products/embed_video') }}", 
                    { oper: 'add', url: url }, 
                    function(r, textStatus, xhr) {
                        if (!r.error) {
                            window.location.reload();
                        }
                    }
                );
            }
        });

        window.saveExternalVideosModal = function(modal) {
            
        }

        window.showModalToPreviewVideo = function(row) {
            editedRow      = row;
            isExternalLink = false;
            videoExt       = _getFileExtension(row.file_name);
            videoName      = row.file_name;

            if (row.data_serialized && row.folder === 'external_link') {
                isExternalLink = true;
                var data = JSON.parse(row.data_serialized);
                var provider = data.provider_name.toLowerCase();
                if (provider == 'youtube') {
                    var src = data.html.substring(data.html.search('src') + 4, data.html.search('oembed') + 6);
                    var videoNode = React.DOM.video({ width: "480", height: "320", id: "video-" + row.id, controls: "controls", preload: "none" },
                            React.DOM.source({ src: src,  type: "video/youtube"  })
                        );
                } else {
                    videoNode = React.DOM.div({ dangerouslySetInnerHTML: {__html: data.html} });
                }
            } else {
                var videoNode = React.DOM.video({ width: "480", height: "320", id: "video-" + row.id, controls: "controls", preload: "none" },
                        React.DOM.source({ src: row.source,  type: "video/" + videoExt  })
                    );
            }

            var modalContainerEle = document.getElementById('fcom_append_form');
            React.unmountComponentAtNode(modalContainerEle);
            React.render(
                React.createElement(Components.Modal, {
                        id: "previewProductVideo",
                        show: true,
                        title: 'Video Details',
                        confirm: 'Save changes',
                        cancel: 'Close',
                        onLoad: function(modal) {
                            productVideosNode = $(modal.getDOMNode());
                            productVideosNode.find('.modal-dialog').css('width', '960px');
                        },
                        onConfirm: window.savePreviewModal
                    },
                    React.DOM.div({ className: "row f-grid-wrapper col-sm-12" }, 
                        React.DOM.div({ className: 'alert alert-danger alert-dismissible',  role: 'alert', style: { display: 'none' } },
                            React.DOM.button({ type: 'button', className: 'close', 'data-dismiss': 'alert', 'aria-hidden': 'true', dangerouslySetInnerHTML: {__html: '&times;'} }),
                            React.DOM.strong(null, "{{ 'Error' | _ }}"),
                            React.DOM.span({ className: 'alert-message' }, '')
                        ),
                        React.DOM.div({ id: "video-container", style: { padding: '0 10px' }, className: 'col-sm-7' },
                            videoNode
                        ),
                        React.DOM.div({ id: "video-infos", className: 'col-sm-5', style: { background: '#F3F3F3' } },
                            React.DOM.div({ id: 'video-details' },
                                React.DOM.h3(null, "{{ 'Video Details' | _ }}"),
                                React.DOM.div({ className: 'file-name' }, 
                                    React.DOM.strong(null, "{{ 'File name: ' | _ }}"),
                                    React.DOM.span(null, row.file_name)
                                ),
                                React.DOM.div({ className: 'file-type' }, 
                                    React.DOM.strong(null, "{{ 'File type: ' | _ }}"),
                                    React.DOM.span(null, videoExt ? 'video/'+videoExt : 'External Video')
                                ),
                                React.DOM.div({ className: 'folder' }, 
                                    React.DOM.strong(null, "{{ 'Folder: ' | _ }}"),
                                    React.DOM.span(null, row.folder ? row.folder : 'External Video')
                                ),
                                React.DOM.div({ className: 'file-size' }, 
                                    React.DOM.strong(null, "{{ 'File size: ' | _ }}"),
                                    React.DOM.span(null, row.file_size ? Math.ceil(row.file_size/1024000) + ' MB' : 'External Video')
                                ),
                                React.DOM.div({ className: 'create-at' }, 
                                    React.DOM.strong(null, "{{ 'Upload on: ' | _ }}"),
                                    React.DOM.span(null, row.create_at)
                                )
                            ),
                            React.DOM.hr(),
                            React.createElement(FComModalForm, { columnMetadata: productVideosGrid.getConfig('columns'), id: productVideosGrid.getConfig('id'), row: row, hiddenId: row.file_id }),
                            React.DOM.hr()
                        )
                    )
                ), modalContainerEle
            );
            
            $('video,audio').mediaelementplayer({
                features: ['playpause','progress','current','duration','tracks','volume','fullscreen']
            });

            $.validator.addMethod('validateVideoName', validateVideoName, '{{ "Incorrect name or must contains supported extension suffix." | _ }}');
            $.validator.addMethod('validateVideoExtension', validateVideoExtension, '{{ "File extention must be " | _ }}' + videoExt);
            $.validator.addClassRules('valid-video-name', {
                validateVideoName: true,
                validateVideoExtension: true
            });
        }

        window.gridAddVideoLink{{ prodVideosConfig.config.id }} = function(grid) {
            var modalContainerEle = document.getElementById('fcom_append_form');
            React.unmountComponentAtNode(modalContainerEle);
            React.render(
                React.createElement(Components.Modal, {
                        id: "previewExternalVideo",
                        show: true,
                        title: 'Embed External Link',
                        confirm: 'Save changes',
                        cancel: 'Close',
                        onLoad: function(modal) {
                            productExternalModalNode = $(modal.getDOMNode());
                            productExternalModalNode.find('.modal-dialog').css('width', '960px');
                        },
                        onConfirm: window.saveExternalVideosModal
                    },
                    React.DOM.div({ className: "row f-grid-wrapper col-sm-12" }, 
                        React.DOM.div({ role: 'tabpanel' },
                            React.DOM.ul({ className: 'nav nav-tabs f-horiz-nav-tabs', role: 'tablist' },
                                React.DOM.li({ role: 'presentation', className: 'active' },
                                    React.DOM.a({ href: '#youtube_tab', 'aria-controls': 'youtube_tab', role: 'tab', 'data-toggle': 'tab', dangerouslySetInnerHTML: {__html: "<i class='icon-youtube-play'></i> {{ 'Youtube' | _ }}"} })
                                ),
                                React.DOM.li({ role: 'presentation', className: '' },
                                    React.DOM.a({ href: '#vimeo_tab', 'aria-controls': 'vimeo_tab', role: 'tab', 'data-toggle': 'tab', dangerouslySetInnerHTML: {__html: "<i class='fa fa-vimeo-square'></i> {{ 'Vimeo' | _ }}"} })
                                ),
                                React.DOM.li({ role: 'presentation' },
                                    React.DOM.a({ href: '#other', 'aria-controls': 'other', role: 'tab', 'data-toggle': 'tab' }, "{{ 'Other Providers' | _ }}")
                                )
                            ),
                            React.DOM.div({ className: 'tab-content' },
                                React.DOM.div({ role: 'tabpanel', className: 'tab-pane active', id: 'youtube_tab' },
                                    React.DOM.div({ className: 'alert alert-danger alert-dismissible',  role: 'alert', style: { display: 'none' } },
                                        React.DOM.button({ type: 'button', className: 'close', 'data-dismiss': 'alert', 'aria-hidden': 'true', dangerouslySetInnerHTML: {__html: '&times;'}, style: { right: '0px !important' } }),
                                        React.DOM.strong(null, "{{ 'Error' | _ }}! "),
                                        React.DOM.span({ className: 'alert-message' }, '')
                                    ),
                                    React.DOM.div({ className: 'col-sm-12' },
                                        React.DOM.div({ className: 'control-label col-sm-2', style: { paddingTop: '5px' } },
                                            React.DOM.label({ htmlFor: 'youtube_oembed_url' },
                                                React.DOM.span(null, "{{ 'Youtube URL' | _ }}")
                                            )
                                        ),
                                        React.DOM.div({ className: 'controls col-sm-7' },
                                            React.DOM.input({ id: 'youtube_oembed_url', name: 'youtube_oembed_url', className: 'form-control oembed_url', required: true })
                                        ),
                                        React.DOM.div({ className: 'controls col-sm-1' },
                                            React.DOM.button({ type: 'button', className: 'btn btn-primary btn-sm btn-youtube-preview', 'data-loading-text': "{{ 'Processing...' | _ }}" }, "{{ 'Preview' | _ }}")
                                        ),
                                        React.DOM.div({ className: 'controls col-sm-1' },
                                            React.DOM.button({ type: 'submit', className: 'btn btn-success btn-sm btn-embed', 'data-loading-text': "{{ 'Processing...' | _ }}", 'data-type': 'youtube' }, "{{ 'Add to Library' | _ }}")
                                        )
                                    ),
                                    React.DOM.div({ className: 'col-sm-12', id: 'youtube_oembed_container' },
                                        React.DOM.video({ width: '640', height: '360', id: "youtube-player", 'data-loading-text': "{{ 'Processing...' | _ }}", controls: 'controls', preload: 'true' },
                                            React.DOM.source({ id: 'youtube-player-src', src: '', type: "video/youtube" })
                                        )
                                    )
                                ),
                                React.DOM.div({ role: 'tabpanel', className: 'tab-pane', id: 'vimeo_tab' },
                                    React.DOM.div({ className: 'alert alert-danger alert-dismissible',  role: 'alert', style: { display: 'none' } },
                                        React.DOM.button({ type: 'button', className: 'close', 'data-dismiss': 'alert', 'aria-hidden': 'true', dangerouslySetInnerHTML: {__html: '&times;'}, style: { right: '0px !important' } }),
                                        React.DOM.strong(null, "{{ 'Error' | _ }}! "),
                                        React.DOM.span({ className: 'alert-message' }, '')
                                    ),
                                    React.DOM.div({ className: 'col-sm-12' },
                                        React.DOM.div({ className: 'control-label col-sm-2', style: { paddingTop: '5px' } },
                                            React.DOM.label({ htmlFor: 'vimeo_oembed_url' },
                                                React.DOM.span(null, "{{ 'Vimeo URL' | _ }}")
                                            )
                                        ),
                                        React.DOM.div({ className: 'controls col-sm-7' },
                                            React.DOM.input({ id: 'vimeo_oembed_url', name: 'vimeo_oembed_url', className: 'form-control oembed_url', required: true })
                                        ),
                                        React.DOM.div({ className: 'controls col-sm-1' },
                                            React.DOM.button({ type: 'button', className: 'btn btn-primary btn-sm btn-vimeo-preview', 'data-loading-text': "{{ 'Processing...' | _ }}" }, "{{ 'Preview' | _ }}")
                                        ),
                                        React.DOM.div({ className: 'controls col-sm-1' },
                                            React.DOM.button({ type: 'submit', className: 'btn btn-success btn-sm btn-embed', 'data-loading-text': "{{ 'Processing...' | _ }}", 'data-type': 'vimeo' }, "{{ 'Add to Library' | _ }}")
                                        )
                                    ),
                                    React.DOM.div({ className: 'col-sm-12', id: 'vimeo_oembed_container' },
                                        React.DOM.iframe({ id: 'vimeo-player-src', src: '', height: '360', width: '640', frameBorder: '0' })
                                    )
                                ),
                                React.DOM.div({ role: 'tabpanel', className: 'tab-pane', id: 'other' },
                                    React.DOM.div({ className: 'alert alert-danger alert-dismissible',  role: 'alert', style: { display: 'none' } },
                                        React.DOM.button({ type: 'button', className: 'close', 'data-dismiss': 'alert', 'aria-hidden': 'true', dangerouslySetInnerHTML: {__html: '&times;'}, style: { right: '0px !important' } }),
                                        React.DOM.strong(null, "{{ 'Error' | _ }}! "),
                                        React.DOM.span({ className: 'alert-message' }, '')
                                    ),
                                    React.DOM.div({ className: 'col-sm-12' },
                                        React.DOM.div({ className: 'control-label col-sm-2', style: { paddingTop: '5px' } },
                                            React.DOM.label({ htmlFor: 'other_oembed_url' },
                                                React.DOM.span(null, "{{ 'URL' | _ }}")
                                            )
                                        ),
                                        React.DOM.div({ className: 'controls col-sm-7' },
                                            React.DOM.input({ id: 'other_oembed_url', name: 'other_oembed_url', className: 'form-control oembed_url', required: true })
                                        ),
                                        React.DOM.div({ className: 'controls col-sm-1' },
                                            React.DOM.button({ type: 'button', className: 'btn btn-primary btn-sm btn-other-preview', 'data-loading-text': "{{ 'Processing...' | _ }}" }, "{{ 'Preview' | _ }}")
                                        ),
                                        React.DOM.div({ className: 'controls col-sm-1' },
                                            React.DOM.button({ type: 'submit', className: 'btn btn-success btn-sm btn-embed', 'data-loading-text': "{{ 'Processing...' | _ }}", 'data-type': 'other' }, "{{ 'Add to Library' | _ }}")
                                        )
                                    ),
                                    React.DOM.div({ className: 'col-sm-12', id: 'other_oembed_container' })
                                )
                            )
                        )
                    )
                ), modalContainerEle
            );
        }
    });
</script>
