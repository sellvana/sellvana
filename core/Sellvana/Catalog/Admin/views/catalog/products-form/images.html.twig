{% set m = THIS.get('model') %}
{% set prodImagesConfig = APP.instance('Sellvana_Catalog_Admin_Controller_Products').productImagesGridConfig(m) %}

{% set type = 'images' %}
{% set targetType = 'product' %}
{% set medialibConfig = {
    id: 'all_' ~ type,
    mode: 'images',
    type: 'product-images',
    title: 'Images'|_,
    folder: 'media/product/images',
    config: {actions: {delete: {caption : 'Remove'|_}}}
} %}

{% set attachmentsConfig = {
    type: type,
    targetType: targetType,
    elementContainer: '#tab-images',
    medialibConfig: medialibConfig,
    gridConfig: prodImagesConfig
} %}
{% set combineType = targetType ~ type %}
{#{{ forms.attachment_tab_content(m, attachment_tab_config) | raw }}#}

{#{{ THIS.view('core/attachmentgrid').set('config', attachmentsConfig) | raw }}#}
{{ THIS.view('core/attachmentgrid-griddle').set('config', attachmentsConfig) | raw }}

<script>
    $(document).ready(function() {
        var id = "{{ m.id }}";
        var url = "{{ formUrl }}?id="+id+"&tabs=variants";
        {# load variants tab before update image list when add image for product #}
        if (typeof(variantImages) != "function") {
            $.getJSON(url, function (data, status, req) {
                _.each(data.tabs, function (tabHtml, i) {
                    $('#tab-variants').html(tabHtml).data('loaded', true);
                    $('#tab-variants' + ' .collapse').collapse();
                });
            });
        }
    });

    /*$(document).ready(function() {
        var id = "{{ m.id }}";
        var url = "{{ formUrl }}?id="+id+"&tabs=variants-griddle";
        {# load variants tab before update image list when add image for product #}
        if (typeof(variantImages) != "undefined") {
            $.getJSON(url, function (data, status, req) {
                _.each(data.tabs, function (tabHtml, i) {
                    $('#tab-variants-griddle').html(tabHtml).data('loaded', true);
                    $('#tab-variants-griddle' + ' .collapse').collapse();
                });
            });
        }
    });*/

    require(['jquery', 'underscore', 'react', 'fcom.griddle', 'fcom.components', 'unique'], function ($, _, React, FComGriddleComponent, Components) {
        var productImagesGrid = {{ combineType }}Grid;
        if (productImagesGrid) {
            $(productImagesGrid.getDOMNode())
                .on('removedRows.griddle', function (e, removedRows) {
                    updateImageInVariantList(removedRows, true);
                })
                .on('addedRows.griddle', function (e, addedRows) {
                    updateImageInVariantList(addedRows);
                });
        }
    });

    /**
     * update image to variant lists image in Variants tab
     * @param {array} rows
     * @param {boolean} isRemove
     */
    function updateImageInVariantList(rows, isRemove)
    {
        //console.log('updateImageInVariantList.rows', rows);
        if (typeof isRemove === 'undefined') {
            isRemove = false;
        }

        if (typeof variantImages != 'undefined') {
            var images = [];

            _.forEach(rows, function(row) {
                images.push({
                    file_id: row.file_id,
                    folder: row.folder,
                    file_name: row.file_name,
                    file_size: row.file_size,
                    label: row.label,
                    position: row.position,
                    in_gallery: row.in_galery,
                    subfolder: row.subfolder,
                    id: guid()
                });
            });

            /*console.log('images to add', images);
            console.log('rows to add', rows);*/

            if (isRemove) {
                variantImages.removeImages(images);
            } else {
                variantImages.updateImages(images);
            }
        }
    }


    /*window.afterBuiltImagesGrid = function(grid) {
        console.log('after build image grid');
        //bind remove event
        grid.getRows().bind('remove', function(row) {
            console.log('remove row', row);
            var image = [];
            image.push({
                file_id: row.get('file_id'),
                subfolder: row.get('subfolder'),
                file_name: row.get('file_name')
            });
            if (typeof(updateListVariantImage) == "function") {
                updateListVariantImage({
                    add: false,
                    image: image
                });
            }
        })
    };
    window.afterAddImages = function (grid) {
        var image = [];
        grid.getSelectedRows().forEach(function (row) {
            image.push({
                file_id: row.get('file_id'),
                subfolder: row.get('subfolder'),
                file_name: row.get('file_name')
            });
        });
        if (typeof(updateListVariantImage) == "function") {
            updateListVariantImage({
                add: true,
                image: image
            });
        }
    };
    window.afterMassDelete = function() {
        var image = [];
        {{ combineType }}Grid.getSelectedRows().forEach(function (row) {
            image.push({
                file_id: row.get('file_id'),
                subfolder: row.get('subfolder'),
                file_name: row.get('file_name')
            });
        });
        if (typeof(updateListVariantImage) == "function") {
            updateListVariantImage({
                add: false,
                image: image
            });
        }
    };*/
    require(['tmpl', 'load-image', 'canvas-to-blob', 'iframe-transport', 'jquery.fileupload', 'jquery.fileupload-fp',
        'jquery.fileupload-ui', 'griddle.fcomMediaLib'], function () {
        var uploadUrl = '{{ APP.href("media/grid/upload?type=") | raw }}{{medialibConfig.type ? medialibConfig.type : "" }}';
        var file_error = [];
        $('#quick-add-images').fileupload({
            url: uploadUrl,
            multiple: true,
            autoUpload: true,
            dropZone: $('#dropzone')
        })
        .bind('fileuploadalways', function (e, data) {
            var mediaGrid = mediaLibGrid{{ medialibConfig.id }};
            var combineGrid = {{ combineType }}Grid;
            var success = false;
            if ($.isArray(data.result.files) && mediaGrid) {
                var addRows = [];
                var combineAddRows = [];
                var NoI = combineGrid.getRows().length || false;
                var current = FCom.Mixin.dateTimeNow();

                //collect data to push to grid
                data.result.files.forEach(function (obj, i) {
                    if (!obj.error) {
                        addRows.push(obj);

                        //check combine grid already had this image
                        if (combineGrid && !_.findWhere(combineGrid.getRows(), {file_id: obj.id})) {
                            var combineRow = $.extend({}, obj, {
                                _new: true,
                                id: guid(),
                                file_id: obj.id,
                                update_at: current,
                                create_at: current,
                                //temporary value before implement edit inline
                                position: !NoI ? 1 : NoI + 1,
                                is_thumb: !NoI && i == 0 ? 1 : 0,
                                is_default: !NoI && i == 0 ? 1 : 0,
                                is_rollover: !NoI && i == 0 ? 1 : 0,
                                in_gallery: 1,
                                label: FCom.Mixin.removeSpecialChars(obj.file_name)
                            });
                            combineAddRows.push(combineRow);
                        }
                    }
                    else {
                        file_error.push(obj.file_name);
                    }
                });

                //add to media grid
                if (addRows.length) {
                    success = true;
                    mediaGrid.addRows(addRows);
                }

                //add to combine grid
                if (combineAddRows.length) {
                    combineGrid.addRows(combineAddRows);
                }

                if (success) {
                    $.bootstrapGrowl("{{ 'Successfully uploaded.' |_ }}", {
                        type: 'success',
                        align: 'center',
                        width: 'auto'
                    });
                }
            }
        })
        .bind('fileuploadstop', function (e, data) {
            if (file_error.join(',') != '') {
                alert("{{ 'Illegal file extension: ' |_ }}" + file_error.join(','));
                file_error = [];
            }
        });

        $(document).bind('dragover', function (e) {
            var $dropZone = $('#dropzone'),
                $span = $dropZone.find('span');

            var found = false,
                node = e.target;

            do {
                if (node === $dropZone[0]) {
                    found = true;
                    break;
                }
                node = node.parentNode;
            } while (node != null);

            if (found) {
                $span.html("{{ 'Drop images to here' |_ }}");
            } else {
                if (!$span.attr('data-text')) {
                    $span.attr('data-text', $span.html());
                }
            }
        })
        .bind('drop dragleave', function (e) {
            var $span = $('#dropzone').find('span');
            $span.html($span.attr('data-text'));
        });
    });
</script>
