{% set m = THIS.get('model') %}
{% set prodAttachConfig = APP.instance('Sellvana_Catalog_Admin_Controller_Products').productAttachmentsGridConfigForGriddle(m) %}

{# media lib #}
{% set mediaLib =  APP.instance('FCom_Admin_Controller_MediaLibrary') %}

{% set mediaConfig = {
id: 'all_attachment',
mode: 'attachments',
type: 'product-attachments',
title: 'Attachments',
folder: 'media/product/attachment',
config: {}
} %}

{% set mediaLibAttachConfig = mediaLib.gridConfig({'id': mediaConfig.id, 'folder': mediaConfig.folder, 'config': mediaConfig.config, 'mode': mediaConfig.mode}) %}
{% set mediaLibAttachConfigCompiled = THIS.view('core/griddle').set('grid', mediaLibAttachConfig).getGridConfig() %}

<input type='hidden' name="grid[attachments][del]" class="target-attach-remove" id="{{ prodAttachConfig.config.id }}-attach-remove"/>
<input type='hidden' name="grid[attachments][rows]" class="target-attach-rows" id="{{ prodAttachConfig.config.id }}-attach-rows"/>

<script>
    require(['jquery', 'underscore', 'react', 'fcom.griddle', 'fcom.components', 'unique'], function ($, _, React, FComGriddleComponent, Components) {
        var mainGridId = '{{ prodAttachConfig.config.id }}';
        var inputAddRowsEle = $('#' + mainGridId + '-attach-rows'),
            inputRemoveRowsEle = $('#' + mainGridId + '-attach-remove');
        var mainGrid, attachGrid, originIds;

        /**
         * remove special chars
         * @param {string} str
         */
        function removeSpecialChars(str)
        {
            var label = str.substr(0, str.lastIndexOf('.'));
            return label.replace(/[^A-Z0-9]/ig, ' ');
        }

        /**
         * Get fields for save
         * @param row
         */
        function getFieldToSave(row) {
            return {
                id: row.id,
                file_id: row.file_id,
                label: row.label,
                position: row.position,
                create_at: row.create_at,
                update_at: row.update_at,
                _new: row._new
            };
        }

        /**
         * Update rows before save
         * @param grid
         */
        function updateRowsRecord(grid) {
            var rows = [];
            var removedIds = _.difference(originIds, _.pluck(grid.getRows(), 'id'));

            grid.getRows().forEach(function(row) {
                rows.push(getFieldToSave(row));
            });

            inputAddRowsEle.val(JSON.stringify(rows));
            inputRemoveRowsEle.val(removedIds.join(','));
        }

        /**
         * remove special chars
         * @param {string} str
         */
        function removeSpecialChars(str)
        {
            var label = str.substr(0, str.lastIndexOf('.'));
            return label.replace(/[^A-Z0-9]/ig, ' ');
        }

        /**
         * callback function to show modal to add image from full images grid to product images grid
         * @param grid
         */
        window.showModalToAddAttachment = function(grid) {
            mainGrid = grid;
            var modalContainerEle = document.getElementById('{{ prodAttachConfig.config.id }}-modal');
            //render modal
            React.unmountComponentAtNode(modalContainerEle);
            React.renderComponent(
                    React.createElement(Components.Modal, {
                                id: "attachGridModal",
                                show: true,
                                title: 'Add Attachment',
                                confirm: 'Add',
                                cancel: 'Close',
                                onLoad: function (modal) {
                                    var node = $(modal.getDOMNode());
                                    node.find('.modal-dialog').css('width', '900px');
                                },
                                onConfirm: window.addSelectedAttachment
                            },
                            React.createElement("div", { className: "row f-grid-wrapper" }, React.createElement("div", { className: "tabbable" },
                                    React.createElement("ul", { className: "nav nav-tabs prod-type f-horiz-nav-tabs" },
                                            React.createElement("li", { className: "active" },
                                                    React.createElement("a", { "data-toggle": "tab", href: "#{{mediaConfig.id}}-attach_library" }, "Library")
                                            ),
                                            React.createElement("li", null,
                                                    React.createElement("a", { "data-toggle": "tab", href: "#{{mediaConfig.id}}-media-upload" }, "Uploads")
                                            )
                                    ),
                                    React.createElement("div", { className: "tab-content" },
                                            React.createElement("div", { className: "tab-pane active", id: "{{mediaConfig.id}}-attach_library" }
                                            ),
                                            React.createElement("div", { className: "tab-pane", id: "{{mediaConfig.id}}-media-upload" })
                                    )
                            )))
                    , modalContainerEle);
            var mediaLibAttachConfigCompiled = {{ UTIL.toJson(mediaLibAttachConfigCompiled) | raw }};
            var attachGridContainerEle = document.getElementById('{{mediaConfig.id}}-attach_library');
            var instanceAttachGrid = React.renderComponent(
                    React.createElement(FComGriddleComponent, { config: mediaLibAttachConfigCompiled}),
                    attachGridContainerEle
            );

            //var uploadLibAttachConfigCompiled = {{ UTIL.toJson(uploadLibAttachConfigCompiled) | raw }};

            if (typeof instanceAttachGrid.refs[mediaLibAttachConfigCompiled.id] !== 'undefined') {
                attachGrid = instanceAttachGrid.refs[mediaLibAttachConfigCompiled.id];
            }
        };

        /**
         * callback function to add selected image from full images grid to product images grid
         * @param modal
         */
        window.addSelectedAttachment = function(modal) {
            var selectedRows = attachGrid.getSelectedRows();
            if (selectedRows.length) {
                var addRows = [];
                //process selected rows
                selectedRows.forEach(function(attachRow) {
                    if (!_.findWhere(mainGrid.getRows(), {file_id: attachRow.id})) {
                        var row = attachRow;
                        var current = FCom.Mixin.dateTimeNow();
                        _.extend(row, {
                            _new: true,
                            id: guid(),
                            file_id: attachRow.id,
                            update_at: current,
                            create_at: current,
                            //temporary value before implement edit inline
                            position: 0,
                            label: removeSpecialChars(attachRow.file_name)
                        });
                        addRows.push(row);
                    }
                });

                if (addRows.length) {
                    mainGrid.addRows(addRows);
                }

                modal.close();
            } else {
                alert('please choose at least one item');
            }
        };

        /**
         * callback function after main grid product_images was rendered
         * @param grid
         */
        window.setProductAttachmentMainGrid = function(grid) {
            mainGrid = grid;
            originIds = _.pluck(grid.getRows(), 'id');
        };

        /*
         *function to set attachment grid data into form fields to send them server
         *This function is callend when 'save' button of product form is clicked.
         */
        window.submitCallback.push(function () {
            updateRowsRecord(mainGrid);
        });

    });
</script>

{# show main grid#}
{{ LAYOUT.view('core/griddle').set('grid', prodAttachConfig) | raw }}
