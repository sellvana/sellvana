{% set m = THIS.get('model') %}
{% set validator = THIS.get('validator') %}
{% set fieldData = { validator:validator } %}
{% import THIS.view('core/form-elements').twigName() as forms %}
{% set viewHelper = LAYOUT.view('core/form-elements') %}
{% set priceHelper = APP.instance('Sellvana_Catalog_Model_ProductPrice') %}
{% set prices = priceHelper.getProductPrices(m) %}

{% set loadCustomerGroups = MODULES.isLoaded('Sellvana_CustomerGroups') %}

{% if loadCustomerGroups %}
    {% set customerGroups = APP.instance('Sellvana_CustomerGroups_Model_Group').groupsOptions() %}
{% endif %}

{% set loadSites = MODULES.isLoaded('Sellvana_MultiSite') %}

{% if loadSites %}
    {% set sites = APP.instance('Sellvana_MultiSite_Model_Site').siteOptions() %}
{% endif %}

{% set loadCurrency = MODULES.isLoaded('Sellvana_MultiCurrency') %}

{% if loadCurrency %}
    {% set currencies = APP.instance('Sellvana_MultiCurrency_Main').getAvailableCurrencies() %}
{% endif %}

<fieldset name="product-prices">
    <div class="f-section">
        <div id="price_list">
            <div style="width: 200px;margin:10px auto;" class="progress">
                <div class="progress-bar progress-bar-info" style="float: none;width: 100%">{{ "Loading ..."|_ }}</div>
            </div>
        </div>
    </div>
</fieldset>
<script type="text/javascript">
    require(['jquery', 'fcom.catalog.product.price', 'jquery.validate', 'daterangepicker'], function ($, Price) {

        var data = '{{m.get('sale_price_period')}}', s, e;
        if (!data) {
            var startDate = new Date();
            s = startDate.getFullYear() + '-' + (startDate.getMonth() + 1) + '-' + startDate.getDate();
        } else {
            var dates = data.split(" - ");
            s = dates[0];
            e = dates[1] || dates[0];
        }
        var $input = $('#model-sale_price_period');
        var datePickerOptions = {
            format: 'YYYY-MM-DD',
            startDate: s,
            separator: ' / '
        };
        if (e) {
            datePickerOptions.endDate = e;
        }
        $input.daterangepicker(datePickerOptions);


//        $('select.to-select2').select2({minimumResultsForSearch: 15, width: 'resolve', dropdownAutoWidth: true});
        function validatePrices() {
            var valid = true;
            $('#price_list').find('select.priceUnique').each(function (el) {
                if (!$(this).valid()) {
                    valid = false;
                }
            });
            return valid;
        }

        var options = {
            container: $('#price_list'),
            prices: {{ UTIL.toJson(prices)|raw }},
            price_types: {{ UTIL.toJson(m.priceTypeOptions())|raw }},
            editable_prices: {{ UTIL.toJson(priceHelper.fieldOptions('editable_prices'))|raw }},
            customer_groups: {{ customerGroups? UTIL.toJson(customerGroups)|raw: 'null' }},
            sites: {{ sites? UTIL.toJson(sites)|raw: 'null' }},
            currencies: {{ currencies? UTIL.toJson(currencies)|raw: 'null' }},
            product_id: '{{ m.id() }}',
            validatePrices: validatePrices,
            priceRelationOptions: {{ UTIL.toJson(priceHelper.fieldOptions('price_relation_options'))|raw }},
            operationOptions: {{ UTIL.toJson(priceHelper.fieldOptions('operation_options'))|raw }},
            sale_date_separator: ' / ',
            show_customers: {{ loadCustomerGroups? 'true': 'false' }},
            show_sites: {{ loadSites? 'true': 'false' }},
            show_currency: {{ loadCurrency? 'true': 'false' }}
        };

        Price.init(options);

        /**
         *
         *
         */
        function validateBaseField(value, element) {
            var valid = false;
            if(typeof element !== 'undefined') {
                var $parent = $(element).parents('.price-item');
                var $curFields = $parent.find('.customer-group, .site, .currency');
                var currHash = value;
                var matchingHashes = {};
                var siteId = '*', currCode = '*', groupId = '*';
                $curFields.each(function () {
                    var $el = $(this);
                    var val = $el.val();

                    if($el.hasClass('site')) {
                        siteId = val;
                    } else if($el.hasClass('currency')) {
                        currCode = val;
                    } else if($el.hasClass('customer-group')) {
                        groupId = val;
                    }
                });

                matchingHashes[value + '***'] = 1;

                matchingHashes[value + groupId +'**'] = 1;
                matchingHashes[value + '*' + siteId + '*'] = 1;
                matchingHashes[value + '**' + currCode] = 1;
                matchingHashes[value + groupId + '*' + currCode] = 1;
                matchingHashes[value + '*' + siteId + currCode] = 1;
                matchingHashes[value + groupId + siteId + '*'] = 1;

                matchingHashes[currHash] = 1;


                var $items = $('.price-item');
                $items.each(function () {
                    if(valid) {
                        // valid price already found, return
                        return;
                    }

                    var $item = $(this);
                    if($item[0] === $parent[0]) {
                        // same as validated element, return
                        return;
                    }
                    var $priceType = $item.find('.price-type');
                    if($priceType.length == 0) {
                        // no price type return
                        return;
                    }
                    var itemHash = $priceType.val();

                    var $itemFields = $item.find('.customer-group, .site, .currency');
                    var siteId = '*', currCode = '*', groupId = '*', defaultHash = '';
                    $itemFields.each(function () {
                        var $el = $(this);
                        if ($el.hasClass('site')) {
                            siteId = $el.val();
                        } else if ($el.hasClass('currency')) {
                            currCode = $el.val();
                        } else if ($el.hasClass('customer-group')) {
                            groupId = $el.val();
                        }
                    });
                    itemHash += groupId + siteId + currCode;
                    valid = (matchingHashes[itemHash] == 1);
                });
            }
            return valid;
        }

        /*
         *custom validation function for checking duplicated input
         */
        function priceUnique(value, elem) {
            var valid = true;
            if (typeof (elem) !== 'undefined') {
                var parent = $(elem).parents('.price-item');
                var curFields = parent.find('input.priceUnique, select.priceUnique');
                var currHash = '';
                curFields.each(function () {
                    currHash += $(this).val();
                });

                var items = $('.price-item');
                items.each(function () {
                    if (!valid) {
                        return;
                    }

                    var $item = $(this);
                    if (this === parent[0]) {
                        return;
                    }
                    var fields = $item.find('input.priceUnique, select.priceUnique');
                    var checkHash = '';
                    fields.each(function (idx) {
                        checkHash += $(this).val();
                    });
                    valid = currHash != checkHash;
                });
                return valid;
            }
        }

        $.validator.addMethod('priceUnique', priceUnique, '{{"Same price already exists."|_}}');
        $.validator.addMethod('base_field', validateBaseField, '{{"No matching base price"|_}}');

        $.validator.addClassRules("priceUnique", {
            priceUnique: true
        });
        $.validator.addClassRules("base_field", {
            base_field: true
        });

        $('form').submit(function () {
            return validatePrices();
        });
    })
</script>

{{ THIS.hook('catalog/products-form/prices', {'model' : m}) | raw }}
