{% set m = THIS.get('model') %}
{% set validator = THIS.get('validator') %}
{% set fieldData = { validator:validator } %}
{% import THIS.view('core/form-elements').twigName() as forms %}
{% set viewHelper = LAYOUT.view('core/form-elements') %}
{% set priceHelper = APP.instance('Sellvana_Catalog_Model_ProductPrice') %}
{% set prices = priceHelper.getProductPrices(m) %}

{% set loadCustomerGroups = MODULES.isLoaded('Sellvana_CustomerGroups') %}

{% if loadCustomerGroups %}
    {% set customerGroups = APP.instance('Sellvana_CustomerGroups_Model_Group').groupsOptions() %}
{% endif %}

{% set loadSites = MODULES.isLoaded('Sellvana_MultiSite') %}

{% if loadSites %}
    {% set sites = APP.instance('Sellvana_MultiSite_Model_Site').siteOptions() %}
{% endif %}

{% set loadCurrency = MODULES.isLoaded('Sellvana_MultiCurrency') %}

{% if loadCurrency %}
    {% set currencies = APP.instance('Sellvana_MultiCurrency_Main').getAvailableCurrencies() %}
{% endif %}

<fieldset name="product-prices">
    <div class="f-section">
        <div id="product_price_list">
            <div style="width: 200px;margin:10px auto;" class="progress">
                <div class="progress-bar progress-bar-info" style="float: none;width: 100%">{{ "Loading ..."|_ }}</div>
            </div>
        </div>
    </div>
</fieldset>

{{ THIS.hook('product_prices_form_after', {'model' : m}) | raw }}

<script type="text/javascript">
    require(['jquery', 'react', 'fcom.catalog.product.price', 'fcom.locale', 'fcom.catalog.components', 'jquery.validate', 'daterangepicker'], function ($, React, Price, Locale) {

        var data = '{{m.get('sale_price_period')}}', s, e;
        if (!data) {
            var startDate = new Date();
            s = startDate.getFullYear() + '-' + (startDate.getMonth() + 1) + '-' + startDate.getDate();
        } else {
            var dates = data.split(" - ");
            s = dates[0];
            e = dates[1] || dates[0];
        }
        var $input = $('#model-sale_price_period');
        var datePickerOptions = {
            format: 'YYYY-MM-DD',
            startDate: s,
            separator: ' / '
        };
        if (e) {
            datePickerOptions.endDate = e;
        }
        $input.daterangepicker(datePickerOptions);

        function validatePrices() {
            var valid = true;
            $('#product_price_list').find('select.productPriceUnique').each(function (el) {
                if (!$(this).valid()) {
                    valid = false;
                }
            });
            return valid;
        }

        var PriceGrid = React.createClass({
            displayName: "ProductPriceGrid",
            mixins: [FCom.Mixin, FCom.PriceMixin],
            render: function() {
                var options = {
                    prices: {{ UTIL.toJson(prices) | raw }},
                    title: Locale._('Product Prices'),
                    dataMode: null,
                    priceTypes: {{ UTIL.toJson(m.priceTypeOptions()) | raw }},
                    editablePrices: {{ UTIL.toJson(priceHelper.fieldOptions('editable_prices')) | raw }},
                    customerGroups: {{ customerGroups? UTIL.toJson(customerGroups) | raw : 'null' }},
                    sites: {{ sites? UTIL.toJson(sites) | raw : 'null' }},
                    currencies: {{ currencies? UTIL.toJson(currencies) | raw: 'null' }},
                    productId: '{{ m.id() }}',
                    validatePrices: validatePrices,
                    priceRelationOptions: {{ UTIL.toJson(priceHelper.fieldOptions('price_relation_options')) | raw }},
                    operationOptions: {{ UTIL.toJson(priceHelper.fieldOptions('operation_options')) | raw }},
                    saleDateSeparator: ' / ',
                    showCustomers: {{ loadCustomerGroups? 'true': 'false' }},
                    showSites: {{ loadSites? 'true': 'false' }},
                    showCurrency: {{ loadCurrency? 'true': 'false' }}
                };
            
                $.validator.addMethod('productPriceUnique', this.validateUniquePrice('product'), '{{"Same price already exists."|_}}');
                $.validator.addClassRules("productPriceUnique", {
                    productPriceUnique: true
                });

                $.validator.addMethod('productBaseField', this.validateBasePrice('product'), '{{"No matching base price"|_}}');
                $.validator.addClassRules("product_base_field", {
                    productBaseField: true
                });

                return React.createElement(Price, { id: 'product', options: options });
            }
        });

        var pricesContainerEle = document.getElementById('product_price_list');
        React.unmountComponentAtNode(pricesContainerEle);
        React.render(
            React.createElement(PriceGrid), pricesContainerEle
        );

        $('form').submit(function () {
            return validatePrices();
        });
    })
</script>

{{ THIS.hook('catalog/products-form/prices', {'model' : m}) | raw }}
