<style type="text/css">
    .dropzone, .dropzone * {
        box-sizing: border-box;
    }

    .dropzone {
        position: relative;
        text-align: center;
        border: 2px dashed #b4b9be;
        border-radius: 5px;
        min-height: 255px;
    }

    .dropzone.dz-clickable {
        cursor: pointer;
    }

    .dropzone .dz-message .note {
        font-size: 0.8em;
        font-weight: 200;
        display: block;
        margin-top: 1.4rem;
    }

    .dropzone .dz-preview {
        position: relative;
        display: inline-block;
        width: 120px;
        margin: 0.5em;
    }
    .dropzone .dz-preview .dz-progress {
        display: block;
        height: 15px;
        border: 1px solid #aaa;
    }
    .dropzone .dz-preview .dz-progress .dz-upload {
        display: block;
        height: 100%;
        width: 0;
        background: green;
    }
    .dropzone .dz-preview .dz-error-message {
        color: red;
        display: none;
    }
    .dropzone .dz-preview.dz-error .dz-error-message, .dropzone .dz-preview.dz-error .dz-error-mark {
        display: block;
    }
    .dropzone .dz-preview.dz-success .dz-success-mark {
        display: block;
    }
    .dropzone .dz-preview .dz-error-mark, .dropzone .dz-preview .dz-success-mark {
        position: absolute;
        display: none;
        left: 30px;
        top: 30px;
        width: 54px;
        height: 58px;
        left: 50%;
        margin-left: -27px;
    }

    .select2-container {
        width: 200px;
    }
</style>
{% set categories = APP.instance('Sellvana_Catalog_Model_Category').getFlatCategories() %}
{% set defaultFileSizeConfig = CONFIG.get('modules/FCom_Admin/default_media_file_size') | default('1') %}

<form id="products-quick-add-form" action="{{ APP.href('catalog/products/quick-add') }}" method="post">
    <div class="f-admin-main-view">
        <div class="page-header f-admin-page-header">
            <h1 class="f-page-title">
                {{ "Quick Add Products" |_ }}
            </h1>
            <div class="input-group pull-right col-sm-3">
                <input id="product_no" type="text" placeholder="Set adding products" class="form-control" />
                <div class="input-group-btn">
                    <!-- Buttons -->
                    <button type="button" {#disabled#} id="btn_add_products" style="padding: 8px 15px;" class="btn btn-danger"><i class="fa fa-plus fa-fw"></i></button>
                    <button type="submit" class="btn btn-primary ladda-button" style="padding: 8px 15px;" data-style="expand-left">{{ 'Create Products'|_ }}</button>
                </div>
            </div>
        </div>

        <div class="f-admin-main f-grid-wrapper">
            {{ THIS.view('core/messages') | raw }}
            <div id="products-quick-add-container"></div>
        </div>
    </div>
</form>

<script>
    require(['jquery', 'underscore', 'react', 'fcom.components', 'griddle.fcomSelect2', 'fcom.admin', 'unique'], function($, _, React, Components, FComSelect2) {
        var _mainForm = $('#products-quick-add-form');
        var imageList = {};

        window.adminForm = FCom.Admin.form({
            form: 'products-quick-add-form',
            url_get: '{{ APP.href('catalog/products/quick-add') }}',
            url_post: '{{ APP.href('catalog/products/quick-add') }}'
        });

        $.fn.setValidateForm(_mainForm);

        _mainForm.on('submit', function () {
            if (!$(this).valid()) return false;
        });

        $(document).on('click', '#btn_add_products', function (e) {
            BlockFormComponent.setProps({ blocks: $('#product_no').val() });
        });

        var Blocks = React.createClass({
            getDefaultProps: function () {
                return {
                    blocks: 1,
                    djsComponentConfig: {
                        showButtons: true,
                        postUrl: "{{ APP.href('/media/grid/upload?type=') | raw }}" + encodeURIComponent('product-images') + '&folder=' + encodeURIComponent('media/product/images')
                    },
                    djsConfig: {
                        addRemoveLinks: true,
                        paramName: "upload",
                        autoProcessQueue: false,
                        uploadMultiple: true,
                        maxFilesize: "{{ defaultFileSizeConfig | raw }}",
                        maxFiles: 3
                    }
                };
            },
            getInitialState: function () {
                return {
                    blocks: this.props.blocks
                };
            },
            componentWillReceiveProps: function (nextProps) {
                this.setState({ blocks: nextProps.blocks });
            },
            componentDidUpdate: function () {
                this.init();
            },
            componentDidMount: function () {
                this.init();
            },
            removeProduct: function (e) {
                this.setState({ blocks: this.state.blocks - 1 });
            },
            unlink: function(id) {
                $.post("{{ APP.href('/media/grid/mass-delete') }}", { oper: 'mass-delete', id: id },
                        function (r) {
                            if (r.success) {
                                $.bootstrapGrowl("{{ 'Image removed from media library' }}", {
                                    type: 'success',
                                    align: 'center',
                                    width: 'auto'
                                });
                            }
                        });
            },
            djsInit: function(dj) {
                var that = this, _this = dj;
                this.hiddenInput = $(_this.element.querySelector('input.images'));
                _this.element.querySelector("button.btn-upload").addEventListener("click", function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                    _this.processQueue();
                });

                _this.element.querySelector("button.btn-cancel").addEventListener("click", function () {
                    _this.removeAllFiles(true);
                    var values = that.hiddenInput.val() ? that.hiddenInput.val().split(',') : [];
                    if (values.length) {
                        that.unlink(values);
                    }
                    that.hiddenInput.val('');
                });
            },
            uploadSucceeded: function (file, responseText) {
                var key = this.hiddenInput.data('key');
                var values = this.hiddenInput.val() ? this.hiddenInput.val().split(',') : [];
                _(responseText['files']).each(function (f) {
                    var index = _.indexOf(values, f.id);
                    if (index == -1) {
                        values.push(f.id);
                        if (!imageList[key]) imageList[key] = [];
                        imageList[key].push({
                            id: f.id,
                            name: f.file_name
                        });
                    }
                });
                this.hiddenInput.val(values.join(','));
            },
            removedfile: function (file) {
                var that = this;
                var key = this.hiddenInput.data('key');
                var values = this.hiddenInput.val() ? this.hiddenInput.val().split(',') : [];
                if (values.length) {
                    var images = imageList[key];
                    _(images).each(function (image) {
                        if (file.name == image.name) {
                            values.splice(_.indexOf(values, image.id), 1);
                            that.unlink(image.id);
                        }
                    });
                }
                this.hiddenInput.val(values.join(','));
            },
            init: function () {
                $('.product-sku').each(function () {
                    $(this).rules("add", {
                        onfocusout: false,
                        onkeyup: false,
                        remote: {
                            url: '{{ APP.href('/catalog/products/quick-add/unique_sku') | raw }}',
                            type: 'post',
                            data: {
                                _key: $(this).data('id'),
                                _sku: 'product_sku'
                            },
                            dataFilter: function (responseString) {
                                var response = jQuery.parseJSON(responseString);
                                currentMessage = response.Message;
                                return response.unique;
                            }
                        },
                        messages: {
                            remote: "{{ 'This sku is already taken place.' |_ }}"
                        }
                    });
                });
            },
            renderBlocks: function () {
                var blocks = [];
                if (this.state.blocks < 1) return blocks;
                for (var i = 1; i <= this.state.blocks; i++) {
                    blocks.push(
                        React.createElement(BlockForm, {
                            index: i,
                            key: i,
                            djsComponentConfig: this.props.djsComponentConfig,
                            djsConfig: this.props.djsConfig,
                            eventHandlers: {
                                init: this.djsInit,
                                success: this.uploadSucceeded,
                                removedfile: this.removedfile
                            },
                            actions: {
                                removeProduct: this.removeProduct
                            }
                        })
                    );
                }
                return blocks;
            },
            render: function () {
                return React.DOM.table({ className: 'table table-bordered table-striped' },
                    React.DOM.thead(null,
                        React.DOM.tr(null,
                            React.DOM.th(null, "{{ 'Basic Info'|_ }}"),
                            React.DOM.th(null, "{{ 'More Info'|_ }}"),
                            React.DOM.th(null, "{{ 'Stock'|_ }}"),
                            React.DOM.th(null, "{{ 'Long Description'|_ }}"),
                            React.DOM.th(null, "{{ 'Images'|_ }}"),
                            React.DOM.th(null, "{{ 'Actions'|_ }}")
                        ),
                        React.DOM.tbody({ref: 'table-body'}, this.renderBlocks())
                    )
                );
            }
        });

        var BlockForm = React.createClass({
            getInitialState: function () {
                return {
                    id: this.props.index
                };
            },
            render: function () {
                return React.DOM.tr(null,
                    React.DOM.td(null,
                        React.DOM.div({ className: 'form-group controls' },
                            React.createElement(Components.ControlLabel, {
                                required: true,
                                label_class: '',
                                input_id: 'products['+this.state.id+'][product_sku]'}, "{{ 'Product SKU'|_ }}"
                            ),
                            React.createElement(Components.ControlInput, {
                                value: '',
                                id: 'product_sku_' + this.state.id,
                                name: 'products['+this.state.id+'][product_sku]',
                                className: 'product-sku',
                                validation: { required: true },
                                attrs: {
                                    style: {width: "80px"},
                                    'data-id': this.state.id
                                }
                            })
                        ),
                        React.DOM.div({ className: 'form-group controls' },
                            React.createElement(Components.ControlLabel, {
                                required: true,
                                label_class: '',
                                input_id: 'products['+this.state.id+'][product_name]'}, "{{ 'Product name'|_ }}"
                            ),
                            React.createElement(Components.ControlInput, {
                                value: '',
                                className: 'product_name',
                                id: 'products['+this.state.id+'][product_name]',
                                name: 'products['+this.state.id+'][product_name]',
                                validation: { required: true }
                            })
                        ),
                        React.DOM.div({ className: 'form-group controls' },
                            React.createElement(Components.ControlLabel, {
                                required: true,
                                label_class: '',
                                input_id: 'products['+this.state.id+'][short_description]'}, "{{ 'Short Description'|_ }}"
                            ),
                            React.createElement(Components.ControlInput, {
                                type: 'textarea',
                                id: 'products['+this.state.id+'][short_description]',
                                className: 'short_description',
                                name: 'products['+this.state.id+'][short_description]',
                                value: '',
                                validation: { required: true },
                                attrs: {
                                    style: {minWidth: "100px"}
                                }
                            })
                        )
                    ),
                    React.DOM.td(null,
                        React.DOM.div({ className: 'form-group controls' },
                            React.createElement(Components.ControlLabel, {
                                required: true,
                                label_class: '',
                                input_id: 'products['+this.state.id+'][price.base]'}, "{{ 'Price'|_ }}"
                            ),
                            React.createElement(Components.ControlInput, {
                                value: '',
                                id: 'products['+this.state.id+'][price.base]',
                                name: 'products['+this.state.id+'][price.base]',
                                validation: { required: true },
                                attrs: {
                                    style: {width: "80px"}
                                }
                            })
                        ),
                        React.DOM.div({ className: 'form-group controls' },
                            React.createElement(Components.ControlLabel, {
                                label_class: '',
                                input_id: 'products['+this.state.id+'][is_hidden]'}, "{{ 'Hidden?'|_ }}"
                            ),
                            React.createElement(Components.ControlInput, {
                                type: 'select',
                                value: 0,
                                className: 'is_hidden',
                                id: 'products['+this.state.id+'][is_hidden]',
                                name: 'products['+this.state.id+'][is_hidden]',
                                options: {
                                    0: "{{ 'no'|_ }}", 1: "{{ 'Yes'|_ }}"
                                },
                                attrs: {
                                    style: {width: "80px"}
                                }
                            })
                        ),
                        React.DOM.div({ className: 'form-group controls' },
                            React.createElement(Components.ControlLabel, {
                                label_class: '',
                                input_id: 'categories['+this.state.id+']'}, "{{ 'Categories'|_ }}"
                            ),
                            React.createElement(FComSelect2, {
                                id: guid(),
                                name: 'categories['+this.state.id+'][]',
                                placeholder: "{{ 'Select Categories' |_ }}",
                                multiple: true,
                                url: '{{ APP.href('/catalog/products/quick-add/categories_search') | raw }}',
                                onChange: this.handleSelect2Change
                            })
                        )
                    ),
                    React.DOM.td(null,
                        React.DOM.div({ className: 'form-group controls' },
                            React.createElement(Components.ControlLabel, {
                                required: true,
                                label_class: '',
                                input_id: 'products['+this.state.id+'][manage_inventory]'}, "{{ 'Manage?'|_ }}"
                            ),
                            React.createElement(Components.ControlInput, {
                                type: 'select',
                                value: 0,
                                options: {
                                    0: "{{ 'no'|_ }}", 1: "{{ 'Yes'|_ }}"
                                },
                                className: 'manage_inventory',
                                id: 'products['+this.state.id+'][manage_inventory]',
                                name: 'products['+this.state.id+'][manage_inventory]',
                                attrs: {
                                    style: {width: "80px"}
                                }
                            })
                        ),
                        React.DOM.div({ className: 'form-group controls' },
                            React.createElement(Components.ControlLabel, {
                                label_class: '',
                                input_id: 'products['+this.state.id+'][inventory_sku]'}, "{{ 'Inventory SKU'|_ }}"
                            ),
                            React.createElement(Components.ControlInput, {
                                value: '',
                                className: 'inventory_sku',
                                id: 'products['+this.state.id+'][inventory_sku]',
                                name: 'products['+this.state.id+'][inventory_sku]',
                                attrs: {
                                    style: {width: "80px"}
                                }
                            })
                        ),
                        React.DOM.div({ className: 'form-group controls' },
                            React.createElement(Components.ControlLabel, {
                                label_class: '',
                                input_id: 'inventory['+this.state.id+'][qty_in_stock]'}, "{{ 'Qty In Stock'|_ }}"
                            ),
                            React.createElement(Components.ControlInput, {
                                value: '0',
                                className: 'qty_in_stock',
                                id: 'inventory['+this.state.id+'][qty_in_stock]',
                                name: 'inventory['+this.state.id+'][qty_in_stock]',
                                attrs: {
                                    style: {width: "80px"}
                                }
                            })
                        ),
                        React.DOM.div({ className: 'form-group controls' },
                            React.createElement(Components.ControlLabel, {
                                label_class: '',
                                input_id: 'inventory['+this.state.id+'][shipping_weight]'}, "{{ 'Ship Weight'|_ }}"
                            ),
                            React.createElement(Components.ControlInput, {
                                value: '0',
                                id: 'inventory['+this.state.id+'][shipping_weight]',
                                name: 'inventory['+this.state.id+'][shipping_weight]',
                                attrs: {
                                    style: {width: "80px"}
                                }
                            })
                        )
                    ),
                    React.DOM.td({ style: { width: '300px' } },
                        React.createElement(Components.SpecialInput, {
                            type: 'wysiwyg',
                            id: 'products['+this.state.id+'][description]',
                            name: 'products['+this.state.id+'][description]',
                            className: 'ckeditor',
                            value: ''
                        })
                    ),
                    React.DOM.td({ style: { width: '500px' } },
                        React.createElement(Components.Dropzone, {
                            key: this.state.id,
                            name: 'products['+this.state.id+'][images]',
                            config: this.props.djsComponentConfig,
                            djsConfig: this.props.djsConfig,
                            eventHandlers: this.props.eventHandlers
                        })
                    ),
                    React.DOM.td(null,
                        React.DOM.div({ className: 'table-actions-btns-group' },
                            React.createElement(Components.Button, {
                                    className: 'btn btn-link btn-delete',
                                    onClick: this.props.actions.removeProduct,
                                    'data-id': this.state.id
                                },
                                React.DOM.i({ className: 'icon-trash' })
                            )
                        )
                    )
                );
            }
        });

        var container = document.getElementById('products-quick-add-container');
        React.unmountComponentAtNode(container);

        var BlockFormComponent = React.render(React.createElement(Blocks), container);

        // Prevent the default action when a file is dropped on the window
        $(document).on('drop dragover', function (e) {
            e.preventDefault();
        });
    });
</script>
