{% macro widget__product_carousel(widget, library, context) %}
    {% import LAYOUT.view('core/form-elements').twigName() as forms %}
    <div class="form-group">
        <label for="product-carousel-{{ widget.id }}" class="control-label col-md-2">{{ "Product SKUs"|_ }}</label>
        <div class="col-md-5">
            <input type="hidden" name="{{ context.prefix }}[widgets][{{ widget.id }}][value]" value="{{ widget.value }}"
                   id="product-carousel-{{ widget.id }}" class="form-control">
        </div>
    </div>
    {{ forms.input({label: "Carousel Height"|_, type: 'number', name: "#{context.prefix}[widgets][#{widget.id}][height]", value: widget.height|default(400), field: "height-#{widget.id}"}) }}
    {{ forms.input({label: "Carousel Speed"|_, type: 'number', name: "#{context.prefix}[widgets][#{widget.id}][interval]", value:widget.interval|default(5000), field: "interval-#{widget.id}"}) }}
    {{ forms.boolean({label: "Pause Carousel on Hover"|_, name: "#{context.prefix}[widgets][#{widget.id}][pause]", value:widget.pause|default(true), field: "pause-#{widget.id}"}) }}
    {{ forms.boolean({label: "Allow Carousel to React to Keyboard"|_, name: "#{context.prefix}[widgets][#{widget.id}][keyboard]", value:widget.keyboard|default(false), field: "keyboard-#{widget.id}"}) }}
    <script type="text/javascript">
        require(['jquery', 'select2'], function ($) {
            var url = '{{ APP.href('/catalog/products/skus') }}';
            var select2Query = {
                select2query: function (options) {
                    var self = select2Query;
                    var $el = $(options.element);
                    var values = $el.data('searches') || [];
                    var flags = $el.data('flags') || {};
                    var term = options.term || '*';
                    var page = options.page;
                    var data;
                    if (flags[term] != undefined && flags[term].loaded == 2) {
                        data = {results: self.searchLocal(term, values, page, 100), more: (flags[term].page > page)};
                        options.callback(data);
                    } else {
                        self.search({
                            term: term,
                            page: page,
                            searchedTerms: flags
                        }, url, function (result, params) {
                            var more;
                            if (result == 'local') {
                                more = (params.searchedTerms[term].page > params.page) || (params.searchedTerms[term].loaded == 1);
                                data = {
                                    results: self.searchLocal(params.term, values, params.page, params.o),
                                    more: more
                                };
                                options.callback(data);
                            } else if (result.items !== undefined) {
                                more = params.searchedTerms[term].loaded === 1;
                                data = {results: result.items, more: more};
                                flags[term] = params.searchedTerms[term];
                                values = self.mergeResults(values, data.results, function (item, bitSet) {
                                    var inSet = true;
                                    if (!bitSet[item.id]) {
                                        inSet = false;
                                        bitSet[item.id] = 1;
                                    }
                                    return inSet;
                                });
                                $el.data({searches: values, flags: flags});

                                options.callback(data);
                            }
                        })
                    }
                }
                ,
                mergeResults: function () {
                    var result = [], bitSet = {}, arr, len;
                    var checker = arguments[arguments.length - 1]; // function to check if item is in set
                    if (!$.isFunction(checker)) {
                        throw "Last argument must be a function.";
                    }
                    for (var i = 0; i < (arguments.length - 1); i++) {
                        arr = arguments[i];
                        if (!arr instanceof Array) {
                            continue;
                        }
                        len = arr.length;
                        while (len--) {
                            var itm = arr[len];
                            if (!checker(itm, bitSet)) {
                                result.unshift(itm);
                            }
                        }
                    }
                    return result;
                },
                search: function (params, url, callback) {
                    params.q = params.term || '*'; // '*' means default search
                    params.page = params.page || 1;
                    params.o = params.limit || 100;

                    params.searchedTerms = params.searchedTerms || {};
                    if (params.searchedTerms['*'] && params.searchedTerms['*'].loaded == 2) {
                        // if default search already returned all results, no need to go back to server
                        params.searchedTerms[params.term] = params.searchedTerms['*'];
                    }
                    var termStatus = params.searchedTerms[params.term];
                    if (termStatus == undefined || (termStatus.loaded == 1 && termStatus.page < params.page)) { // if this is first load, or there are more pages and we're looking for next page
                        if (termStatus == undefined) {
                            params.searchedTerms[params.term] = {};
                        }
                        $.get(url, {page: params.page, q: params.q, o: params.o})
                                .done(function (result) {
                                    if (result.hasOwnProperty('total_count')) {
                                        //console.log(result['total_count']);
                                        var more = params.page * params.o < result['total_count'];
                                        params.searchedTerms[params.term].loaded = (more) ? 1 : 2; // 1 means more results to be fetched, 2 means all fetched
                                        params.searchedTerms[params.term].page = params.page; // 1 means more results to be fetched, 2 means all fetched
                                    }
                                    callback(result, params);
                                })
                                .fail(function (result) {
                                    callback(result, params);
                                });
                    } else if (termStatus.loaded == 2 || (termStatus.page >= params.page)) {
                        callback('local', params); // find results from local storage
                    } else {
                        console.error("UNKNOWN search status.")
                    }
                },
                searchLocal: function (term, values, page, limit) {
                    page = page || 1;
                    limit = limit || 100;
                    var counted = 0;
                    var offset = (page - 1) * limit; // offset from which to start fetching results
                    var max = offset + limit;
                    var regex;
                    if (term != '*') { // * is match all, don't try to search
                        regex = new RegExp(term, 'i');
                    }
                    var matches = $.grep(values, function (val) {
                        if (counted >= max) { // if already reached goal, don't add any more matches
                            return false;
                        }

                        var test;
                        if (regex) {
                            test = regex.test(val['text']); // if regex and it matches a term
                            if (!test && val.hasOwnProperty('sku')) {
                                test = regex.test(val['sku']);
                            }
                            if (test) {
//                                    console.log(term + ' matches ' + val.text);
                                counted++; // up the counter
                            }
                        } else {
                            counted++; // no regex, just return matching items by position
                            test = true;
                        }
                        return test && counted >= offset && counted < max;// if term is not for this page, skip it
                    });
                    return matches;
                },
                initSelection: function (el, callback) {
                    var data = [];
                    var val = el.val().split(",");
                    for (var i in val) {
                        var val2 = val[i];
                        data.push({id: val2, text: val2});
                    }
                    callback(data);
                }
            };

            var $widget = $("#product-carousel-{{ widget.id }}");

            $widget.select2({
                minimumResultsForSearch: 15,
                placeholder: "Choose products",
                multiple: true,
                closeOnSelect: true,
                dropdownCssClass: "bigdrop",
                dropdownAutoWidth: true,
                selectOnBlur: false,
                formatSelection: function (item) {
                    return item['id'];
                },
                formatResult: function (item) {
                    var markup = '<div class="row-fluid" title="' + item.text + '">' +
                            '<div class="span2">SKU: <em>' + item.id + '</em></div>' +
                            '<div class="span2">Name: ' + item.text.substr(0, 20);
                    if (item.text.length > 20) {
                        markup += '...';
                    }
                    markup += '</div></div>';

                    return markup;
                },
                initSelection: select2Query.initSelection,
                query: select2Query.select2query
            });

        });
    </script>
{% endmacro %}
