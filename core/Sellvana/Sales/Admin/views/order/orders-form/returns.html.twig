{% set order = THIS.get('model') %}

{% set returnableItems = order.getReturnableItems() %}
{% set allReturns = order.getAllReturns() %}

<div class="f-section" id="order-container">

    {{ THIS.view('core/messages') | raw }}

    {% if returnableItems %}
        <div id="return-create-container">
            <h2>{{ 'Create a return'|_ }}</h2>
            <table class="table table-bordered table-striped dataTable">
                <thead>
                <tr>
                    <th>{{ 'Product SKU'|_ }}</th>
                    <th>{{ 'Inventory SKU'|_ }}</th>
                    <th>{{ 'Product Name'|_ }}</th>
                    <th>{{ 'Qty Ordered'|_ }}</th>
                    <th>{{ 'Qty To Return'|_ }}</th>
                </tr>
                </thead>
                <tbody>
                {% for i in returnableItems %}
                    <tr>
                        <td>{{ i.get('product_sku') }}</td>
                        <td>{{ i.get('inventory_sku') }}</td>
                        <td>{{ i.get('product_name') }}</td>
                        <td>{{ i.get('qty_ordered') }}</td>
                        <td>
                            <select name="qtys[{{ i.get('id') }}]" class="form-control input-sm">
                                <option value=""></option>
                                {% set qtyCanReturn = i.getQtyCanReturn() %}
                                {% for q in range(1, qtyCanReturn) %}
                                    <option value="{{ q }}" {{ q == qtyCanReturn ? 'selected' }}>{{ q }}</option>
                                {% endfor %}
                            </select>
                        </td>
                    </tr>
                {% endfor %}
                </tbody>
            </table>
            <button id="btnReturnCreate" data-container="#return-create-container" class="btn btn-xs btn-primary" type="button">{{ 'Create'|_ }}</button>
        </div>
    {% endif %}

    {% if returnableItems and allReturns %}
        <hr>
    {% endif %}

    {% if not returnableItems %}
        {{ 'There are no items available for a new return' | _ }}
    {% endif %}

    {% if allReturns %}
        <h2>{{ 'Existing Returns' }}</h2>
        <div id="return-update-container">
            <table class="table table-bordered table-striped dataTable">
                <thead>
                <tr>
                    <th>{{ 'Status'|_ }}</th>
                    <th>{{ 'Timeline'|_ }}</th>
                    <th>{{ 'Items'|_ }}</th>
                    <th>{{ 'Delete'|_ }}</th>
                </tr>
                </thead>
                <tbody>
                {% for c in allReturns %}
                    {% set allOverallStates = c.state().overall().getAllValueLabels() %}
                    {% set allCustomStates = c.state().custom().getAllValueLabels() %}
                    <tr>
                        <td>
                            <p>{{ 'Overall:'|_ }} <strong>{{ c.state().overall().getValueLabel() }}</strong></p>
                            {% if allCustomStates %}
                                <p>{{ 'Custom:'|_ }}&nbsp;<select name="returns[{{ c.id() }}][state_custom]" class="form-control">
                                        {{ UTIL.optionsHtml(allCustomStates, c.state().custom().getValue()) | raw }}
                                    </select></p>
                            {% endif %}
                            {% for k, v in allOverallStates %}
                                {% if k != c.get('state_overall') %}
                                    <input type="button" name="returns[{{ c.id() }}][state_overall][{{ k }}]" value="{{ v }}" class="btn btn-default btn-xs js-return-action">
                                {% endif %}
                            {% endfor %}
                        </td>
                        <td>
                            <p>{{ 'Created:'|_ }} <strong>{{ c.get('create_at') | locdate }}</strong></p>
                        </td>
                        <td>
                            {% for i in c.items() %}
                                <strong>{{ i.get('inventory_sku') ~ ' x' ~ i.get('qty') }}</strong>: {{ i.get('product_name') }}
                            {% endfor %}
                        </td>
                        <td>
                            <input type="checkbox" class="btn btn-xs btn-danger" name="delete[{{ c.id }}]" value="1">
                        </td>
                    </tr>
                {% endfor %}
                </tbody>
                <tfoot>
                <tr>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td><button id="btnReturnUpdate" data-action="update" data-container="#return-update-container" name="update" class="btn btn-xs btn-primary" type="button" value="1">{{ 'Update'|_ }}</button></td>
                    <td></td>
                </tr>
                </tfoot>
            </table>
        </div>
    {% endif %}
</div>

<script>
    require(['jquery', 'underscore'], function($, _) {
        var returnCreateUrl = "{{ APP.href('returns/create?id=' ~ order.id()) }}";
        var returnUpdateUrl = "{{ APP.href('returns/update?id=' ~ order.id()) }}";
        var defSuccessMsg = "{{ 'Operation successful'|_ }}";
        var defErrorMsg = "{{ 'There was an error during processing'|_ }}";
        var container = $('#tab-returns');

        function processPostResponse(data, status, xhr) {
            data = data || {};
            if (status !== 'success') {
                data.error = true;
                data.message = data.message || defErrorMsg;
            }
            if (data.tabs) {
                _.each(data.tabs, function (tabHtml, i) {
                    $('#tab-' + i).html(tabHtml).data('loaded', !!tabHtml);
                });
            }
            var msg = data.message || (data.error ? defErrorMsg : defSuccessMsg), type = data.error ? 'error' : 'success';
            $.bootstrapGrowl(msg, {type: type, align: 'center', width: 'auto', delay: 1000});
        }

        // Create returnlation or update return data
        container.unbind().on('click', '#btnReturnCreate, #btnReturnUpdate', function(ev) {
            var postUrl = !ev.target.dataset.action ? returnCreateUrl : returnUpdateUrl;
            var serializeData = $(ev.target.dataset.container).find('input, select').serializeArray();
            $.post(postUrl, serializeData, processPostResponse);
        });

        // Update return status
        container.on('click', '.js-return-action', function(ev) {
            var $el = $(ev.target), postData = {};
            postData[$el.attr('name')] = $el.val();
            $.post(returnUpdateUrl, postData, processPostResponse);
        });
    })
</script>