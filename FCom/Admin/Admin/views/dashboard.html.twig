{% set widgets = THIS.getWidgets() %}
{% set availWidgets = [] %}
{% set asyncWidgets = [] %}

{% for widget in widgets %}
    {% if not widget.state.closed %}
        {% if widget.async %}
            {% set asyncWidgets = asyncWidgets|merge([widget.key]) %}
        {% endif %}
    {% else %}
        {% set availWidgets = availWidgets|merge([widget]) %}
    {% endif %}
{% endfor %}

<input type="hidden" id="filter-text" value="between" data-range="range" data-text="Between"/>

<div class="f-admin-main-view">
    <div class="page-header f-admin-page-header">
        <h1 class="f-page-title">
            <i class="icon-dashboard"></i>
            {{ 'Dashboard'|_ }}
        </h1>

        <div class="btn-group">
            <button class="btn btn-primary" data-toggle="modal" data-target="#add-widget-modal">{{ '+ Add Widget'|_ }}</button>
        </div>
        <div class="btn-group  dropdown  f-filter-btns date-range-plugin" id="custom">
            <button class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                <i class="icon-calendar"></i>
                <span>{{ 'Custom:'|_ }}</span>
                <span class="custom-filter-value">{{ "All"|_ }}</span>
                <b class="caret"></b>
            </button>
            <i class="icon-remove-sign choice-close hidden"></i>
            <ul class="dropdown-menu filter-box">
                <li>
                    <div class="input-group">
                        <div class="input-group-btn  dropdown">
                            <button class='btn btn-default dropdown dropdown-toggle filter-text-sub ' data-toggle='dropdown'>
                                {{ 'Between'|_ }}
                                <span class='caret'></span>
                            </button>

                            <ul class='dropdown-menu filter-sub'>
                                <li>
                                    <a class='filter_op' data-range="range" data-id='between' href='javascript:void(0)'>{{ 'between'|_ }}</a>
                                </li>
                                <li>
                                    <a class='filter_op' data-range="not_range" data-id='from' href='javascript:void(0)'>{{ 'from'|_ }}</a>
                                </li>
                                <li>
                                    <a class='filter_op' data-range="not_range" data-id='to' href='javascript:void(0)'>{{ 'to'|_ }}</a>
                                </li>
                                <li>
                                    <a class='filter_op' data-range="not_range" data-id='equal' href='javascript:void(0)'>{{ 'is equal to'|_ }}</a>
                                </li>
                                <li>
                                    <a class='filter_op' data-range="range" data-id='not_in' href='javascript:void(0)'>{{ 'not in'|_ }}</a>
                                </li>
                            </ul>
                        </div>

                        <div class="input-group range">
                            <input id="data-range-picker-text" type="text" placeholder="{{ 'Select date range'|_ }}" class="form-control daterange date-filter"
                                   value="">
                        <span id="daterange2" class="input-group-addon">
                          <i class="icon-calendar"></i>
                        </span>
                        </div>
                        <div class="datepicker input-group not_range">
                            <input type="text" placeholder="Select date" data-format="yyyy-MM-dd" class="form-control date-filter" value="">
                        <span class="input-group-addon">
                            <span data-time-icon="icon-time" data-date-icon="icon-calendar" class="icon-calendar"></span>
                        </span>
                        </div>
                        <div class="input-group-btn">
                            <button type="button" class="btn btn-primary update">
                                <i class=" icon-check-sign"></i>
                                {{ 'Update'|_ }}
                            </button>
                        </div>
                    </div>
                </li>
            </ul>
        </div>

        <div class="pull-right btn-group">
            <button class="btn btn-default btn-filter-date" data-date="all">{{ 'All'|_ }}</button>
            <button class="btn btn-default btn-filter-date" data-date="month">{{ 'Last month'|_ }}</button>
            <button class="btn btn-default btn-filter-date" data-date="week">{{ 'Last week'|_ }}</button>
            <button class="btn btn-default btn-filter-date" data-date="today">{{ 'Today'|_ }}</button>
        </div>
    </div>

    <div class="f-admin-main f-page-dashboard">
        {{ THIS.view('core/messages')|raw }}

        <div class="row">
            <ul class="js-sortable-container" id="dashboard-widgets-container">
                {% for widget in widgets %}
                    {% if not widget.state.closed %}
                        {% if widget.async %}
                            {{ THIS.view('dashboard/widget').set('widget', widget) | raw }}
                        {% endif %}
                    {% endif %}
                {% endfor %}
            </ul>
        </div>
    </div>
</div>


<!-- Modal -->
<div class="modal fade" id="add-widget-modal" tabindex="-1" role="dialog" aria-labelledby="add-widget-modal-label" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">

            <form id="add-widget-form" role="form">

                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                    <h4 class="modal-title" id="add-widget-modal-label">{{ 'Add A Widget'|_ }}</h4>
                </div>

                <div class="modal-body">
                    <div class="row">
                        <div class="form-group col-sm-12">
                            <div class="alert alert-danger alert-dismissable" id="wigets-avail-status">
                                <h4>
                                    <b>{{ 'All available widgets have been added.'|_ }}</b>
                                    <br><br>
                                </h4>
                            </div>
                            <label class="control-label">{{ "Widget to add to dashboard"|_ }}</label>

                            <div class="controls">
                                <select class="form-control required" name="widget" id="add-widget-selection">
                                    <option value="">{{ 'Select a widget...'|_ }}</option>
                                    {% for w in availWidgets %}
                                        <option value="{{ w.key }}">{{ w.title }}</option>
                                    {% endfor %}
                                </select>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">{{ 'Cancel'|_ }}</button>
                    <button type="button" class="btn btn-primary" id="add-widget-submit">{{ 'Add Widget'|_ }}</button>
                </div>

            </form>

        </div>
    </div>
</div>

<script>
require(['jquery', 'jquery-ui', 'datetimepicker', 'moment', 'daterangepicker'], function($) {

    FCom.Admin.Dashboard = function () {

        var dashboardUrl = "{{ APP.href('dashboard') }}";
        var personalizeUrl = "{{ APP.href('my_account/personalize') }}";
        var filter =  $('#filter-text');
        var customFilter = $('#custom');
        var sortable = $('.js-sortable-container');
        var closeFilter = customFilter.find('.choice-close');
        //var widgetTemplate = _.template($('#dashboard-widget-template').html());
        var select = $('#add-widget-selection');
        var addWidgetModal = $('#add-widget-modal');

        function init() {
            checkAddWigetAvailableStatus();

            $('#add-widget-submit').click(function(ev) {
                load(select.val(), true, true);
                $('#add-widget-selection').find('option[value="'+ select.val() +'"]').remove();
                select.val('');
                addWidgetModal.modal('hide');
                checkAddWigetAvailableStatus();
            });

            $('.btn-filter-date').click(function () {
                var dataDefault = {type: 'default', date: 'all', range: 'range', is_btn_filter: 1};
                $('button.active-button').removeClass('active-button');
                $(this).addClass('active-button');
                resetFilterDate();
                switch ($(this).attr('data-date')) {
                    case 'month':
                        dataDefault.type = 'between';
                        dataDefault.range = 'range';
                        dataDefault.date = 'last-month';
                        filterDate(dataDefault);
                        break;
                    case 'week':
                        dataDefault.type = 'between';
                        dataDefault.range = 'range';
                        dataDefault.date = 'last-week';
                        filterDate(dataDefault);
                        break;
                    case 'today':
                        dataDefault.type = 'equal';
                        dataDefault.range = 'not_range';
                        dataDefault.date = 'today';
                        filterDate(dataDefault);
                        break;
                    case 'all':
                        filterDate(dataDefault);
                        break;
                    default:
                        break;
                }
            });

            customFilter.find('.filter_op').click(function () {
                filter.val($(this).attr('data-id'));
                filter.attr('data-range', $(this).attr('data-range'));
                var text = $(this).text().charAt(0).toUpperCase() + $(this).text().slice(1);
                filter.attr('data-text', text);
            });
            customFilter.find('.update').click(function () {
                var date = '';
                if (filter.attr('data-range') == 'not_range') {
                    date = $(this).parents('.input-group').children('.not_range').children('.date-filter').val();
                } else {
                    date = $(this).parents('.input-group').children('.range').children('.date-filter').val();
                }
                if (date != '') {
                    var data = {type: filter.val(), date: date , range: filter.attr('data-range'), is_btn_filter: 0};

                    closeFilter.removeClass('hidden');
                    customFilter.children('button').addClass('filter');
                    customFilter.find('.custom-filter-value').html(filter.attr('data-text') +' "' + $('<div/>').text(date).html() + '"');
                    filterDate(data);
                    $('button.active-button').removeClass('active-button');
                }
            });
            customFilter.on('click', 'input', function (ev) {
                ev.stopPropagation();
                ev.preventDefault();
                return false;
            });
            customFilter.find('.filter-text-sub').click(function () {
                $(this).parents('div.dropdown:first').toggleClass('open');
                return false;
            });
            customFilter.find('a.filter_op').click(function (ev) {
                if ($(ev.target).attr('data-range') == 'range') {
                    customFilter.find('.range').css('display', 'table');
                    customFilter.find('.not_range').css('display', 'none');
                } else {
                    customFilter.find('.range').css('display', 'none');
                    customFilter.find('.not_range').css('display', 'table');
                }
                var text = $(ev.target).html();
                text = text.charAt(0).toUpperCase() + text.slice(1);
                customFilter.find('button.filter-text-sub').html(text + "<span class='caret'></span>");
                customFilter.find('button.filter-text-sub').parents('div.dropdown:first').toggleClass('open');

                return false;
            });
            closeFilter.click(function (){
                resetFilterDate();
                filterDate({type: 'default', date: 'all', range: 'range', is_btn_filter: 1});
                return false;
            });

            {% if asyncWidgets %}
                load({{ UTIL.toJson(asyncWidgets)|raw }}.join(','));
            {% endif %}
        }

        function validateDateTime(data)
        {
            var error = false;
            if (['range', 'not_range'].indexOf(data.range) == -1) {
                error = true;
            }
            switch (data.date) {
                case 'last-month':
                case 'last-week':
                case 'today':
                case 'all':
                    if (data.is_btn_filter == 0) {
                        error = true;
                    }
                    break;
                default:
                    var date = data.date.split('~');
                    if ((data.range == 'range' && date.length < 2) || (data.range == 'not_range' && date.length > 1)) {
                        error = true;
                    }
                    if (!error) {
                        date.forEach(function (val) {
                            if (!/^\d{4}[\/\-]\d{1,2}[\/\-]\d{1,2}$/.test(val)) {
                                error = true;
                            }
                        })
                    }

                    break;
            }
            return error;
        }

        function checkAddWigetAvailableStatus()
        {
            if (select.find('option').length > 1) {
                $('#wigets-avail-status').css('display', 'none');
                $('#add-widget-submit').removeClass('disabled');
                select.prop('disabled', false);
            } else {
                $('#wigets-avail-status').css('display', 'block');
                $('#add-widget-submit').addClass('disabled');
                $('#add-widget-selection').prop('disabled', 'disabled');
            }
        }

        function load(widgets, wrapped, add)
        {
            $.get(dashboardUrl, {widgets: widgets, wrapped: wrapped || '', add: add || ''}, function (response, status, xhr) {
                $.each(response.widgets, function (key, widget) {
                    if (wrapped) {
                        $('#dashboard-widgets-container').append(widget.html);
                    } else {
                        $('#dashboard-widget__' + widget.key + ' .widget-contents').html(widget.html);
                    }
                });
                if (Object.keys(response.filter).length !== 0) {
                    switch (response.filter.date) {
                        case 'last-month':
                            $('button[data-date="month"]').click();
                            break;
                        case 'last-week':
                            $('button[data-date="week"]').click();
                            break;
                        case 'today':
                            $('button[data-date="today"]').click();
                            break;
                        case 'all':
                            $('button[data-date="all"]').click();
                            break;
                        default:
                            $('a[data-id="' + response.filter.type + '"]').click();
                            var range = (response.filter.range == 'range') ? $('div.range') : $('div.not_range');
                            range.find('input.date-filter').val(response.filter.date);
                            $('.update').click();
                            break;
                    }
                } else {
                    $('button[data-date="all"]').click();
                }
            });
        }

        function filterDate(data)
        {
            if (!validateDateTime(data)) {
                $.post('{{ APP.href("dashboard/data") }}', data, function (response, status, xhr) {
                    if (typeof (response.error) === 'undefined') {
                        $.each(response, function (key, widget) {
                            $('#dashboard-widget__' + widget.key + ' .widget-contents').html(widget.html);
                        });
                    }
                });
            }
        }

        function resetFilterDate()
        {
            closeFilter.addClass('hidden');
            customFilter.children('button').removeClass('filter');
            customFilter.find('.custom-filter-value').html('All');
            $('.date-filter').val('');
        }

        function initSortable()
        {
            sortable.sortable({
                connectWith: '.js-sortable-container',
                handle: '.js-sortable-handle',
                update: function(ev, ui) {
                    //console.log(this, ev, ui);
                    var widgetIds = [];
                    $(this).children().each(function(idx, el) {
                        widgetIds.push($(el).data('id'));
                    });
                    var postData = { do:'dashboard.widget.pos', widgets:widgetIds };
                    $.post(personalizeUrl, postData, function(response, status, xhr) {
                        FCom.Admin.log(response);
                    })
                }
                //delay: 100,
            });

            sortable.on('click', '.js-remove', function(idx, el) {
                var $el = $(this);
                var postData = { do:'dashboard.widget.close', key:$el.parents('li').data('id') };
                $.post(personalizeUrl, postData, function(response, status, xhr) {
                    var option = '';
                    switch (response.r.key) {
                        case 'orders-list':
                            option = "<option value='orders-list'>Recent Orders</option>";
                            break;
                        case 'customers-list':
                            option = "<option value='customers-list'>Recent Customers</option>";
                            break;
                        case 'visitors-totals':
                            option = "<option value='visitors-totals'>Visitors</option>";
                            break;
                        case 'orders-totals':
                            $('.date-filter').val('');
                            option = "<option value='orders-totals'>Order Totals</option>";
                            break;
                        default :break;
                    }
                    select.append(option);

                    checkAddWigetAvailableStatus();
                });
            });

            sortable.on('click', '.js-collapse', function(idx, el) {
                var $el = $(this);
                var postData = { do:'dashboard.widget.collapse', key:$el.parents('li').data('id'), 'collapsed':!$el.parents('.box-collapsed').get(0) };
                $.post(personalizeUrl, postData, function(response, status, xhr) {
                    FCom.Admin.log(response);
                });
            });
        }

        function initDatepicker()
        {
            $(".datepicker").datetimepicker({
                pickTime: false
            });
            $("#daterange2").daterangepicker({
                format: "YYYY-MM-DD"
            },function (start, end) {
                return $("#data-range-picker-text").val(start.format("YYYY-MM-DD") + "~" + end.format("YYYY-MM-DD"));
            });
            $('.daterangepicker').on('click', function (ev) {
                ev.stopPropagation();
                ev.preventDefault();
                return false;
            });
        }

        init();
        initSortable();
        initDatepicker();

        //todo: return some properties or functions so other widget can re-use it
    };

    FCom.Admin.Dashboard();
})
</script>
