{% set config = THIS.get('config') %}

{% set type = config.type %}
{% set targetType = config.targetType %}
{% set elementContainer = config.elementContainer %}

{% set gridConfig = config.gridConfig %}
{% set medialibConfig = config.medialibConfig %}

{% set combineType = targetType ~ type %}
{% set combineTypeId = targetType ~ '_' ~ type %}

<script>
    var {{ medialibConfig.id }}_grid; //grid contains all attachment (or images)
    var {{ combineType }}Grid; //grid contains all attachment (or images) related with products (or targetType)

    require(['jquery', 'underscore', 'backbone', 'unique', 'fcom.backbonegrid'], function ($, _, Backbone) {
        //var afterAdd = {{ config.afterAdd }};
        var elementContainer = $('{{ elementContainer }}');
        var mediaId = '{{ medialibConfig.id }}';

        var originIds, addedIds = [], removedIds = [];
        var rowsAllImages;

        function _getAttachmentsDbFields(row) {
            return {
                id: row.id,
                file_id: row.file_id,
                label: row.label,
                position: row.position,
                create_at: row.create_at,
                update_at: row.update_at,
                _new: row._new
            };
        }

        /*
         *function to set attachment grid data into form fields to send them server
         *This function is callend when 'save' button of product form is clicked.
         */
        window.submitCallback.push(function () {
            console.log('set{{ type }}GridVals');
            removedIds = _.difference(originIds, {{ combineType }}Grid.getRows().pluck('id'));

            var rows = [];
            {{ combineType }}Grid.getRows().forEach(function (row) {
                rows.push(_getAttachmentsDbFields(row.toJSON()));
            });
            console.log(rows);
            /*$('#prod-attach-rows').val(JSON.stringify(rows));
             $('#prod-attach-remove').val(removedIds.join(','));*/
            elementContainer.find('input.target-attach-rows').val(JSON.stringify(rows));
            elementContainer.find('input.target-attach-remove').val(removedIds.join(','));
        });

        /*
         *MediaGrid registery function
         */
        window.{{ medialibConfig.id }}_register = function (grid) {
            {{ medialibConfig.id }}_grid = grid;
            grid.build();

            //backboneGridAllImages = all_ {{ type }}_grid.getGridSkeleton();
            //rowsAllImages = all_ all_ {{ type }}_grid.getRows();
            //Depending selected rows count, disable or enable add button of popup
            {{ medialibConfig.id }}_grid.getSelectedRows().on('add remove reset', function () {
                if ({{ medialibConfig.id }}_grid.getSelectedRows().length > 0) {
                    $('.btn_' + mediaId + '_add').removeClass('disabled');
                } else {
                    $('.btn_' + mediaId + '_add').addClass('disabled');
                }
            });

            $('.btn_' + mediaId + '_add').click(function () {
                var gridView = {{ combineType }}Grid.getGridView();
                {{ medialibConfig.id }}_grid.getSelectedRows().forEach(function (row) {
                    if (!{{ combineType }}Grid.getRows().findWhere({file_id: row.get('id')})) {
                        var addedRow = row;
                        addedRow.set('_new', true);
                        addedRow.set('file_id', row.id);
                        addedRow.set('id', guid());
                        addedRow.set('selected', false);
                        addedRow.set('update_at', dateTimeNow());
                        addedRow.set('create_at', dateTimeNow());
                        gridView.collection.add(addedRow.toJSON(), {silent: true});
                    }
                });
                if (typeof window.afterAdd{{ type|capitalize }} == 'function') {
                    window.afterAdd{{ type|capitalize }}(grid);
                }

                gridView.render();
                {{ medialibConfig.id }}_grid.getGridView().clearSelectedRows();
                $('#' + mediaId + '_modal').modal('hide');

            });

            //todo:
        };

        /*todo: need check why we always use function hook event grid_before_create to trigger modal */
        {% if gridConfig.config.grid_before_create != '' %}
        window.{{ gridConfig.config.grid_before_create }} = function (grid) {
            {{ combineType }}Grid = grid;
            {{ combineType }}Grid.build();

            var attachmentConfig = {{ combineType }}Grid.getGridSkeleton();
            originIds = {{ combineType }}Grid.getRows().pluck('id');

            $(attachmentConfig.AddButton).click(function () {
                $('#' + mediaId + '_modal').modal('show');
            });

        };
        {% endif %}

        window.{{ medialibConfig.id }}_afterMassDelete = function() {
            //remove row in related grid and render again
            var gridView = {{ combineType }}Grid.getGridView();
            {{ medialibConfig.id }}_grid.getSelectedRows().forEach(function (row) {
                {{ combineType }}Grid.getRows().forEach(function (relatedRow) {
                    if (relatedRow.get('file_id') == row.get('id')) {
                        console.log('remove related row', relatedRow);
                        gridView.collection.remove(relatedRow, {silent: false});
                    }
                });
            });

            gridView.render();
        };
    });
</script>


{{ LAYOUT.view('core/backbonegrid').set('grid', gridConfig) | raw }}
{% set mediaConfig = UTIL.arrayMerge({mode: 'link', title: 'Attachments', multiSelAllowed: true, folder: 'media/product/attachment'}, medialibConfig) %}
{{ LAYOUT.view('core/medialib').set('config', mediaConfig) | raw }}

<input type='hidden' name="grid[{{ type }}][del]" class="target-attach-remove"/>
<input type='hidden' name="grid[{{ type }}][rows]" class="target-attach-rows"/>